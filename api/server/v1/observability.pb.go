// Copyright 2022-2023 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: server/v1/observability.proto

package api

import (
	_ "github.com/google/gnostic/openapiv3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Codes returned by the Tigris server in the case of error
type Code int32

const (
	Code_OK                  Code = 0  // 200
	Code_CANCELLED           Code = 1  // 499
	Code_UNKNOWN             Code = 2  // 500
	Code_INVALID_ARGUMENT    Code = 3  // 400
	Code_DEADLINE_EXCEEDED   Code = 4  // 504
	Code_NOT_FOUND           Code = 5  // 404
	Code_ALREADY_EXISTS      Code = 6  // 409
	Code_PERMISSION_DENIED   Code = 7  // 403
	Code_RESOURCE_EXHAUSTED  Code = 8  // 429
	Code_FAILED_PRECONDITION Code = 9  // 412
	Code_ABORTED             Code = 10 // 409
	Code_OUT_OF_RANGE        Code = 11 // 400
	Code_UNIMPLEMENTED       Code = 12 // 501
	Code_INTERNAL            Code = 13 // 500
	Code_UNAVAILABLE         Code = 14 // 503
	Code_DATA_LOSS           Code = 15 // 500
	Code_UNAUTHENTICATED     Code = 16 // 401
	Code_CONFLICT            Code = 17 // 409
	Code_BAD_GATEWAY         Code = 18 // 502
	Code_METHOD_NOT_ALLOWED  Code = 19 // 405
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0:  "OK",
		1:  "CANCELLED",
		2:  "UNKNOWN",
		3:  "INVALID_ARGUMENT",
		4:  "DEADLINE_EXCEEDED",
		5:  "NOT_FOUND",
		6:  "ALREADY_EXISTS",
		7:  "PERMISSION_DENIED",
		8:  "RESOURCE_EXHAUSTED",
		9:  "FAILED_PRECONDITION",
		10: "ABORTED",
		11: "OUT_OF_RANGE",
		12: "UNIMPLEMENTED",
		13: "INTERNAL",
		14: "UNAVAILABLE",
		15: "DATA_LOSS",
		16: "UNAUTHENTICATED",
		17: "CONFLICT",
		18: "BAD_GATEWAY",
		19: "METHOD_NOT_ALLOWED",
	}
	Code_value = map[string]int32{
		"OK":                  0,
		"CANCELLED":           1,
		"UNKNOWN":             2,
		"INVALID_ARGUMENT":    3,
		"DEADLINE_EXCEEDED":   4,
		"NOT_FOUND":           5,
		"ALREADY_EXISTS":      6,
		"PERMISSION_DENIED":   7,
		"RESOURCE_EXHAUSTED":  8,
		"FAILED_PRECONDITION": 9,
		"ABORTED":             10,
		"OUT_OF_RANGE":        11,
		"UNIMPLEMENTED":       12,
		"INTERNAL":            13,
		"UNAVAILABLE":         14,
		"DATA_LOSS":           15,
		"UNAUTHENTICATED":     16,
		"CONFLICT":            17,
		"BAD_GATEWAY":         18,
		"METHOD_NOT_ALLOWED":  19,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_server_v1_observability_proto_enumTypes[0].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_server_v1_observability_proto_enumTypes[0]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{0}
}

// Represents Tigris operation category
type TigrisOperation int32

const (
	TigrisOperation_ALL      TigrisOperation = 0
	TigrisOperation_READ     TigrisOperation = 1
	TigrisOperation_WRITE    TigrisOperation = 2
	TigrisOperation_METADATA TigrisOperation = 3
)

// Enum value maps for TigrisOperation.
var (
	TigrisOperation_name = map[int32]string{
		0: "ALL",
		1: "READ",
		2: "WRITE",
		3: "METADATA",
	}
	TigrisOperation_value = map[string]int32{
		"ALL":      0,
		"READ":     1,
		"WRITE":    2,
		"METADATA": 3,
	}
)

func (x TigrisOperation) Enum() *TigrisOperation {
	p := new(TigrisOperation)
	*p = x
	return p
}

func (x TigrisOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TigrisOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_server_v1_observability_proto_enumTypes[1].Descriptor()
}

func (TigrisOperation) Type() protoreflect.EnumType {
	return &file_server_v1_observability_proto_enumTypes[1]
}

func (x TigrisOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TigrisOperation.Descriptor instead.
func (TigrisOperation) EnumDescriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{1}
}

// Function to apply on metrics query
type MetricQueryFunction int32

const (
	MetricQueryFunction_RATE  MetricQueryFunction = 0
	MetricQueryFunction_COUNT MetricQueryFunction = 1
	MetricQueryFunction_NONE  MetricQueryFunction = 2
)

// Enum value maps for MetricQueryFunction.
var (
	MetricQueryFunction_name = map[int32]string{
		0: "RATE",
		1: "COUNT",
		2: "NONE",
	}
	MetricQueryFunction_value = map[string]int32{
		"RATE":  0,
		"COUNT": 1,
		"NONE":  2,
	}
)

func (x MetricQueryFunction) Enum() *MetricQueryFunction {
	p := new(MetricQueryFunction)
	*p = x
	return p
}

func (x MetricQueryFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricQueryFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_server_v1_observability_proto_enumTypes[2].Descriptor()
}

func (MetricQueryFunction) Type() protoreflect.EnumType {
	return &file_server_v1_observability_proto_enumTypes[2]
}

func (x MetricQueryFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricQueryFunction.Descriptor instead.
func (MetricQueryFunction) EnumDescriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{2}
}

// Specifies how the initial query's result buckets should be processed in
// next stage.
type RollupAggregator int32

const (
	RollupAggregator_ROLLUP_AGGREGATOR_SUM   RollupAggregator = 0
	RollupAggregator_ROLLUP_AGGREGATOR_COUNT RollupAggregator = 1
	RollupAggregator_ROLLUP_AGGREGATOR_MIN   RollupAggregator = 2
	RollupAggregator_ROLLUP_AGGREGATOR_MAX   RollupAggregator = 3
	RollupAggregator_ROLLUP_AGGREGATOR_AVG   RollupAggregator = 4
)

// Enum value maps for RollupAggregator.
var (
	RollupAggregator_name = map[int32]string{
		0: "ROLLUP_AGGREGATOR_SUM",
		1: "ROLLUP_AGGREGATOR_COUNT",
		2: "ROLLUP_AGGREGATOR_MIN",
		3: "ROLLUP_AGGREGATOR_MAX",
		4: "ROLLUP_AGGREGATOR_AVG",
	}
	RollupAggregator_value = map[string]int32{
		"ROLLUP_AGGREGATOR_SUM":   0,
		"ROLLUP_AGGREGATOR_COUNT": 1,
		"ROLLUP_AGGREGATOR_MIN":   2,
		"ROLLUP_AGGREGATOR_MAX":   3,
		"ROLLUP_AGGREGATOR_AVG":   4,
	}
)

func (x RollupAggregator) Enum() *RollupAggregator {
	p := new(RollupAggregator)
	*p = x
	return p
}

func (x RollupAggregator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RollupAggregator) Descriptor() protoreflect.EnumDescriptor {
	return file_server_v1_observability_proto_enumTypes[3].Descriptor()
}

func (RollupAggregator) Type() protoreflect.EnumType {
	return &file_server_v1_observability_proto_enumTypes[3]
}

func (x RollupAggregator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RollupAggregator.Descriptor instead.
func (RollupAggregator) EnumDescriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{3}
}

// Specifies how the metric should be aggregated for the time slices.
type MetricQuerySpaceAggregation int32

const (
	MetricQuerySpaceAggregation_AVG MetricQuerySpaceAggregation = 0
	MetricQuerySpaceAggregation_MIN MetricQuerySpaceAggregation = 1
	MetricQuerySpaceAggregation_MAX MetricQuerySpaceAggregation = 2
	MetricQuerySpaceAggregation_SUM MetricQuerySpaceAggregation = 3
)

// Enum value maps for MetricQuerySpaceAggregation.
var (
	MetricQuerySpaceAggregation_name = map[int32]string{
		0: "AVG",
		1: "MIN",
		2: "MAX",
		3: "SUM",
	}
	MetricQuerySpaceAggregation_value = map[string]int32{
		"AVG": 0,
		"MIN": 1,
		"MAX": 2,
		"SUM": 3,
	}
)

func (x MetricQuerySpaceAggregation) Enum() *MetricQuerySpaceAggregation {
	p := new(MetricQuerySpaceAggregation)
	*p = x
	return p
}

func (x MetricQuerySpaceAggregation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricQuerySpaceAggregation) Descriptor() protoreflect.EnumDescriptor {
	return file_server_v1_observability_proto_enumTypes[4].Descriptor()
}

func (MetricQuerySpaceAggregation) Type() protoreflect.EnumType {
	return &file_server_v1_observability_proto_enumTypes[4]
}

func (x MetricQuerySpaceAggregation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricQuerySpaceAggregation.Descriptor instead.
func (MetricQuerySpaceAggregation) EnumDescriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{4}
}

// Contains retry information
type RetryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// retry delay advice in milliseconds
	Delay int32 `protobuf:"varint,3,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (x *RetryInfo) Reset() {
	*x = RetryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryInfo) ProtoMessage() {}

func (x *RetryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryInfo.ProtoReflect.Descriptor instead.
func (*RetryInfo) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{0}
}

func (x *RetryInfo) GetDelay() int32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

// ErrorDetails defines error format passed by Tigris HTTP protocol
type ErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string     `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Retry   *RetryInfo `protobuf:"bytes,3,opt,name=retry,proto3" json:"retry,omitempty"`
}

func (x *ErrorDetails) Reset() {
	*x = ErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetails) ProtoMessage() {}

func (x *ErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetails.ProtoReflect.Descriptor instead.
func (*ErrorDetails) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{1}
}

func (x *ErrorDetails) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ErrorDetails) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorDetails) GetRetry() *RetryInfo {
	if x != nil {
		return x.Retry
	}
	return nil
}

// The Error type defines a logical error model
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status code is a short, machine parsable string,
	// which uniquely identifies the error type.
	// Tigris to HTTP code mapping [here](/reference/http-code)
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=tigrisdata.observability.v1.Code" json:"code,omitempty"`
	// A developer-facing descriptive error message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{2}
}

func (x *Error) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OK
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Requests the time series metrics
type QueryTimeSeriesMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Db                  string                      `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	Branch              string                      `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Collection          string                      `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	From                int64                       `protobuf:"varint,4,opt,name=from,proto3" json:"from,omitempty"`
	To                  int64                       `protobuf:"varint,5,opt,name=to,proto3" json:"to,omitempty"`
	MetricName          string                      `protobuf:"bytes,6,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	TigrisOperation     TigrisOperation             `protobuf:"varint,7,opt,name=tigris_operation,json=tigrisOperation,proto3,enum=tigrisdata.observability.v1.TigrisOperation" json:"tigris_operation,omitempty"`
	SpaceAggregation    MetricQuerySpaceAggregation `protobuf:"varint,8,opt,name=space_aggregation,json=spaceAggregation,proto3,enum=tigrisdata.observability.v1.MetricQuerySpaceAggregation" json:"space_aggregation,omitempty"`
	SpaceAggregatedBy   []string                    `protobuf:"bytes,9,rep,name=space_aggregated_by,json=spaceAggregatedBy,proto3" json:"space_aggregated_by,omitempty"`
	Function            MetricQueryFunction         `protobuf:"varint,10,opt,name=function,proto3,enum=tigrisdata.observability.v1.MetricQueryFunction" json:"function,omitempty"`
	Quantile            float32                     `protobuf:"fixed32,11,opt,name=quantile,proto3" json:"quantile,omitempty"`
	AdditionalFunctions []*AdditionalFunction       `protobuf:"bytes,12,rep,name=additionalFunctions,proto3" json:"additionalFunctions,omitempty"`
}

func (x *QueryTimeSeriesMetricsRequest) Reset() {
	*x = QueryTimeSeriesMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTimeSeriesMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTimeSeriesMetricsRequest) ProtoMessage() {}

func (x *QueryTimeSeriesMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTimeSeriesMetricsRequest.ProtoReflect.Descriptor instead.
func (*QueryTimeSeriesMetricsRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{3}
}

func (x *QueryTimeSeriesMetricsRequest) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *QueryTimeSeriesMetricsRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *QueryTimeSeriesMetricsRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *QueryTimeSeriesMetricsRequest) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *QueryTimeSeriesMetricsRequest) GetTo() int64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *QueryTimeSeriesMetricsRequest) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *QueryTimeSeriesMetricsRequest) GetTigrisOperation() TigrisOperation {
	if x != nil {
		return x.TigrisOperation
	}
	return TigrisOperation_ALL
}

func (x *QueryTimeSeriesMetricsRequest) GetSpaceAggregation() MetricQuerySpaceAggregation {
	if x != nil {
		return x.SpaceAggregation
	}
	return MetricQuerySpaceAggregation_AVG
}

func (x *QueryTimeSeriesMetricsRequest) GetSpaceAggregatedBy() []string {
	if x != nil {
		return x.SpaceAggregatedBy
	}
	return nil
}

func (x *QueryTimeSeriesMetricsRequest) GetFunction() MetricQueryFunction {
	if x != nil {
		return x.Function
	}
	return MetricQueryFunction_RATE
}

func (x *QueryTimeSeriesMetricsRequest) GetQuantile() float32 {
	if x != nil {
		return x.Quantile
	}
	return 0
}

func (x *QueryTimeSeriesMetricsRequest) GetAdditionalFunctions() []*AdditionalFunction {
	if x != nil {
		return x.AdditionalFunctions
	}
	return nil
}

// Additional function to apply on metrics query
type AdditionalFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rollup *RollupFunction `protobuf:"bytes,1,opt,name=rollup,proto3,oneof" json:"rollup,omitempty"`
}

func (x *AdditionalFunction) Reset() {
	*x = AdditionalFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalFunction) ProtoMessage() {}

func (x *AdditionalFunction) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalFunction.ProtoReflect.Descriptor instead.
func (*AdditionalFunction) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{4}
}

func (x *AdditionalFunction) GetRollup() *RollupFunction {
	if x != nil {
		return x.Rollup
	}
	return nil
}

// Rollup function aggregates the slices of metrics returned by original query
// and lets you operate on the slices using aggregator and constructs the
// bigger slice of your choice of interval (specified in seconds).
type RollupFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggregator RollupAggregator `protobuf:"varint,1,opt,name=aggregator,proto3,enum=tigrisdata.observability.v1.RollupAggregator" json:"aggregator,omitempty"`
	Interval   int64            `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *RollupFunction) Reset() {
	*x = RollupFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollupFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollupFunction) ProtoMessage() {}

func (x *RollupFunction) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollupFunction.ProtoReflect.Descriptor instead.
func (*RollupFunction) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{5}
}

func (x *RollupFunction) GetAggregator() RollupAggregator {
	if x != nil {
		return x.Aggregator
	}
	return RollupAggregator_ROLLUP_AGGREGATOR_SUM
}

func (x *RollupFunction) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

// QueryTimeSeriesMetric responds with this type.
type QueryTimeSeriesMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From   int64           `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To     int64           `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	Query  string          `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Series []*MetricSeries `protobuf:"bytes,4,rep,name=series,proto3" json:"series,omitempty"`
}

func (x *QueryTimeSeriesMetricsResponse) Reset() {
	*x = QueryTimeSeriesMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTimeSeriesMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTimeSeriesMetricsResponse) ProtoMessage() {}

func (x *QueryTimeSeriesMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTimeSeriesMetricsResponse.ProtoReflect.Descriptor instead.
func (*QueryTimeSeriesMetricsResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{6}
}

func (x *QueryTimeSeriesMetricsResponse) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *QueryTimeSeriesMetricsResponse) GetTo() int64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *QueryTimeSeriesMetricsResponse) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QueryTimeSeriesMetricsResponse) GetSeries() []*MetricSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

// Represents series in timeseries based on input query.
type MetricSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From       int64        `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To         int64        `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	Metric     string       `protobuf:"bytes,3,opt,name=metric,proto3" json:"metric,omitempty"`
	Scope      string       `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	DataPoints []*DataPoint `protobuf:"bytes,5,rep,name=dataPoints,proto3" json:"dataPoints,omitempty"`
}

func (x *MetricSeries) Reset() {
	*x = MetricSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricSeries) ProtoMessage() {}

func (x *MetricSeries) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricSeries.ProtoReflect.Descriptor instead.
func (*MetricSeries) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{7}
}

func (x *MetricSeries) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *MetricSeries) GetTo() int64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *MetricSeries) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *MetricSeries) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *MetricSeries) GetDataPoints() []*DataPoint {
	if x != nil {
		return x.DataPoints
	}
	return nil
}

// Represents the data point in timeseries.
type DataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value     float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DataPoint) Reset() {
	*x = DataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPoint) ProtoMessage() {}

func (x *DataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPoint.ProtoReflect.Descriptor instead.
func (*DataPoint) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{8}
}

func (x *DataPoint) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DataPoint) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Request current namespace quota limits
type QuotaLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuotaLimitsRequest) Reset() {
	*x = QuotaLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaLimitsRequest) ProtoMessage() {}

func (x *QuotaLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaLimitsRequest.ProtoReflect.Descriptor instead.
func (*QuotaLimitsRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{9}
}

// Contains current quota limits
type QuotaLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of allowed read units per second
	ReadUnits int64 `protobuf:"varint,1,opt,name=ReadUnits,proto3" json:"ReadUnits,omitempty"`
	// Number of allowed write units per second
	WriteUnits int64 `protobuf:"varint,2,opt,name=WriteUnits,proto3" json:"WriteUnits,omitempty"`
	// Maximum number of bytes allowed to store
	StorageSize int64 `protobuf:"varint,3,opt,name=StorageSize,proto3" json:"StorageSize,omitempty"`
}

func (x *QuotaLimitsResponse) Reset() {
	*x = QuotaLimitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaLimitsResponse) ProtoMessage() {}

func (x *QuotaLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaLimitsResponse.ProtoReflect.Descriptor instead.
func (*QuotaLimitsResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{10}
}

func (x *QuotaLimitsResponse) GetReadUnits() int64 {
	if x != nil {
		return x.ReadUnits
	}
	return 0
}

func (x *QuotaLimitsResponse) GetWriteUnits() int64 {
	if x != nil {
		return x.WriteUnits
	}
	return 0
}

func (x *QuotaLimitsResponse) GetStorageSize() int64 {
	if x != nil {
		return x.StorageSize
	}
	return 0
}

// Request current namespace quota usage
type QuotaUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuotaUsageRequest) Reset() {
	*x = QuotaUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaUsageRequest) ProtoMessage() {}

func (x *QuotaUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaUsageRequest.ProtoReflect.Descriptor instead.
func (*QuotaUsageRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{11}
}

// Contains current quota usage
type QuotaUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of read units used per second
	ReadUnits int64 `protobuf:"varint,1,opt,name=ReadUnits,proto3" json:"ReadUnits,omitempty"`
	// Number of write units used per second
	WriteUnits int64 `protobuf:"varint,2,opt,name=WriteUnits,proto3" json:"WriteUnits,omitempty"`
	// Number of bytes stored
	StorageSize int64 `protobuf:"varint,3,opt,name=StorageSize,proto3" json:"StorageSize,omitempty"`
	// Number of read units throttled per second.
	// Units which was rejected with "resource exhausted error".
	ReadUnitsThrottled int64 `protobuf:"varint,4,opt,name=ReadUnitsThrottled,proto3" json:"ReadUnitsThrottled,omitempty"`
	// Number of write units throttled per second.
	// Units which was rejected with "resource exhausted error".
	WriteUnitsThrottled int64 `protobuf:"varint,5,opt,name=WriteUnitsThrottled,proto3" json:"WriteUnitsThrottled,omitempty"`
	// Number of bytes throttled.
	// Number of bytes which were attempted to write in excess of quota and were rejected.
	StorageSizeThrottled int64 `protobuf:"varint,6,opt,name=StorageSizeThrottled,proto3" json:"StorageSizeThrottled,omitempty"`
}

func (x *QuotaUsageResponse) Reset() {
	*x = QuotaUsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaUsageResponse) ProtoMessage() {}

func (x *QuotaUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaUsageResponse.ProtoReflect.Descriptor instead.
func (*QuotaUsageResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{12}
}

func (x *QuotaUsageResponse) GetReadUnits() int64 {
	if x != nil {
		return x.ReadUnits
	}
	return 0
}

func (x *QuotaUsageResponse) GetWriteUnits() int64 {
	if x != nil {
		return x.WriteUnits
	}
	return 0
}

func (x *QuotaUsageResponse) GetStorageSize() int64 {
	if x != nil {
		return x.StorageSize
	}
	return 0
}

func (x *QuotaUsageResponse) GetReadUnitsThrottled() int64 {
	if x != nil {
		return x.ReadUnitsThrottled
	}
	return 0
}

func (x *QuotaUsageResponse) GetWriteUnitsThrottled() int64 {
	if x != nil {
		return x.WriteUnitsThrottled
	}
	return 0
}

func (x *QuotaUsageResponse) GetStorageSizeThrottled() int64 {
	if x != nil {
		return x.StorageSizeThrottled
	}
	return 0
}

type GetInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetInfoRequest) Reset() {
	*x = GetInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest) ProtoMessage() {}

func (x *GetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{13}
}

type GetInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerVersion string `protobuf:"bytes,1,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`
	// NOTE: This is a hack to propagate this object definition to OpenAPI
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetInfoResponse) Reset() {
	*x = GetInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoResponse) ProtoMessage() {}

func (x *GetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoResponse.ProtoReflect.Descriptor instead.
func (*GetInfoResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{14}
}

func (x *GetInfoResponse) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *GetInfoResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_server_v1_observability_proto protoreflect.FileDescriptor

var file_server_v1_observability_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1b, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x21, 0x0a, 0x09, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x7a, 0x0a, 0x0c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x22, 0x58, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xe9, 0x04, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x64, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x57, 0x0a, 0x10, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x74, 0x69, 0x67, 0x72,
	0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x67, 0x72, 0x69, 0x73, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x11, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x4c, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x69, 0x0a, 0x12,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x22, 0x7b, 0x0a, 0x0e, 0x52, 0x6f, 0x6c, 0x6c, 0x75,
	0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x22, 0x9d, 0x01, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x69,
	0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22,
	0x3f, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x14, 0x0a, 0x12, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x75, 0x0a, 0x13, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x65, 0x61, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x52, 0x65, 0x61, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x13, 0x0a,
	0x11, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x8a, 0x02, 0x0a, 0x12, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x61,
	0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x52, 0x65,
	0x61, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x61,
	0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x52, 0x65, 0x61, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74,
	0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x22,
	0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x72, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x69, 0x67,
	0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0xee, 0x02, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52,
	0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x41, 0x44,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x48, 0x41, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10,
	0x08, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x55, 0x54, 0x5f, 0x4f,
	0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x49,
	0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x10, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x11, 0x12, 0x0f, 0x0a,
	0x0b, 0x42, 0x41, 0x44, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0x12, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x45, 0x44, 0x10, 0x13, 0x2a, 0x3d, 0x0a, 0x0f, 0x54, 0x69, 0x67, 0x72, 0x69, 0x73,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x45, 0x54, 0x41, 0x44,
	0x41, 0x54, 0x41, 0x10, 0x03, 0x2a, 0x34, 0x0a, 0x13, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0x9b, 0x01, 0x0a, 0x10,
	0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x4c, 0x4c, 0x55, 0x50, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45,
	0x47, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x4f, 0x4c, 0x4c, 0x55, 0x50, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x4c, 0x4c,
	0x55, 0x50, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x4c, 0x4c, 0x55, 0x50, 0x5f, 0x41, 0x47,
	0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x12, 0x19,
	0x0a, 0x15, 0x52, 0x4f, 0x4c, 0x4c, 0x55, 0x50, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x41, 0x56, 0x47, 0x10, 0x04, 0x2a, 0x41, 0x0a, 0x1b, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x56, 0x47, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41,
	0x58, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x03, 0x32, 0xeb, 0x06, 0x0a,
	0x0d, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0xf7,
	0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x2e, 0x74, 0x69, 0x67, 0x72,
	0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0xba, 0x47, 0x2c, 0x0a, 0x0d, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x51, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0xd5, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69,
	0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x74, 0x69, 0x67, 0x72,
	0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x63, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0xba, 0x47, 0x37, 0x0a, 0x0d, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x26, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0xd0, 0x01, 0x0a, 0x0a, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2e, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0xba, 0x47, 0x36, 0x0a, 0x0d, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x25, 0x51, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x20, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x12, 0xb4, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2b, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x74,
	0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0xba, 0x47, 0x2d, 0x0a, 0x0d, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x41, 0x0a, 0x1d, 0x63, 0x6f,
	0x6d, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5a, 0x20, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_v1_observability_proto_rawDescOnce sync.Once
	file_server_v1_observability_proto_rawDescData = file_server_v1_observability_proto_rawDesc
)

func file_server_v1_observability_proto_rawDescGZIP() []byte {
	file_server_v1_observability_proto_rawDescOnce.Do(func() {
		file_server_v1_observability_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_v1_observability_proto_rawDescData)
	})
	return file_server_v1_observability_proto_rawDescData
}

var file_server_v1_observability_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_server_v1_observability_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_server_v1_observability_proto_goTypes = []interface{}{
	(Code)(0),                              // 0: tigrisdata.observability.v1.Code
	(TigrisOperation)(0),                   // 1: tigrisdata.observability.v1.TigrisOperation
	(MetricQueryFunction)(0),               // 2: tigrisdata.observability.v1.MetricQueryFunction
	(RollupAggregator)(0),                  // 3: tigrisdata.observability.v1.RollupAggregator
	(MetricQuerySpaceAggregation)(0),       // 4: tigrisdata.observability.v1.MetricQuerySpaceAggregation
	(*RetryInfo)(nil),                      // 5: tigrisdata.observability.v1.RetryInfo
	(*ErrorDetails)(nil),                   // 6: tigrisdata.observability.v1.ErrorDetails
	(*Error)(nil),                          // 7: tigrisdata.observability.v1.Error
	(*QueryTimeSeriesMetricsRequest)(nil),  // 8: tigrisdata.observability.v1.QueryTimeSeriesMetricsRequest
	(*AdditionalFunction)(nil),             // 9: tigrisdata.observability.v1.AdditionalFunction
	(*RollupFunction)(nil),                 // 10: tigrisdata.observability.v1.RollupFunction
	(*QueryTimeSeriesMetricsResponse)(nil), // 11: tigrisdata.observability.v1.QueryTimeSeriesMetricsResponse
	(*MetricSeries)(nil),                   // 12: tigrisdata.observability.v1.MetricSeries
	(*DataPoint)(nil),                      // 13: tigrisdata.observability.v1.DataPoint
	(*QuotaLimitsRequest)(nil),             // 14: tigrisdata.observability.v1.QuotaLimitsRequest
	(*QuotaLimitsResponse)(nil),            // 15: tigrisdata.observability.v1.QuotaLimitsResponse
	(*QuotaUsageRequest)(nil),              // 16: tigrisdata.observability.v1.QuotaUsageRequest
	(*QuotaUsageResponse)(nil),             // 17: tigrisdata.observability.v1.QuotaUsageResponse
	(*GetInfoRequest)(nil),                 // 18: tigrisdata.observability.v1.GetInfoRequest
	(*GetInfoResponse)(nil),                // 19: tigrisdata.observability.v1.GetInfoResponse
}
var file_server_v1_observability_proto_depIdxs = []int32{
	5,  // 0: tigrisdata.observability.v1.ErrorDetails.retry:type_name -> tigrisdata.observability.v1.RetryInfo
	0,  // 1: tigrisdata.observability.v1.Error.code:type_name -> tigrisdata.observability.v1.Code
	1,  // 2: tigrisdata.observability.v1.QueryTimeSeriesMetricsRequest.tigris_operation:type_name -> tigrisdata.observability.v1.TigrisOperation
	4,  // 3: tigrisdata.observability.v1.QueryTimeSeriesMetricsRequest.space_aggregation:type_name -> tigrisdata.observability.v1.MetricQuerySpaceAggregation
	2,  // 4: tigrisdata.observability.v1.QueryTimeSeriesMetricsRequest.function:type_name -> tigrisdata.observability.v1.MetricQueryFunction
	9,  // 5: tigrisdata.observability.v1.QueryTimeSeriesMetricsRequest.additionalFunctions:type_name -> tigrisdata.observability.v1.AdditionalFunction
	10, // 6: tigrisdata.observability.v1.AdditionalFunction.rollup:type_name -> tigrisdata.observability.v1.RollupFunction
	3,  // 7: tigrisdata.observability.v1.RollupFunction.aggregator:type_name -> tigrisdata.observability.v1.RollupAggregator
	12, // 8: tigrisdata.observability.v1.QueryTimeSeriesMetricsResponse.series:type_name -> tigrisdata.observability.v1.MetricSeries
	13, // 9: tigrisdata.observability.v1.MetricSeries.dataPoints:type_name -> tigrisdata.observability.v1.DataPoint
	7,  // 10: tigrisdata.observability.v1.GetInfoResponse.error:type_name -> tigrisdata.observability.v1.Error
	8,  // 11: tigrisdata.observability.v1.Observability.QueryTimeSeriesMetrics:input_type -> tigrisdata.observability.v1.QueryTimeSeriesMetricsRequest
	14, // 12: tigrisdata.observability.v1.Observability.QuotaLimits:input_type -> tigrisdata.observability.v1.QuotaLimitsRequest
	16, // 13: tigrisdata.observability.v1.Observability.QuotaUsage:input_type -> tigrisdata.observability.v1.QuotaUsageRequest
	18, // 14: tigrisdata.observability.v1.Observability.GetInfo:input_type -> tigrisdata.observability.v1.GetInfoRequest
	11, // 15: tigrisdata.observability.v1.Observability.QueryTimeSeriesMetrics:output_type -> tigrisdata.observability.v1.QueryTimeSeriesMetricsResponse
	15, // 16: tigrisdata.observability.v1.Observability.QuotaLimits:output_type -> tigrisdata.observability.v1.QuotaLimitsResponse
	17, // 17: tigrisdata.observability.v1.Observability.QuotaUsage:output_type -> tigrisdata.observability.v1.QuotaUsageResponse
	19, // 18: tigrisdata.observability.v1.Observability.GetInfo:output_type -> tigrisdata.observability.v1.GetInfoResponse
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_server_v1_observability_proto_init() }
func file_server_v1_observability_proto_init() {
	if File_server_v1_observability_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_v1_observability_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_v1_observability_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_v1_observability_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_v1_observability_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTimeSeriesMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_v1_observability_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_v1_observability_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollupFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_v1_observability_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTimeSeriesMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_v1_observability_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_v1_observability_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_v1_observability_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_v1_observability_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaLimitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_v1_observability_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_v1_observability_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaUsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_v1_observability_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_v1_observability_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_server_v1_observability_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_v1_observability_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_v1_observability_proto_goTypes,
		DependencyIndexes: file_server_v1_observability_proto_depIdxs,
		EnumInfos:         file_server_v1_observability_proto_enumTypes,
		MessageInfos:      file_server_v1_observability_proto_msgTypes,
	}.Build()
	File_server_v1_observability_proto = out.File
	file_server_v1_observability_proto_rawDesc = nil
	file_server_v1_observability_proto_goTypes = nil
	file_server_v1_observability_proto_depIdxs = nil
}
