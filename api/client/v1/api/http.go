// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Start new transaction in database specified by "db".
type BeginTransactionRequest struct {
	// Options that can be used to modify the transaction semantics.
	Options *TransactionOptions `json:"options,omitempty"`
}

// Start transaction returns transaction context  which uniquely identifies the transaction
type BeginTransactionResponse struct {
	// Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the subsequent requests in order to run them in the context of the same transaction.
	TxCtx *TransactionCtx `json:"tx_ctx,omitempty"`
}

// CollectionDescription defines model for CollectionDescription.
type CollectionDescription struct {
	// Name of the collection.
	Collection *string             `json:"collection,omitempty"`
	Metadata   *CollectionMetadata `json:"metadata,omitempty"`

	// Collections schema
	Schema *map[string]interface{} `json:"schema,omitempty"`
}

// CollectionInfo defines model for CollectionInfo.
type CollectionInfo struct {
	// Collection name.
	Collection *string             `json:"collection,omitempty"`
	Metadata   *CollectionMetadata `json:"metadata,omitempty"`
}

// CollectionMetadata defines model for CollectionMetadata.
type CollectionMetadata map[string]interface{}

// Collection requests modifying options.
type CollectionOptions struct {
	// Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the subsequent requests in order to run them in the context of the same transaction.
	TxCtx *TransactionCtx `json:"tx_ctx,omitempty"`
}

// Commit transaction with the given ID
type CommitTransactionRequest struct {
	// Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the subsequent requests in order to run them in the context of the same transaction.
	TxCtx *TransactionCtx `json:"tx_ctx,omitempty"`
}

// CommitTransactionResponse defines model for CommitTransactionResponse.
type CommitTransactionResponse struct {
	// Status of commit transaction operation.
	Status *string `json:"status,omitempty"`
}

// CreateDatabaseRequest defines model for CreateDatabaseRequest.
type CreateDatabaseRequest struct {
	// Database requests modifying options.
	Options *DatabaseOptions `json:"options,omitempty"`
}

// CreateDatabaseResponse defines model for CreateDatabaseResponse.
type CreateDatabaseResponse struct {
	// A detailed response message.
	Message *string `json:"message,omitempty"`

	// An enum with value set as "created".
	Status *string `json:"status,omitempty"`
}

// CreateOrUpdateCollectionRequest defines model for CreateOrUpdateCollectionRequest.
type CreateOrUpdateCollectionRequest struct {
	OnlyCreate *bool `json:"only_create,omitempty"`

	// Collection requests modifying options.
	Options *CollectionOptions `json:"options,omitempty"`

	// Schema of the documents in this collection. The schema specifications are same as JSON schema specification defined <a href="https://json-schema.org/specification.html" title="here">here</a>. <p></p>The following is an schema example: `{  "name": "user",  "description": "Collection of documents with details of users",  "properties": {    "id": {      "description": "A unique identifier for the user",      "type": "integer"    },    "name": {      "description": "Name of the user",      "type": "string",      "maxLength": 100    },    "balance": {      "description": "User account balance",      "type": "number"    }  },  "primary_key": ["id"] }`
	Schema json.RawMessage `json:"schema,omitempty"`
}

// CreateOrUpdateCollectionResponse defines model for CreateOrUpdateCollectionResponse.
type CreateOrUpdateCollectionResponse struct {
	// A detailed response message.
	Message *string `json:"message,omitempty"`

	// An enum with value set as "created" or "updated"
	Status *string `json:"status,omitempty"`
}

// DatabaseInfo defines model for DatabaseInfo.
type DatabaseInfo struct {
	// Database name.
	Db       *string           `json:"db,omitempty"`
	Metadata *DatabaseMetadata `json:"metadata,omitempty"`
}

// DatabaseMetadata defines model for DatabaseMetadata.
type DatabaseMetadata map[string]interface{}

// Database requests modifying options.
type DatabaseOptions map[string]interface{}

// DeleteRequest defines model for DeleteRequest.
type DeleteRequest struct {
	// Delete documents which matching specified filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: <li> To delete a user document where the id has a value 1: ```{"id": 1 }``` <li> To delete all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`
	Filter json.RawMessage `json:"filter,omitempty"`

	// Additional options for deleted requests.
	Options *DeleteRequestOptions `json:"options,omitempty"`
}

// Additional options for deleted requests.
type DeleteRequestOptions struct {
	// Additional options to modify write requests.
	WriteOptions *WriteOptions `json:"write_options,omitempty"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Has metadata related to the documents stored.
	Metadata *ResponseMetadata `json:"metadata,omitempty"`

	// an enum with value set as "deleted"
	Status *string `json:"status,omitempty"`
}

// DescribeCollectionRequest defines model for DescribeCollectionRequest.
type DescribeCollectionRequest struct {
	// Name of the collection.
	Collection *string `json:"collection,omitempty"`

	// Name of the database.
	Db *string `json:"db,omitempty"`

	// Collection requests modifying options.
	Options *CollectionOptions `json:"options,omitempty"`
}

// A detailed description about the collection. The description returns collection metadata and the schema.
type DescribeCollectionResponse struct {
	// Name of the collection.
	Collection *string             `json:"collection,omitempty"`
	Metadata   *CollectionMetadata `json:"metadata,omitempty"`

	// Collections schema
	Schema *map[string]interface{} `json:"schema,omitempty"`
}

// DescribeDatabaseRequest defines model for DescribeDatabaseRequest.
type DescribeDatabaseRequest struct {
	// Name of the database.
	Db *string `json:"db,omitempty"`
}

// A detailed description about the database and all associated collections. Description of the collection includes schema details as well.
type DescribeDatabaseResponse struct {
	// A detailed description about all the collections. The description returns collection metadata and the schema.
	Collections *[]CollectionDescription `json:"collections,omitempty"`

	// Name of the database.
	Db       *string           `json:"db,omitempty"`
	Metadata *DatabaseMetadata `json:"metadata,omitempty"`
}

// DropCollectionRequest defines model for DropCollectionRequest.
type DropCollectionRequest struct {
	// Collection requests modifying options.
	Options *CollectionOptions `json:"options,omitempty"`
}

// DropCollectionResponse defines model for DropCollectionResponse.
type DropCollectionResponse struct {
	// A detailed response message.
	Message *string `json:"message,omitempty"`

	// An enum with value set as "dropped".
	Status *string `json:"status,omitempty"`
}

// DropDatabaseRequest defines model for DropDatabaseRequest.
type DropDatabaseRequest struct {
	// Database requests modifying options.
	Options *DatabaseOptions `json:"options,omitempty"`
}

// DropDatabaseResponse defines model for DropDatabaseResponse.
type DropDatabaseResponse struct {
	// A detailed response message.
	Message *string `json:"message,omitempty"`

	// An enum with value set as "dropped".
	Status *string `json:"status,omitempty"`
}

// InsertRequest defines model for InsertRequest.
type InsertRequest struct {
	// Array of documents to insert. Each document is a JSON object.
	Documents *[]json.RawMessage `json:"documents,omitempty"`

	// additional options for insert requests.
	Options *InsertRequestOptions `json:"options,omitempty"`
}

// additional options for insert requests.
type InsertRequestOptions struct {
	// Additional options to modify write requests.
	WriteOptions *WriteOptions `json:"write_options,omitempty"`
}

// InsertResponse defines model for InsertResponse.
type InsertResponse struct {
	// Has metadata related to the documents stored.
	Metadata *ResponseMetadata `json:"metadata,omitempty"`

	// An enum with value set as "inserted"
	Status *string `json:"status,omitempty"`
}

// ListCollectionsRequest defines model for ListCollectionsRequest.
type ListCollectionsRequest struct {
	// Collection requests modifying options.
	Options *CollectionOptions `json:"options,omitempty"`
}

// ListCollectionsResponse defines model for ListCollectionsResponse.
type ListCollectionsResponse struct {
	// List of the collections info in the database.
	Collections *[]CollectionInfo `json:"collections,omitempty"`

	// Name of the database.
	Db *string `json:"db,omitempty"`
}

// ListDatabasesResponse defines model for ListDatabasesResponse.
type ListDatabasesResponse struct {
	// List of the databases.
	Databases *[]DatabaseInfo `json:"databases,omitempty"`
}

// ReadRequest defines model for ReadRequest.
type ReadRequest struct {
	// To read specific fields from a document. Default is all.
	Fields json.RawMessage `json:"fields,omitempty"`

	// Returns documents matching this filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: <li> To read a user document where the id has a value 1: ```{"id": 1 }``` <li> To read all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`
	Filter json.RawMessage `json:"filter,omitempty"`

	// Options that can be used to modify the results, for example "limit" to control the number of documents returned by the server.
	Options *ReadRequestOptions `json:"options,omitempty"`
}

// Options that can be used to modify the results, for example "limit" to control the number of documents returned by the server.
type ReadRequestOptions struct {
	// Limit the number of documents returned by the read operation.
	Limit *int64 `json:"limit,omitempty"`

	// A cursor for use in pagination. The next streams will return documents after this offset.
	Offset *[]byte `json:"offset,omitempty"`

	// Number of documents to skip before starting to return resulting documents.
	Skip *int64 `json:"skip,omitempty"`

	// Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the subsequent requests in order to run them in the context of the same transaction.
	TxCtx *TransactionCtx `json:"tx_ctx,omitempty"`
}

// ReadResponse defines model for ReadResponse.
type ReadResponse struct {
	// Object containing the collection document.
	Data json.RawMessage `json:"data,omitempty"`

	// Has metadata related to the documents stored.
	Metadata *ResponseMetadata `json:"metadata,omitempty"`

	// An internal key, used for pagination.
	ResumeToken *[]byte `json:"resume_token,omitempty"`
}

// ReplaceRequest defines model for ReplaceRequest.
type ReplaceRequest struct {
	// Array of documents to be replaced. Each document is a JSON object.
	Documents *[]json.RawMessage `json:"documents,omitempty"`

	// Additional options for replace requests.
	Options *ReplaceRequestOptions `json:"options,omitempty"`
}

// Additional options for replace requests.
type ReplaceRequestOptions struct {
	// Additional options to modify write requests.
	WriteOptions *WriteOptions `json:"write_options,omitempty"`
}

// ReplaceResponse defines model for ReplaceResponse.
type ReplaceResponse struct {
	// Has metadata related to the documents stored.
	Metadata *ResponseMetadata `json:"metadata,omitempty"`

	// an enum with value set as "replaced"
	Status *string `json:"status,omitempty"`
}

// Has metadata related to the documents stored.
type ResponseMetadata struct {
	// Time at which the document was inserted/replaced. Measured in nano-seconds since the Unix epoch.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Time at which the document was updated. Measured in nano-seconds since the Unix epoch.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Rollback transaction with the given ID
type RollbackTransactionRequest struct {
	// Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the subsequent requests in order to run them in the context of the same transaction.
	TxCtx *TransactionCtx `json:"tx_ctx,omitempty"`
}

// RollbackTransactionResponse defines model for RollbackTransactionResponse.
type RollbackTransactionResponse struct {
	// Status of rollback transaction operation.
	Status *string `json:"status,omitempty"`
}

// StreamChange defines model for StreamChange.
type StreamChange struct {
	CollectionName *string `json:"collection_name,omitempty"`
	Data           *[]byte `json:"data,omitempty"`
}

// StreamRequest defines model for StreamRequest.
type StreamRequest struct {
	Db *string `json:"db,omitempty"`
}

// StreamResponse defines model for StreamResponse.
type StreamResponse struct {
	Changes *[]StreamChange `json:"changes,omitempty"`
}

// Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the subsequent requests in order to run them in the context of the same transaction.
type TransactionCtx struct {
	// Unique for a single transactional request.
	Id *string `json:"id,omitempty"`

	// Serves as an internal identifier.
	Origin *string `json:"origin,omitempty"`
}

// Options that can be used to modify the transaction semantics.
type TransactionOptions map[string]interface{}

// UpdateRequest defines model for UpdateRequest.
type UpdateRequest struct {
	// Fields contains set of fields with the values which need to be updated. Should be proper JSON object.
	Fields json.RawMessage `json:"fields,omitempty"`

	// Update documents which matching specified filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: <li> To update a user document where the id has a value 1: ```{"id": 1 }``` <li> To update all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`
	Filter json.RawMessage `json:"filter,omitempty"`

	// Additional options for update requests.
	Options *UpdateRequestOptions `json:"options,omitempty"`
}

// Additional options for update requests.
type UpdateRequestOptions struct {
	// Additional options to modify write requests.
	WriteOptions *WriteOptions `json:"write_options,omitempty"`
}

// UpdateResponse defines model for UpdateResponse.
type UpdateResponse struct {
	// Has metadata related to the documents stored.
	Metadata *ResponseMetadata `json:"metadata,omitempty"`

	// Returns the number of documents modified.
	ModifiedCount *int32 `json:"modified_count,omitempty"`

	// an enum with value set as "updated".
	Status *string `json:"status,omitempty"`
}

// Additional options to modify write requests.
type WriteOptions struct {
	// Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the subsequent requests in order to run them in the context of the same transaction.
	TxCtx *TransactionCtx `json:"tx_ctx,omitempty"`
}

// TigrisDBListCollectionsJSONBody defines parameters for TigrisDBListCollections.
type TigrisDBListCollectionsJSONBody ListCollectionsRequest

// TigrisDBCreateOrUpdateCollectionJSONBody defines parameters for TigrisDBCreateOrUpdateCollection.
type TigrisDBCreateOrUpdateCollectionJSONBody CreateOrUpdateCollectionRequest

// TigrisDBDescribeCollectionJSONBody defines parameters for TigrisDBDescribeCollection.
type TigrisDBDescribeCollectionJSONBody DescribeCollectionRequest

// TigrisDBDeleteJSONBody defines parameters for TigrisDBDelete.
type TigrisDBDeleteJSONBody DeleteRequest

// TigrisDBInsertJSONBody defines parameters for TigrisDBInsert.
type TigrisDBInsertJSONBody InsertRequest

// TigrisDBReadJSONBody defines parameters for TigrisDBRead.
type TigrisDBReadJSONBody ReadRequest

// TigrisDBReplaceJSONBody defines parameters for TigrisDBReplace.
type TigrisDBReplaceJSONBody ReplaceRequest

// TigrisDBUpdateJSONBody defines parameters for TigrisDBUpdate.
type TigrisDBUpdateJSONBody UpdateRequest

// TigrisDBDropCollectionJSONBody defines parameters for TigrisDBDropCollection.
type TigrisDBDropCollectionJSONBody DropCollectionRequest

// TigrisDBCreateDatabaseJSONBody defines parameters for TigrisDBCreateDatabase.
type TigrisDBCreateDatabaseJSONBody CreateDatabaseRequest

// TigrisDBDescribeDatabaseJSONBody defines parameters for TigrisDBDescribeDatabase.
type TigrisDBDescribeDatabaseJSONBody DescribeDatabaseRequest

// TigrisDBDropDatabaseJSONBody defines parameters for TigrisDBDropDatabase.
type TigrisDBDropDatabaseJSONBody DropDatabaseRequest

// TigrisDBStreamJSONBody defines parameters for TigrisDBStream.
type TigrisDBStreamJSONBody StreamRequest

// TigrisDBBeginTransactionJSONBody defines parameters for TigrisDBBeginTransaction.
type TigrisDBBeginTransactionJSONBody BeginTransactionRequest

// TigrisDBCommitTransactionJSONBody defines parameters for TigrisDBCommitTransaction.
type TigrisDBCommitTransactionJSONBody CommitTransactionRequest

// TigrisDBRollbackTransactionJSONBody defines parameters for TigrisDBRollbackTransaction.
type TigrisDBRollbackTransactionJSONBody RollbackTransactionRequest

// TigrisDBListCollectionsJSONRequestBody defines body for TigrisDBListCollections for application/json ContentType.
type TigrisDBListCollectionsJSONRequestBody TigrisDBListCollectionsJSONBody

// TigrisDBCreateOrUpdateCollectionJSONRequestBody defines body for TigrisDBCreateOrUpdateCollection for application/json ContentType.
type TigrisDBCreateOrUpdateCollectionJSONRequestBody TigrisDBCreateOrUpdateCollectionJSONBody

// TigrisDBDescribeCollectionJSONRequestBody defines body for TigrisDBDescribeCollection for application/json ContentType.
type TigrisDBDescribeCollectionJSONRequestBody TigrisDBDescribeCollectionJSONBody

// TigrisDBDeleteJSONRequestBody defines body for TigrisDBDelete for application/json ContentType.
type TigrisDBDeleteJSONRequestBody TigrisDBDeleteJSONBody

// TigrisDBInsertJSONRequestBody defines body for TigrisDBInsert for application/json ContentType.
type TigrisDBInsertJSONRequestBody TigrisDBInsertJSONBody

// TigrisDBReadJSONRequestBody defines body for TigrisDBRead for application/json ContentType.
type TigrisDBReadJSONRequestBody TigrisDBReadJSONBody

// TigrisDBReplaceJSONRequestBody defines body for TigrisDBReplace for application/json ContentType.
type TigrisDBReplaceJSONRequestBody TigrisDBReplaceJSONBody

// TigrisDBUpdateJSONRequestBody defines body for TigrisDBUpdate for application/json ContentType.
type TigrisDBUpdateJSONRequestBody TigrisDBUpdateJSONBody

// TigrisDBDropCollectionJSONRequestBody defines body for TigrisDBDropCollection for application/json ContentType.
type TigrisDBDropCollectionJSONRequestBody TigrisDBDropCollectionJSONBody

// TigrisDBCreateDatabaseJSONRequestBody defines body for TigrisDBCreateDatabase for application/json ContentType.
type TigrisDBCreateDatabaseJSONRequestBody TigrisDBCreateDatabaseJSONBody

// TigrisDBDescribeDatabaseJSONRequestBody defines body for TigrisDBDescribeDatabase for application/json ContentType.
type TigrisDBDescribeDatabaseJSONRequestBody TigrisDBDescribeDatabaseJSONBody

// TigrisDBDropDatabaseJSONRequestBody defines body for TigrisDBDropDatabase for application/json ContentType.
type TigrisDBDropDatabaseJSONRequestBody TigrisDBDropDatabaseJSONBody

// TigrisDBStreamJSONRequestBody defines body for TigrisDBStream for application/json ContentType.
type TigrisDBStreamJSONRequestBody TigrisDBStreamJSONBody

// TigrisDBBeginTransactionJSONRequestBody defines body for TigrisDBBeginTransaction for application/json ContentType.
type TigrisDBBeginTransactionJSONRequestBody TigrisDBBeginTransactionJSONBody

// TigrisDBCommitTransactionJSONRequestBody defines body for TigrisDBCommitTransaction for application/json ContentType.
type TigrisDBCommitTransactionJSONRequestBody TigrisDBCommitTransactionJSONBody

// TigrisDBRollbackTransactionJSONRequestBody defines body for TigrisDBRollbackTransaction for application/json ContentType.
type TigrisDBRollbackTransactionJSONRequestBody TigrisDBRollbackTransactionJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// TigrisDBListDatabases request
	TigrisDBListDatabases(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBListCollections request with any body
	TigrisDBListCollectionsWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBListCollections(ctx context.Context, db string, body TigrisDBListCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBCreateOrUpdateCollection request with any body
	TigrisDBCreateOrUpdateCollectionWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBCreateOrUpdateCollection(ctx context.Context, db string, collection string, body TigrisDBCreateOrUpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBDescribeCollection request with any body
	TigrisDBDescribeCollectionWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBDescribeCollection(ctx context.Context, db string, collection string, body TigrisDBDescribeCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBDelete request with any body
	TigrisDBDeleteWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBDelete(ctx context.Context, db string, collection string, body TigrisDBDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBInsert request with any body
	TigrisDBInsertWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBInsert(ctx context.Context, db string, collection string, body TigrisDBInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBRead request with any body
	TigrisDBReadWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBRead(ctx context.Context, db string, collection string, body TigrisDBReadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBReplace request with any body
	TigrisDBReplaceWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBReplace(ctx context.Context, db string, collection string, body TigrisDBReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBUpdate request with any body
	TigrisDBUpdateWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBUpdate(ctx context.Context, db string, collection string, body TigrisDBUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBDropCollection request with any body
	TigrisDBDropCollectionWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBDropCollection(ctx context.Context, db string, collection string, body TigrisDBDropCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBCreateDatabase request with any body
	TigrisDBCreateDatabaseWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBCreateDatabase(ctx context.Context, db string, body TigrisDBCreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBDescribeDatabase request with any body
	TigrisDBDescribeDatabaseWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBDescribeDatabase(ctx context.Context, db string, body TigrisDBDescribeDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBDropDatabase request with any body
	TigrisDBDropDatabaseWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBDropDatabase(ctx context.Context, db string, body TigrisDBDropDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBStream request with any body
	TigrisDBStreamWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBStream(ctx context.Context, db string, body TigrisDBStreamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBBeginTransaction request with any body
	TigrisDBBeginTransactionWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBBeginTransaction(ctx context.Context, db string, body TigrisDBBeginTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBCommitTransaction request with any body
	TigrisDBCommitTransactionWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBCommitTransaction(ctx context.Context, db string, body TigrisDBCommitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBRollbackTransaction request with any body
	TigrisDBRollbackTransactionWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBRollbackTransaction(ctx context.Context, db string, body TigrisDBRollbackTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) TigrisDBListDatabases(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBListDatabasesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBListCollectionsWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBListCollectionsRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBListCollections(ctx context.Context, db string, body TigrisDBListCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBListCollectionsRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBCreateOrUpdateCollectionWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBCreateOrUpdateCollectionRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBCreateOrUpdateCollection(ctx context.Context, db string, collection string, body TigrisDBCreateOrUpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBCreateOrUpdateCollectionRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBDescribeCollectionWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBDescribeCollectionRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBDescribeCollection(ctx context.Context, db string, collection string, body TigrisDBDescribeCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBDescribeCollectionRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBDeleteWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBDeleteRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBDelete(ctx context.Context, db string, collection string, body TigrisDBDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBDeleteRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBInsertWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBInsertRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBInsert(ctx context.Context, db string, collection string, body TigrisDBInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBInsertRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBReadWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBReadRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBRead(ctx context.Context, db string, collection string, body TigrisDBReadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBReadRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBReplaceWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBReplaceRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBReplace(ctx context.Context, db string, collection string, body TigrisDBReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBReplaceRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBUpdateWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBUpdateRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBUpdate(ctx context.Context, db string, collection string, body TigrisDBUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBUpdateRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBDropCollectionWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBDropCollectionRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBDropCollection(ctx context.Context, db string, collection string, body TigrisDBDropCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBDropCollectionRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBCreateDatabaseWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBCreateDatabaseRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBCreateDatabase(ctx context.Context, db string, body TigrisDBCreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBCreateDatabaseRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBDescribeDatabaseWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBDescribeDatabaseRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBDescribeDatabase(ctx context.Context, db string, body TigrisDBDescribeDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBDescribeDatabaseRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBDropDatabaseWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBDropDatabaseRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBDropDatabase(ctx context.Context, db string, body TigrisDBDropDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBDropDatabaseRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBStreamWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBStreamRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBStream(ctx context.Context, db string, body TigrisDBStreamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBStreamRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBBeginTransactionWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBBeginTransactionRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBBeginTransaction(ctx context.Context, db string, body TigrisDBBeginTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBBeginTransactionRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBCommitTransactionWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBCommitTransactionRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBCommitTransaction(ctx context.Context, db string, body TigrisDBCommitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBCommitTransactionRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBRollbackTransactionWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBRollbackTransactionRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBRollbackTransaction(ctx context.Context, db string, body TigrisDBRollbackTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBRollbackTransactionRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewTigrisDBListDatabasesRequest generates requests for TigrisDBListDatabases
func NewTigrisDBListDatabasesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTigrisDBListCollectionsRequest calls the generic TigrisDBListCollections builder with application/json body
func NewTigrisDBListCollectionsRequest(server string, db string, body TigrisDBListCollectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBListCollectionsRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisDBListCollectionsRequestWithBody generates requests for TigrisDBListCollections with any type of body
func NewTigrisDBListCollectionsRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/list", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBCreateOrUpdateCollectionRequest calls the generic TigrisDBCreateOrUpdateCollection builder with application/json body
func NewTigrisDBCreateOrUpdateCollectionRequest(server string, db string, collection string, body TigrisDBCreateOrUpdateCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBCreateOrUpdateCollectionRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisDBCreateOrUpdateCollectionRequestWithBody generates requests for TigrisDBCreateOrUpdateCollection with any type of body
func NewTigrisDBCreateOrUpdateCollectionRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/createOrUpdate", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBDescribeCollectionRequest calls the generic TigrisDBDescribeCollection builder with application/json body
func NewTigrisDBDescribeCollectionRequest(server string, db string, collection string, body TigrisDBDescribeCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBDescribeCollectionRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisDBDescribeCollectionRequestWithBody generates requests for TigrisDBDescribeCollection with any type of body
func NewTigrisDBDescribeCollectionRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/describe", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBDeleteRequest calls the generic TigrisDBDelete builder with application/json body
func NewTigrisDBDeleteRequest(server string, db string, collection string, body TigrisDBDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBDeleteRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisDBDeleteRequestWithBody generates requests for TigrisDBDelete with any type of body
func NewTigrisDBDeleteRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/documents/delete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBInsertRequest calls the generic TigrisDBInsert builder with application/json body
func NewTigrisDBInsertRequest(server string, db string, collection string, body TigrisDBInsertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBInsertRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisDBInsertRequestWithBody generates requests for TigrisDBInsert with any type of body
func NewTigrisDBInsertRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/documents/insert", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBReadRequest calls the generic TigrisDBRead builder with application/json body
func NewTigrisDBReadRequest(server string, db string, collection string, body TigrisDBReadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBReadRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisDBReadRequestWithBody generates requests for TigrisDBRead with any type of body
func NewTigrisDBReadRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/documents/read", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBReplaceRequest calls the generic TigrisDBReplace builder with application/json body
func NewTigrisDBReplaceRequest(server string, db string, collection string, body TigrisDBReplaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBReplaceRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisDBReplaceRequestWithBody generates requests for TigrisDBReplace with any type of body
func NewTigrisDBReplaceRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/documents/replace", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBUpdateRequest calls the generic TigrisDBUpdate builder with application/json body
func NewTigrisDBUpdateRequest(server string, db string, collection string, body TigrisDBUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBUpdateRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisDBUpdateRequestWithBody generates requests for TigrisDBUpdate with any type of body
func NewTigrisDBUpdateRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/documents/update", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBDropCollectionRequest calls the generic TigrisDBDropCollection builder with application/json body
func NewTigrisDBDropCollectionRequest(server string, db string, collection string, body TigrisDBDropCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBDropCollectionRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisDBDropCollectionRequestWithBody generates requests for TigrisDBDropCollection with any type of body
func NewTigrisDBDropCollectionRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/drop", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBCreateDatabaseRequest calls the generic TigrisDBCreateDatabase builder with application/json body
func NewTigrisDBCreateDatabaseRequest(server string, db string, body TigrisDBCreateDatabaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBCreateDatabaseRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisDBCreateDatabaseRequestWithBody generates requests for TigrisDBCreateDatabase with any type of body
func NewTigrisDBCreateDatabaseRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/create", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBDescribeDatabaseRequest calls the generic TigrisDBDescribeDatabase builder with application/json body
func NewTigrisDBDescribeDatabaseRequest(server string, db string, body TigrisDBDescribeDatabaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBDescribeDatabaseRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisDBDescribeDatabaseRequestWithBody generates requests for TigrisDBDescribeDatabase with any type of body
func NewTigrisDBDescribeDatabaseRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/describe", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBDropDatabaseRequest calls the generic TigrisDBDropDatabase builder with application/json body
func NewTigrisDBDropDatabaseRequest(server string, db string, body TigrisDBDropDatabaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBDropDatabaseRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisDBDropDatabaseRequestWithBody generates requests for TigrisDBDropDatabase with any type of body
func NewTigrisDBDropDatabaseRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/drop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBStreamRequest calls the generic TigrisDBStream builder with application/json body
func NewTigrisDBStreamRequest(server string, db string, body TigrisDBStreamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBStreamRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisDBStreamRequestWithBody generates requests for TigrisDBStream with any type of body
func NewTigrisDBStreamRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/stream", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBBeginTransactionRequest calls the generic TigrisDBBeginTransaction builder with application/json body
func NewTigrisDBBeginTransactionRequest(server string, db string, body TigrisDBBeginTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBBeginTransactionRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisDBBeginTransactionRequestWithBody generates requests for TigrisDBBeginTransaction with any type of body
func NewTigrisDBBeginTransactionRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/transactions/begin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBCommitTransactionRequest calls the generic TigrisDBCommitTransaction builder with application/json body
func NewTigrisDBCommitTransactionRequest(server string, db string, body TigrisDBCommitTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBCommitTransactionRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisDBCommitTransactionRequestWithBody generates requests for TigrisDBCommitTransaction with any type of body
func NewTigrisDBCommitTransactionRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/transactions/commit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBRollbackTransactionRequest calls the generic TigrisDBRollbackTransaction builder with application/json body
func NewTigrisDBRollbackTransactionRequest(server string, db string, body TigrisDBRollbackTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBRollbackTransactionRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisDBRollbackTransactionRequestWithBody generates requests for TigrisDBRollbackTransaction with any type of body
func NewTigrisDBRollbackTransactionRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/transactions/rollback", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// TigrisDBListDatabases request
	TigrisDBListDatabasesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TigrisDBListDatabasesResponse, error)

	// TigrisDBListCollections request with any body
	TigrisDBListCollectionsWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBListCollectionsResponse, error)

	TigrisDBListCollectionsWithResponse(ctx context.Context, db string, body TigrisDBListCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBListCollectionsResponse, error)

	// TigrisDBCreateOrUpdateCollection request with any body
	TigrisDBCreateOrUpdateCollectionWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBCreateOrUpdateCollectionResponse, error)

	TigrisDBCreateOrUpdateCollectionWithResponse(ctx context.Context, db string, collection string, body TigrisDBCreateOrUpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBCreateOrUpdateCollectionResponse, error)

	// TigrisDBDescribeCollection request with any body
	TigrisDBDescribeCollectionWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBDescribeCollectionResponse, error)

	TigrisDBDescribeCollectionWithResponse(ctx context.Context, db string, collection string, body TigrisDBDescribeCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBDescribeCollectionResponse, error)

	// TigrisDBDelete request with any body
	TigrisDBDeleteWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBDeleteResponse, error)

	TigrisDBDeleteWithResponse(ctx context.Context, db string, collection string, body TigrisDBDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBDeleteResponse, error)

	// TigrisDBInsert request with any body
	TigrisDBInsertWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBInsertResponse, error)

	TigrisDBInsertWithResponse(ctx context.Context, db string, collection string, body TigrisDBInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBInsertResponse, error)

	// TigrisDBRead request with any body
	TigrisDBReadWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBReadResponse, error)

	TigrisDBReadWithResponse(ctx context.Context, db string, collection string, body TigrisDBReadJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBReadResponse, error)

	// TigrisDBReplace request with any body
	TigrisDBReplaceWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBReplaceResponse, error)

	TigrisDBReplaceWithResponse(ctx context.Context, db string, collection string, body TigrisDBReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBReplaceResponse, error)

	// TigrisDBUpdate request with any body
	TigrisDBUpdateWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBUpdateResponse, error)

	TigrisDBUpdateWithResponse(ctx context.Context, db string, collection string, body TigrisDBUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBUpdateResponse, error)

	// TigrisDBDropCollection request with any body
	TigrisDBDropCollectionWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBDropCollectionResponse, error)

	TigrisDBDropCollectionWithResponse(ctx context.Context, db string, collection string, body TigrisDBDropCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBDropCollectionResponse, error)

	// TigrisDBCreateDatabase request with any body
	TigrisDBCreateDatabaseWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBCreateDatabaseResponse, error)

	TigrisDBCreateDatabaseWithResponse(ctx context.Context, db string, body TigrisDBCreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBCreateDatabaseResponse, error)

	// TigrisDBDescribeDatabase request with any body
	TigrisDBDescribeDatabaseWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBDescribeDatabaseResponse, error)

	TigrisDBDescribeDatabaseWithResponse(ctx context.Context, db string, body TigrisDBDescribeDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBDescribeDatabaseResponse, error)

	// TigrisDBDropDatabase request with any body
	TigrisDBDropDatabaseWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBDropDatabaseResponse, error)

	TigrisDBDropDatabaseWithResponse(ctx context.Context, db string, body TigrisDBDropDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBDropDatabaseResponse, error)

	// TigrisDBStream request with any body
	TigrisDBStreamWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBStreamResponse, error)

	TigrisDBStreamWithResponse(ctx context.Context, db string, body TigrisDBStreamJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBStreamResponse, error)

	// TigrisDBBeginTransaction request with any body
	TigrisDBBeginTransactionWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBBeginTransactionResponse, error)

	TigrisDBBeginTransactionWithResponse(ctx context.Context, db string, body TigrisDBBeginTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBBeginTransactionResponse, error)

	// TigrisDBCommitTransaction request with any body
	TigrisDBCommitTransactionWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBCommitTransactionResponse, error)

	TigrisDBCommitTransactionWithResponse(ctx context.Context, db string, body TigrisDBCommitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBCommitTransactionResponse, error)

	// TigrisDBRollbackTransaction request with any body
	TigrisDBRollbackTransactionWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBRollbackTransactionResponse, error)

	TigrisDBRollbackTransactionWithResponse(ctx context.Context, db string, body TigrisDBRollbackTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBRollbackTransactionResponse, error)
}

type TigrisDBListDatabasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListDatabasesResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBListDatabasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBListDatabasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBListCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCollectionsResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBListCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBListCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBCreateOrUpdateCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateOrUpdateCollectionResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBCreateOrUpdateCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBCreateOrUpdateCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBDescribeCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DescribeCollectionResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBDescribeCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBDescribeCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBInsertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsertResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBInsertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBInsertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReadResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBReplaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReplaceResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBReplaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBReplaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBDropCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DropCollectionResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBDropCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBDropCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBCreateDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateDatabaseResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBCreateDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBCreateDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBDescribeDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DescribeDatabaseResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBDescribeDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBDescribeDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBDropDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DropDatabaseResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBDropDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBDropDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBStreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StreamResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBStreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBStreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBBeginTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BeginTransactionResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBBeginTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBBeginTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBCommitTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommitTransactionResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBCommitTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBCommitTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBRollbackTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RollbackTransactionResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBRollbackTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBRollbackTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TigrisDBListDatabasesWithResponse request returning *TigrisDBListDatabasesResponse
func (c *ClientWithResponses) TigrisDBListDatabasesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TigrisDBListDatabasesResponse, error) {
	rsp, err := c.TigrisDBListDatabases(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBListDatabasesResponse(rsp)
}

// TigrisDBListCollectionsWithBodyWithResponse request with arbitrary body returning *TigrisDBListCollectionsResponse
func (c *ClientWithResponses) TigrisDBListCollectionsWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBListCollectionsResponse, error) {
	rsp, err := c.TigrisDBListCollectionsWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBListCollectionsResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBListCollectionsWithResponse(ctx context.Context, db string, body TigrisDBListCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBListCollectionsResponse, error) {
	rsp, err := c.TigrisDBListCollections(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBListCollectionsResponse(rsp)
}

// TigrisDBCreateOrUpdateCollectionWithBodyWithResponse request with arbitrary body returning *TigrisDBCreateOrUpdateCollectionResponse
func (c *ClientWithResponses) TigrisDBCreateOrUpdateCollectionWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBCreateOrUpdateCollectionResponse, error) {
	rsp, err := c.TigrisDBCreateOrUpdateCollectionWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBCreateOrUpdateCollectionResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBCreateOrUpdateCollectionWithResponse(ctx context.Context, db string, collection string, body TigrisDBCreateOrUpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBCreateOrUpdateCollectionResponse, error) {
	rsp, err := c.TigrisDBCreateOrUpdateCollection(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBCreateOrUpdateCollectionResponse(rsp)
}

// TigrisDBDescribeCollectionWithBodyWithResponse request with arbitrary body returning *TigrisDBDescribeCollectionResponse
func (c *ClientWithResponses) TigrisDBDescribeCollectionWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBDescribeCollectionResponse, error) {
	rsp, err := c.TigrisDBDescribeCollectionWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBDescribeCollectionResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBDescribeCollectionWithResponse(ctx context.Context, db string, collection string, body TigrisDBDescribeCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBDescribeCollectionResponse, error) {
	rsp, err := c.TigrisDBDescribeCollection(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBDescribeCollectionResponse(rsp)
}

// TigrisDBDeleteWithBodyWithResponse request with arbitrary body returning *TigrisDBDeleteResponse
func (c *ClientWithResponses) TigrisDBDeleteWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBDeleteResponse, error) {
	rsp, err := c.TigrisDBDeleteWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBDeleteResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBDeleteWithResponse(ctx context.Context, db string, collection string, body TigrisDBDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBDeleteResponse, error) {
	rsp, err := c.TigrisDBDelete(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBDeleteResponse(rsp)
}

// TigrisDBInsertWithBodyWithResponse request with arbitrary body returning *TigrisDBInsertResponse
func (c *ClientWithResponses) TigrisDBInsertWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBInsertResponse, error) {
	rsp, err := c.TigrisDBInsertWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBInsertResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBInsertWithResponse(ctx context.Context, db string, collection string, body TigrisDBInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBInsertResponse, error) {
	rsp, err := c.TigrisDBInsert(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBInsertResponse(rsp)
}

// TigrisDBReadWithBodyWithResponse request with arbitrary body returning *TigrisDBReadResponse
func (c *ClientWithResponses) TigrisDBReadWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBReadResponse, error) {
	rsp, err := c.TigrisDBReadWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBReadResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBReadWithResponse(ctx context.Context, db string, collection string, body TigrisDBReadJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBReadResponse, error) {
	rsp, err := c.TigrisDBRead(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBReadResponse(rsp)
}

// TigrisDBReplaceWithBodyWithResponse request with arbitrary body returning *TigrisDBReplaceResponse
func (c *ClientWithResponses) TigrisDBReplaceWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBReplaceResponse, error) {
	rsp, err := c.TigrisDBReplaceWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBReplaceResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBReplaceWithResponse(ctx context.Context, db string, collection string, body TigrisDBReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBReplaceResponse, error) {
	rsp, err := c.TigrisDBReplace(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBReplaceResponse(rsp)
}

// TigrisDBUpdateWithBodyWithResponse request with arbitrary body returning *TigrisDBUpdateResponse
func (c *ClientWithResponses) TigrisDBUpdateWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBUpdateResponse, error) {
	rsp, err := c.TigrisDBUpdateWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBUpdateResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBUpdateWithResponse(ctx context.Context, db string, collection string, body TigrisDBUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBUpdateResponse, error) {
	rsp, err := c.TigrisDBUpdate(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBUpdateResponse(rsp)
}

// TigrisDBDropCollectionWithBodyWithResponse request with arbitrary body returning *TigrisDBDropCollectionResponse
func (c *ClientWithResponses) TigrisDBDropCollectionWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBDropCollectionResponse, error) {
	rsp, err := c.TigrisDBDropCollectionWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBDropCollectionResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBDropCollectionWithResponse(ctx context.Context, db string, collection string, body TigrisDBDropCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBDropCollectionResponse, error) {
	rsp, err := c.TigrisDBDropCollection(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBDropCollectionResponse(rsp)
}

// TigrisDBCreateDatabaseWithBodyWithResponse request with arbitrary body returning *TigrisDBCreateDatabaseResponse
func (c *ClientWithResponses) TigrisDBCreateDatabaseWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBCreateDatabaseResponse, error) {
	rsp, err := c.TigrisDBCreateDatabaseWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBCreateDatabaseResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBCreateDatabaseWithResponse(ctx context.Context, db string, body TigrisDBCreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBCreateDatabaseResponse, error) {
	rsp, err := c.TigrisDBCreateDatabase(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBCreateDatabaseResponse(rsp)
}

// TigrisDBDescribeDatabaseWithBodyWithResponse request with arbitrary body returning *TigrisDBDescribeDatabaseResponse
func (c *ClientWithResponses) TigrisDBDescribeDatabaseWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBDescribeDatabaseResponse, error) {
	rsp, err := c.TigrisDBDescribeDatabaseWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBDescribeDatabaseResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBDescribeDatabaseWithResponse(ctx context.Context, db string, body TigrisDBDescribeDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBDescribeDatabaseResponse, error) {
	rsp, err := c.TigrisDBDescribeDatabase(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBDescribeDatabaseResponse(rsp)
}

// TigrisDBDropDatabaseWithBodyWithResponse request with arbitrary body returning *TigrisDBDropDatabaseResponse
func (c *ClientWithResponses) TigrisDBDropDatabaseWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBDropDatabaseResponse, error) {
	rsp, err := c.TigrisDBDropDatabaseWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBDropDatabaseResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBDropDatabaseWithResponse(ctx context.Context, db string, body TigrisDBDropDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBDropDatabaseResponse, error) {
	rsp, err := c.TigrisDBDropDatabase(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBDropDatabaseResponse(rsp)
}

// TigrisDBStreamWithBodyWithResponse request with arbitrary body returning *TigrisDBStreamResponse
func (c *ClientWithResponses) TigrisDBStreamWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBStreamResponse, error) {
	rsp, err := c.TigrisDBStreamWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBStreamResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBStreamWithResponse(ctx context.Context, db string, body TigrisDBStreamJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBStreamResponse, error) {
	rsp, err := c.TigrisDBStream(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBStreamResponse(rsp)
}

// TigrisDBBeginTransactionWithBodyWithResponse request with arbitrary body returning *TigrisDBBeginTransactionResponse
func (c *ClientWithResponses) TigrisDBBeginTransactionWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBBeginTransactionResponse, error) {
	rsp, err := c.TigrisDBBeginTransactionWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBBeginTransactionResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBBeginTransactionWithResponse(ctx context.Context, db string, body TigrisDBBeginTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBBeginTransactionResponse, error) {
	rsp, err := c.TigrisDBBeginTransaction(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBBeginTransactionResponse(rsp)
}

// TigrisDBCommitTransactionWithBodyWithResponse request with arbitrary body returning *TigrisDBCommitTransactionResponse
func (c *ClientWithResponses) TigrisDBCommitTransactionWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBCommitTransactionResponse, error) {
	rsp, err := c.TigrisDBCommitTransactionWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBCommitTransactionResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBCommitTransactionWithResponse(ctx context.Context, db string, body TigrisDBCommitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBCommitTransactionResponse, error) {
	rsp, err := c.TigrisDBCommitTransaction(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBCommitTransactionResponse(rsp)
}

// TigrisDBRollbackTransactionWithBodyWithResponse request with arbitrary body returning *TigrisDBRollbackTransactionResponse
func (c *ClientWithResponses) TigrisDBRollbackTransactionWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBRollbackTransactionResponse, error) {
	rsp, err := c.TigrisDBRollbackTransactionWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBRollbackTransactionResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBRollbackTransactionWithResponse(ctx context.Context, db string, body TigrisDBRollbackTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBRollbackTransactionResponse, error) {
	rsp, err := c.TigrisDBRollbackTransaction(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBRollbackTransactionResponse(rsp)
}

// ParseTigrisDBListDatabasesResponse parses an HTTP response from a TigrisDBListDatabasesWithResponse call
func ParseTigrisDBListDatabasesResponse(rsp *http.Response) (*TigrisDBListDatabasesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBListDatabasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListDatabasesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBListCollectionsResponse parses an HTTP response from a TigrisDBListCollectionsWithResponse call
func ParseTigrisDBListCollectionsResponse(rsp *http.Response) (*TigrisDBListCollectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBListCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCollectionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBCreateOrUpdateCollectionResponse parses an HTTP response from a TigrisDBCreateOrUpdateCollectionWithResponse call
func ParseTigrisDBCreateOrUpdateCollectionResponse(rsp *http.Response) (*TigrisDBCreateOrUpdateCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBCreateOrUpdateCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateOrUpdateCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBDescribeCollectionResponse parses an HTTP response from a TigrisDBDescribeCollectionWithResponse call
func ParseTigrisDBDescribeCollectionResponse(rsp *http.Response) (*TigrisDBDescribeCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBDescribeCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DescribeCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBDeleteResponse parses an HTTP response from a TigrisDBDeleteWithResponse call
func ParseTigrisDBDeleteResponse(rsp *http.Response) (*TigrisDBDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBInsertResponse parses an HTTP response from a TigrisDBInsertWithResponse call
func ParseTigrisDBInsertResponse(rsp *http.Response) (*TigrisDBInsertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBInsertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsertResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBReadResponse parses an HTTP response from a TigrisDBReadWithResponse call
func ParseTigrisDBReadResponse(rsp *http.Response) (*TigrisDBReadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBReplaceResponse parses an HTTP response from a TigrisDBReplaceWithResponse call
func ParseTigrisDBReplaceResponse(rsp *http.Response) (*TigrisDBReplaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBReplaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReplaceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBUpdateResponse parses an HTTP response from a TigrisDBUpdateWithResponse call
func ParseTigrisDBUpdateResponse(rsp *http.Response) (*TigrisDBUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBDropCollectionResponse parses an HTTP response from a TigrisDBDropCollectionWithResponse call
func ParseTigrisDBDropCollectionResponse(rsp *http.Response) (*TigrisDBDropCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBDropCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DropCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBCreateDatabaseResponse parses an HTTP response from a TigrisDBCreateDatabaseWithResponse call
func ParseTigrisDBCreateDatabaseResponse(rsp *http.Response) (*TigrisDBCreateDatabaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBCreateDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateDatabaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBDescribeDatabaseResponse parses an HTTP response from a TigrisDBDescribeDatabaseWithResponse call
func ParseTigrisDBDescribeDatabaseResponse(rsp *http.Response) (*TigrisDBDescribeDatabaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBDescribeDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DescribeDatabaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBDropDatabaseResponse parses an HTTP response from a TigrisDBDropDatabaseWithResponse call
func ParseTigrisDBDropDatabaseResponse(rsp *http.Response) (*TigrisDBDropDatabaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBDropDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DropDatabaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBStreamResponse parses an HTTP response from a TigrisDBStreamWithResponse call
func ParseTigrisDBStreamResponse(rsp *http.Response) (*TigrisDBStreamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBStreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StreamResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBBeginTransactionResponse parses an HTTP response from a TigrisDBBeginTransactionWithResponse call
func ParseTigrisDBBeginTransactionResponse(rsp *http.Response) (*TigrisDBBeginTransactionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBBeginTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BeginTransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBCommitTransactionResponse parses an HTTP response from a TigrisDBCommitTransactionWithResponse call
func ParseTigrisDBCommitTransactionResponse(rsp *http.Response) (*TigrisDBCommitTransactionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBCommitTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommitTransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBRollbackTransactionResponse parses an HTTP response from a TigrisDBRollbackTransactionWithResponse call
func ParseTigrisDBRollbackTransactionResponse(rsp *http.Response) (*TigrisDBRollbackTransactionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBRollbackTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RollbackTransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/0NQeun4XwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
