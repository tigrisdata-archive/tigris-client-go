// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tigrisdata/tigris-client-go/api/server/v1 (interfaces: TigrisServer,AuthServer,UserServer)

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/tigrisdata/tigris-client-go/api/server/v1"
)

// MockTigrisServer is a mock of TigrisServer interface.
type MockTigrisServer struct {
	ctrl     *gomock.Controller
	recorder *MockTigrisServerMockRecorder
}

// MockTigrisServerMockRecorder is the mock recorder for MockTigrisServer.
type MockTigrisServerMockRecorder struct {
	mock *MockTigrisServer
}

// NewMockTigrisServer creates a new mock instance.
func NewMockTigrisServer(ctrl *gomock.Controller) *MockTigrisServer {
	mock := &MockTigrisServer{ctrl: ctrl}
	mock.recorder = &MockTigrisServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTigrisServer) EXPECT() *MockTigrisServerMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockTigrisServer) BeginTransaction(arg0 context.Context, arg1 *api.BeginTransactionRequest) (*api.BeginTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction", arg0, arg1)
	ret0, _ := ret[0].(*api.BeginTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockTigrisServerMockRecorder) BeginTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockTigrisServer)(nil).BeginTransaction), arg0, arg1)
}

// CommitTransaction mocks base method.
func (m *MockTigrisServer) CommitTransaction(arg0 context.Context, arg1 *api.CommitTransactionRequest) (*api.CommitTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTransaction", arg0, arg1)
	ret0, _ := ret[0].(*api.CommitTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockTigrisServerMockRecorder) CommitTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockTigrisServer)(nil).CommitTransaction), arg0, arg1)
}

// CreateDatabase mocks base method.
func (m *MockTigrisServer) CreateDatabase(arg0 context.Context, arg1 *api.CreateDatabaseRequest) (*api.CreateDatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", arg0, arg1)
	ret0, _ := ret[0].(*api.CreateDatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockTigrisServerMockRecorder) CreateDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockTigrisServer)(nil).CreateDatabase), arg0, arg1)
}

// CreateOrUpdateCollection mocks base method.
func (m *MockTigrisServer) CreateOrUpdateCollection(arg0 context.Context, arg1 *api.CreateOrUpdateCollectionRequest) (*api.CreateOrUpdateCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateCollection", arg0, arg1)
	ret0, _ := ret[0].(*api.CreateOrUpdateCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateCollection indicates an expected call of CreateOrUpdateCollection.
func (mr *MockTigrisServerMockRecorder) CreateOrUpdateCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateCollection", reflect.TypeOf((*MockTigrisServer)(nil).CreateOrUpdateCollection), arg0, arg1)
}

// Delete mocks base method.
func (m *MockTigrisServer) Delete(arg0 context.Context, arg1 *api.DeleteRequest) (*api.DeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*api.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockTigrisServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTigrisServer)(nil).Delete), arg0, arg1)
}

// DescribeCollection mocks base method.
func (m *MockTigrisServer) DescribeCollection(arg0 context.Context, arg1 *api.DescribeCollectionRequest) (*api.DescribeCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCollection", arg0, arg1)
	ret0, _ := ret[0].(*api.DescribeCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCollection indicates an expected call of DescribeCollection.
func (mr *MockTigrisServerMockRecorder) DescribeCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCollection", reflect.TypeOf((*MockTigrisServer)(nil).DescribeCollection), arg0, arg1)
}

// DescribeDatabase mocks base method.
func (m *MockTigrisServer) DescribeDatabase(arg0 context.Context, arg1 *api.DescribeDatabaseRequest) (*api.DescribeDatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDatabase", arg0, arg1)
	ret0, _ := ret[0].(*api.DescribeDatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatabase indicates an expected call of DescribeDatabase.
func (mr *MockTigrisServerMockRecorder) DescribeDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatabase", reflect.TypeOf((*MockTigrisServer)(nil).DescribeDatabase), arg0, arg1)
}

// DropCollection mocks base method.
func (m *MockTigrisServer) DropCollection(arg0 context.Context, arg1 *api.DropCollectionRequest) (*api.DropCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropCollection", arg0, arg1)
	ret0, _ := ret[0].(*api.DropCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropCollection indicates an expected call of DropCollection.
func (mr *MockTigrisServerMockRecorder) DropCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropCollection", reflect.TypeOf((*MockTigrisServer)(nil).DropCollection), arg0, arg1)
}

// DropDatabase mocks base method.
func (m *MockTigrisServer) DropDatabase(arg0 context.Context, arg1 *api.DropDatabaseRequest) (*api.DropDatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDatabase", arg0, arg1)
	ret0, _ := ret[0].(*api.DropDatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropDatabase indicates an expected call of DropDatabase.
func (mr *MockTigrisServerMockRecorder) DropDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDatabase", reflect.TypeOf((*MockTigrisServer)(nil).DropDatabase), arg0, arg1)
}

// Events mocks base method.
func (m *MockTigrisServer) Events(arg0 *api.EventsRequest, arg1 api.Tigris_EventsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Events indicates an expected call of Events.
func (mr *MockTigrisServerMockRecorder) Events(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockTigrisServer)(nil).Events), arg0, arg1)
}

// GetInfo mocks base method.
func (m *MockTigrisServer) GetInfo(arg0 context.Context, arg1 *api.GetInfoRequest) (*api.GetInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", arg0, arg1)
	ret0, _ := ret[0].(*api.GetInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockTigrisServerMockRecorder) GetInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockTigrisServer)(nil).GetInfo), arg0, arg1)
}

// Insert mocks base method.
func (m *MockTigrisServer) Insert(arg0 context.Context, arg1 *api.InsertRequest) (*api.InsertResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(*api.InsertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockTigrisServerMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTigrisServer)(nil).Insert), arg0, arg1)
}

// ListCollections mocks base method.
func (m *MockTigrisServer) ListCollections(arg0 context.Context, arg1 *api.ListCollectionsRequest) (*api.ListCollectionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCollections", arg0, arg1)
	ret0, _ := ret[0].(*api.ListCollectionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollections indicates an expected call of ListCollections.
func (mr *MockTigrisServerMockRecorder) ListCollections(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollections", reflect.TypeOf((*MockTigrisServer)(nil).ListCollections), arg0, arg1)
}

// ListDatabases mocks base method.
func (m *MockTigrisServer) ListDatabases(arg0 context.Context, arg1 *api.ListDatabasesRequest) (*api.ListDatabasesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatabases", arg0, arg1)
	ret0, _ := ret[0].(*api.ListDatabasesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabases indicates an expected call of ListDatabases.
func (mr *MockTigrisServerMockRecorder) ListDatabases(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabases", reflect.TypeOf((*MockTigrisServer)(nil).ListDatabases), arg0, arg1)
}

// Publish mocks base method.
func (m *MockTigrisServer) Publish(arg0 context.Context, arg1 *api.PublishRequest) (*api.PublishResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(*api.PublishResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockTigrisServerMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockTigrisServer)(nil).Publish), arg0, arg1)
}

// Read mocks base method.
func (m *MockTigrisServer) Read(arg0 *api.ReadRequest, arg1 api.Tigris_ReadServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockTigrisServerMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTigrisServer)(nil).Read), arg0, arg1)
}

// Replace mocks base method.
func (m *MockTigrisServer) Replace(arg0 context.Context, arg1 *api.ReplaceRequest) (*api.ReplaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", arg0, arg1)
	ret0, _ := ret[0].(*api.ReplaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Replace indicates an expected call of Replace.
func (mr *MockTigrisServerMockRecorder) Replace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockTigrisServer)(nil).Replace), arg0, arg1)
}

// RollbackTransaction mocks base method.
func (m *MockTigrisServer) RollbackTransaction(arg0 context.Context, arg1 *api.RollbackTransactionRequest) (*api.RollbackTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTransaction", arg0, arg1)
	ret0, _ := ret[0].(*api.RollbackTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockTigrisServerMockRecorder) RollbackTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockTigrisServer)(nil).RollbackTransaction), arg0, arg1)
}

// Search mocks base method.
func (m *MockTigrisServer) Search(arg0 *api.SearchRequest, arg1 api.Tigris_SearchServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockTigrisServerMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockTigrisServer)(nil).Search), arg0, arg1)
}

// Subscribe mocks base method.
func (m *MockTigrisServer) Subscribe(arg0 *api.SubscribeRequest, arg1 api.Tigris_SubscribeServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockTigrisServerMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockTigrisServer)(nil).Subscribe), arg0, arg1)
}

// Update mocks base method.
func (m *MockTigrisServer) Update(arg0 context.Context, arg1 *api.UpdateRequest) (*api.UpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*api.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTigrisServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTigrisServer)(nil).Update), arg0, arg1)
}

// MockAuthServer is a mock of AuthServer interface.
type MockAuthServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServerMockRecorder
}

// MockAuthServerMockRecorder is the mock recorder for MockAuthServer.
type MockAuthServerMockRecorder struct {
	mock *MockAuthServer
}

// NewMockAuthServer creates a new mock instance.
func NewMockAuthServer(ctrl *gomock.Controller) *MockAuthServer {
	mock := &MockAuthServer{ctrl: ctrl}
	mock.recorder = &MockAuthServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServer) EXPECT() *MockAuthServerMockRecorder {
	return m.recorder
}

// GetAccessToken mocks base method.
func (m *MockAuthServer) GetAccessToken(arg0 context.Context, arg1 *api.GetAccessTokenRequest) (*api.GetAccessTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", arg0, arg1)
	ret0, _ := ret[0].(*api.GetAccessTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockAuthServerMockRecorder) GetAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockAuthServer)(nil).GetAccessToken), arg0, arg1)
}

// MockUserServer is a mock of UserServer interface.
type MockUserServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServerMockRecorder
}

// MockUserServerMockRecorder is the mock recorder for MockUserServer.
type MockUserServerMockRecorder struct {
	mock *MockUserServer
}

// NewMockUserServer creates a new mock instance.
func NewMockUserServer(ctrl *gomock.Controller) *MockUserServer {
	mock := &MockUserServer{ctrl: ctrl}
	mock.recorder = &MockUserServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServer) EXPECT() *MockUserServerMockRecorder {
	return m.recorder
}

// CreateApplication mocks base method.
func (m *MockUserServer) CreateApplication(arg0 context.Context, arg1 *api.CreateApplicationRequest) (*api.CreateApplicationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0, arg1)
	ret0, _ := ret[0].(*api.CreateApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication.
func (mr *MockUserServerMockRecorder) CreateApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockUserServer)(nil).CreateApplication), arg0, arg1)
}

// DeleteApplication mocks base method.
func (m *MockUserServer) DeleteApplication(arg0 context.Context, arg1 *api.DeleteApplicationsRequest) (*api.DeleteApplicationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0, arg1)
	ret0, _ := ret[0].(*api.DeleteApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication.
func (mr *MockUserServerMockRecorder) DeleteApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockUserServer)(nil).DeleteApplication), arg0, arg1)
}

// GetUserMetadata mocks base method.
func (m *MockUserServer) GetUserMetadata(arg0 context.Context, arg1 *api.GetUserMetadataRequest) (*api.GetUserMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMetadata", arg0, arg1)
	ret0, _ := ret[0].(*api.GetUserMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMetadata indicates an expected call of GetUserMetadata.
func (mr *MockUserServerMockRecorder) GetUserMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMetadata", reflect.TypeOf((*MockUserServer)(nil).GetUserMetadata), arg0, arg1)
}

// InsertUserMetadata mocks base method.
func (m *MockUserServer) InsertUserMetadata(arg0 context.Context, arg1 *api.InsertUserMetadataRequest) (*api.InsertUserMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserMetadata", arg0, arg1)
	ret0, _ := ret[0].(*api.InsertUserMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUserMetadata indicates an expected call of InsertUserMetadata.
func (mr *MockUserServerMockRecorder) InsertUserMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserMetadata", reflect.TypeOf((*MockUserServer)(nil).InsertUserMetadata), arg0, arg1)
}

// ListApplications mocks base method.
func (m *MockUserServer) ListApplications(arg0 context.Context, arg1 *api.ListApplicationsRequest) (*api.ListApplicationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", arg0, arg1)
	ret0, _ := ret[0].(*api.ListApplicationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications.
func (mr *MockUserServerMockRecorder) ListApplications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockUserServer)(nil).ListApplications), arg0, arg1)
}

// RotateApplicationSecret mocks base method.
func (m *MockUserServer) RotateApplicationSecret(arg0 context.Context, arg1 *api.RotateApplicationSecretRequest) (*api.RotateApplicationSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateApplicationSecret", arg0, arg1)
	ret0, _ := ret[0].(*api.RotateApplicationSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RotateApplicationSecret indicates an expected call of RotateApplicationSecret.
func (mr *MockUserServerMockRecorder) RotateApplicationSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateApplicationSecret", reflect.TypeOf((*MockUserServer)(nil).RotateApplicationSecret), arg0, arg1)
}

// UpdateApplication mocks base method.
func (m *MockUserServer) UpdateApplication(arg0 context.Context, arg1 *api.UpdateApplicationRequest) (*api.UpdateApplicationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0, arg1)
	ret0, _ := ret[0].(*api.UpdateApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication.
func (mr *MockUserServerMockRecorder) UpdateApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockUserServer)(nil).UpdateApplication), arg0, arg1)
}

// UpdateUserMetadata mocks base method.
func (m *MockUserServer) UpdateUserMetadata(arg0 context.Context, arg1 *api.UpdateUserMetadataRequest) (*api.UpdateUserMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserMetadata", arg0, arg1)
	ret0, _ := ret[0].(*api.UpdateUserMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserMetadata indicates an expected call of UpdateUserMetadata.
func (mr *MockUserServerMockRecorder) UpdateUserMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserMetadata", reflect.TypeOf((*MockUserServer)(nil).UpdateUserMetadata), arg0, arg1)
}
