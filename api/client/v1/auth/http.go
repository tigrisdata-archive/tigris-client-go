// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for GetAccessTokenRequestGrantType.
const (
	CLIENTCREDENTIALS GetAccessTokenRequestGrantType = "CLIENT_CREDENTIALS"
	REFRESHTOKEN      GetAccessTokenRequestGrantType = "REFRESH_TOKEN"
)

// An user application
type Application struct {
	// Created at
	CreatedAt *int64 `json:"created_at,omitempty"`

	// Created by
	CreatedBy *string `json:"created_by,omitempty"`

	// A human readable app description
	Description *string `json:"description,omitempty"`

	// Generated client id
	Id *string `json:"id,omitempty"`

	// A human readable app name
	Name *string `json:"name,omitempty"`

	// Generated app secret
	Secret *string `json:"secret,omitempty"`

	// Updated at
	UpdatedAt *int64 `json:"updated_at,omitempty"`

	// Updated by
	UpdatedBy *string `json:"updated_by,omitempty"`
}

// Request creation of user application
type CreateApplicationRequest struct {
	// A human readable app description
	Description *string `json:"description,omitempty"`

	// A human readable app name
	Name *string `json:"name,omitempty"`
}

// CreateApplication returns created application
type CreateApplicationResponse struct {
	// An user application
	CreatedApplication *Application `json:"created_application,omitempty"`
}

// DeleteApplication returns the flag to convey if application was deleted
type DeleteApplicationResponse struct {
	// status flag for delete operation
	Deleted *bool `json:"deleted,omitempty"`
}

// Request deletion of an application
type DeleteApplicationsRequest struct {
	// application id
	Id *string `json:"id,omitempty"`
}

// Requests the access token by specifying grant_type:refresh_token & refresh_token or grant_type:client_credentials & [client_id, client_secret]
type GetAccessTokenRequest struct {
	// case: client_credentials: A valid credentials (client_id, client_secret, audience)
	ClientId     *string                         `json:"client_id,omitempty"`
	ClientSecret *string                         `json:"client_secret,omitempty"`
	GrantType    *GetAccessTokenRequestGrantType `json:"grant_type,omitempty"`

	// case: refresh_token: A valid refresh token
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// GetAccessTokenRequestGrantType defines model for GetAccessTokenRequest.GrantType.
type GetAccessTokenRequestGrantType string

// GetAccessToken returns response containing access_token and optionally refresh_token
type GetAccessTokenResponse struct {
	// An access token.
	AccessToken *string `json:"access_token,omitempty"`

	// Access token expiration timeout in seconds
	ExpiresIn *int32 `json:"expires_in,omitempty"`

	// Refresh token.
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
type GoogleProtobufAny struct {
	// The type of the serialized message.
	Type                 *string                `json:"@type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Request listing of all the application those are visible to requesting actor
type ListApplicationsRequest = map[string]interface{}

// ListApplication returns one or more visible application to user
type ListApplicationsResponse struct {
	Applications *[]Application `json:"applications,omitempty"`
}

// Request rotation of an application secret
type RotateApplicationSecretRequest struct {
	Id *string `json:"id,omitempty"`
}

// RotateApplicationRequest returns the new application with rotated secret
type RotateApplicationSecretResponse struct {
	// An user application
	Application *Application `json:"application,omitempty"`
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type Status struct {
	// The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
	Code *int32 `json:"code,omitempty"`

	// A list of messages that carry the error details.  There is a common set of message types for APIs to use.
	Details *[]GoogleProtobufAny `json:"details,omitempty"`

	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
	Message *string `json:"message,omitempty"`
}

// Request creation of user application
type UpdateApplicationRequest struct {
	// A new human readable app description
	Description *string `json:"description,omitempty"`

	// application id
	Id *string `json:"id,omitempty"`

	// A new human readable app name
	Name *string `json:"name,omitempty"`
}

// CreateApplication returns created application
type UpdateApplicationResponse struct {
	// An user application
	UpdatedApplication *Application `json:"updated_application,omitempty"`
}

// AuthCreateApplicationJSONBody defines parameters for AuthCreateApplication.
type AuthCreateApplicationJSONBody = CreateApplicationRequest

// AuthDeleteApplicationJSONBody defines parameters for AuthDeleteApplication.
type AuthDeleteApplicationJSONBody = DeleteApplicationsRequest

// AuthListApplicationsJSONBody defines parameters for AuthListApplications.
type AuthListApplicationsJSONBody = ListApplicationsRequest

// AuthRotateApplicationSecretJSONBody defines parameters for AuthRotateApplicationSecret.
type AuthRotateApplicationSecretJSONBody = RotateApplicationSecretRequest

// AuthUpdateApplicationJSONBody defines parameters for AuthUpdateApplication.
type AuthUpdateApplicationJSONBody = UpdateApplicationRequest

// AuthGetAccessTokenJSONBody defines parameters for AuthGetAccessToken.
type AuthGetAccessTokenJSONBody = GetAccessTokenRequest

// AuthCreateApplicationJSONRequestBody defines body for AuthCreateApplication for application/json ContentType.
type AuthCreateApplicationJSONRequestBody = AuthCreateApplicationJSONBody

// AuthDeleteApplicationJSONRequestBody defines body for AuthDeleteApplication for application/json ContentType.
type AuthDeleteApplicationJSONRequestBody = AuthDeleteApplicationJSONBody

// AuthListApplicationsJSONRequestBody defines body for AuthListApplications for application/json ContentType.
type AuthListApplicationsJSONRequestBody = AuthListApplicationsJSONBody

// AuthRotateApplicationSecretJSONRequestBody defines body for AuthRotateApplicationSecret for application/json ContentType.
type AuthRotateApplicationSecretJSONRequestBody = AuthRotateApplicationSecretJSONBody

// AuthUpdateApplicationJSONRequestBody defines body for AuthUpdateApplication for application/json ContentType.
type AuthUpdateApplicationJSONRequestBody = AuthUpdateApplicationJSONBody

// AuthGetAccessTokenJSONRequestBody defines body for AuthGetAccessToken for application/json ContentType.
type AuthGetAccessTokenJSONRequestBody = AuthGetAccessTokenJSONBody

// Getter for additional properties for GoogleProtobufAny. Returns the specified
// element and whether it was found
func (a GoogleProtobufAny) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GoogleProtobufAny
func (a *GoogleProtobufAny) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GoogleProtobufAny to handle AdditionalProperties
func (a *GoogleProtobufAny) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["@type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading '@type': %w", err)
		}
		delete(object, "@type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GoogleProtobufAny to handle AdditionalProperties
func (a GoogleProtobufAny) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Type != nil {
		object["@type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '@type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AuthCreateApplication request with any body
	AuthCreateApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthCreateApplication(ctx context.Context, body AuthCreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthDeleteApplication request with any body
	AuthDeleteApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthDeleteApplication(ctx context.Context, body AuthDeleteApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthListApplications request with any body
	AuthListApplicationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthListApplications(ctx context.Context, body AuthListApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthRotateApplicationSecret request with any body
	AuthRotateApplicationSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthRotateApplicationSecret(ctx context.Context, body AuthRotateApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthUpdateApplication request with any body
	AuthUpdateApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthUpdateApplication(ctx context.Context, body AuthUpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthGetAccessToken request with any body
	AuthGetAccessTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthGetAccessToken(ctx context.Context, body AuthGetAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AuthCreateApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthCreateApplicationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthCreateApplication(ctx context.Context, body AuthCreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthCreateApplicationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthDeleteApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthDeleteApplicationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthDeleteApplication(ctx context.Context, body AuthDeleteApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthDeleteApplicationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthListApplicationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthListApplicationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthListApplications(ctx context.Context, body AuthListApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthListApplicationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthRotateApplicationSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthRotateApplicationSecretRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthRotateApplicationSecret(ctx context.Context, body AuthRotateApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthRotateApplicationSecretRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthUpdateApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthUpdateApplicationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthUpdateApplication(ctx context.Context, body AuthUpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthUpdateApplicationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthGetAccessTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthGetAccessTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthGetAccessToken(ctx context.Context, body AuthGetAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthGetAccessTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAuthCreateApplicationRequest calls the generic AuthCreateApplication builder with application/json body
func NewAuthCreateApplicationRequest(server string, body AuthCreateApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthCreateApplicationRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthCreateApplicationRequestWithBody generates requests for AuthCreateApplication with any type of body
func NewAuthCreateApplicationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/applications/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthDeleteApplicationRequest calls the generic AuthDeleteApplication builder with application/json body
func NewAuthDeleteApplicationRequest(server string, body AuthDeleteApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthDeleteApplicationRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthDeleteApplicationRequestWithBody generates requests for AuthDeleteApplication with any type of body
func NewAuthDeleteApplicationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/applications/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthListApplicationsRequest calls the generic AuthListApplications builder with application/json body
func NewAuthListApplicationsRequest(server string, body AuthListApplicationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthListApplicationsRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthListApplicationsRequestWithBody generates requests for AuthListApplications with any type of body
func NewAuthListApplicationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/applications/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthRotateApplicationSecretRequest calls the generic AuthRotateApplicationSecret builder with application/json body
func NewAuthRotateApplicationSecretRequest(server string, body AuthRotateApplicationSecretJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthRotateApplicationSecretRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthRotateApplicationSecretRequestWithBody generates requests for AuthRotateApplicationSecret with any type of body
func NewAuthRotateApplicationSecretRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/applications/rotate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthUpdateApplicationRequest calls the generic AuthUpdateApplication builder with application/json body
func NewAuthUpdateApplicationRequest(server string, body AuthUpdateApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthUpdateApplicationRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthUpdateApplicationRequestWithBody generates requests for AuthUpdateApplication with any type of body
func NewAuthUpdateApplicationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/applications/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthGetAccessTokenRequest calls the generic AuthGetAccessToken builder with application/json body
func NewAuthGetAccessTokenRequest(server string, body AuthGetAccessTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthGetAccessTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthGetAccessTokenRequestWithBody generates requests for AuthGetAccessToken with any type of body
func NewAuthGetAccessTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AuthCreateApplication request with any body
	AuthCreateApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthCreateApplicationResponse, error)

	AuthCreateApplicationWithResponse(ctx context.Context, body AuthCreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthCreateApplicationResponse, error)

	// AuthDeleteApplication request with any body
	AuthDeleteApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthDeleteApplicationResponse, error)

	AuthDeleteApplicationWithResponse(ctx context.Context, body AuthDeleteApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthDeleteApplicationResponse, error)

	// AuthListApplications request with any body
	AuthListApplicationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthListApplicationsResponse, error)

	AuthListApplicationsWithResponse(ctx context.Context, body AuthListApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthListApplicationsResponse, error)

	// AuthRotateApplicationSecret request with any body
	AuthRotateApplicationSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthRotateApplicationSecretResponse, error)

	AuthRotateApplicationSecretWithResponse(ctx context.Context, body AuthRotateApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthRotateApplicationSecretResponse, error)

	// AuthUpdateApplication request with any body
	AuthUpdateApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthUpdateApplicationResponse, error)

	AuthUpdateApplicationWithResponse(ctx context.Context, body AuthUpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthUpdateApplicationResponse, error)

	// AuthGetAccessToken request with any body
	AuthGetAccessTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthGetAccessTokenResponse, error)

	AuthGetAccessTokenWithResponse(ctx context.Context, body AuthGetAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthGetAccessTokenResponse, error)
}

type AuthCreateApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateApplicationResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r AuthCreateApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthCreateApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthDeleteApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteApplicationResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r AuthDeleteApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthDeleteApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthListApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListApplicationsResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r AuthListApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthListApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthRotateApplicationSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RotateApplicationSecretResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r AuthRotateApplicationSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthRotateApplicationSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthUpdateApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateApplicationResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r AuthUpdateApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthUpdateApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthGetAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAccessTokenResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r AuthGetAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthGetAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AuthCreateApplicationWithBodyWithResponse request with arbitrary body returning *AuthCreateApplicationResponse
func (c *ClientWithResponses) AuthCreateApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthCreateApplicationResponse, error) {
	rsp, err := c.AuthCreateApplicationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthCreateApplicationResponse(rsp)
}

func (c *ClientWithResponses) AuthCreateApplicationWithResponse(ctx context.Context, body AuthCreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthCreateApplicationResponse, error) {
	rsp, err := c.AuthCreateApplication(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthCreateApplicationResponse(rsp)
}

// AuthDeleteApplicationWithBodyWithResponse request with arbitrary body returning *AuthDeleteApplicationResponse
func (c *ClientWithResponses) AuthDeleteApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthDeleteApplicationResponse, error) {
	rsp, err := c.AuthDeleteApplicationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthDeleteApplicationResponse(rsp)
}

func (c *ClientWithResponses) AuthDeleteApplicationWithResponse(ctx context.Context, body AuthDeleteApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthDeleteApplicationResponse, error) {
	rsp, err := c.AuthDeleteApplication(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthDeleteApplicationResponse(rsp)
}

// AuthListApplicationsWithBodyWithResponse request with arbitrary body returning *AuthListApplicationsResponse
func (c *ClientWithResponses) AuthListApplicationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthListApplicationsResponse, error) {
	rsp, err := c.AuthListApplicationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthListApplicationsResponse(rsp)
}

func (c *ClientWithResponses) AuthListApplicationsWithResponse(ctx context.Context, body AuthListApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthListApplicationsResponse, error) {
	rsp, err := c.AuthListApplications(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthListApplicationsResponse(rsp)
}

// AuthRotateApplicationSecretWithBodyWithResponse request with arbitrary body returning *AuthRotateApplicationSecretResponse
func (c *ClientWithResponses) AuthRotateApplicationSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthRotateApplicationSecretResponse, error) {
	rsp, err := c.AuthRotateApplicationSecretWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthRotateApplicationSecretResponse(rsp)
}

func (c *ClientWithResponses) AuthRotateApplicationSecretWithResponse(ctx context.Context, body AuthRotateApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthRotateApplicationSecretResponse, error) {
	rsp, err := c.AuthRotateApplicationSecret(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthRotateApplicationSecretResponse(rsp)
}

// AuthUpdateApplicationWithBodyWithResponse request with arbitrary body returning *AuthUpdateApplicationResponse
func (c *ClientWithResponses) AuthUpdateApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthUpdateApplicationResponse, error) {
	rsp, err := c.AuthUpdateApplicationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthUpdateApplicationResponse(rsp)
}

func (c *ClientWithResponses) AuthUpdateApplicationWithResponse(ctx context.Context, body AuthUpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthUpdateApplicationResponse, error) {
	rsp, err := c.AuthUpdateApplication(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthUpdateApplicationResponse(rsp)
}

// AuthGetAccessTokenWithBodyWithResponse request with arbitrary body returning *AuthGetAccessTokenResponse
func (c *ClientWithResponses) AuthGetAccessTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthGetAccessTokenResponse, error) {
	rsp, err := c.AuthGetAccessTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthGetAccessTokenResponse(rsp)
}

func (c *ClientWithResponses) AuthGetAccessTokenWithResponse(ctx context.Context, body AuthGetAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthGetAccessTokenResponse, error) {
	rsp, err := c.AuthGetAccessToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthGetAccessTokenResponse(rsp)
}

// ParseAuthCreateApplicationResponse parses an HTTP response from a AuthCreateApplicationWithResponse call
func ParseAuthCreateApplicationResponse(rsp *http.Response) (*AuthCreateApplicationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthCreateApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthDeleteApplicationResponse parses an HTTP response from a AuthDeleteApplicationWithResponse call
func ParseAuthDeleteApplicationResponse(rsp *http.Response) (*AuthDeleteApplicationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthDeleteApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthListApplicationsResponse parses an HTTP response from a AuthListApplicationsWithResponse call
func ParseAuthListApplicationsResponse(rsp *http.Response) (*AuthListApplicationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthListApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListApplicationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthRotateApplicationSecretResponse parses an HTTP response from a AuthRotateApplicationSecretWithResponse call
func ParseAuthRotateApplicationSecretResponse(rsp *http.Response) (*AuthRotateApplicationSecretResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthRotateApplicationSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RotateApplicationSecretResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthUpdateApplicationResponse parses an HTTP response from a AuthUpdateApplicationWithResponse call
func ParseAuthUpdateApplicationResponse(rsp *http.Response) (*AuthUpdateApplicationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthUpdateApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthGetAccessTokenResponse parses an HTTP response from a AuthGetAccessTokenWithResponse call
func ParseAuthGetAccessTokenResponse(rsp *http.Response) (*AuthGetAccessTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthGetAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAccessTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
