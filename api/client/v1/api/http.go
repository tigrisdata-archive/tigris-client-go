// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// AlterCollectionRequest defines model for AlterCollectionRequest.
type AlterCollectionRequest struct {
	// Collection requests modifying options
	Options *CollectionOptions `json:"options,omitempty"`

	// Schema of the documents in this collection. Should be proper JSON object. Schema syntax described here: {TBD}
	Schema json.RawMessage `json:"schema,omitempty"`
}

// AlterCollectionResponse defines model for AlterCollectionResponse.
type AlterCollectionResponse struct {
	Msg *string `json:"msg,omitempty"`
}

// Start new transaction in database specified by "db"
type BeginTransactionRequest struct {
	// Modify start transaction behavior
	Options *TransactionOptions `json:"options,omitempty"`
}

// Start transaction returns transaction context  which uniquely identifies the transaction
type BeginTransactionResponse struct {
	// Contains ID which uniquely identifies transaction.This context is returned by StartTransaction request andshould be passed in the options of document modificationrequests in order to run them in the context of the sametransaction
	TxCtx *TransactionCtx `json:"tx_ctx,omitempty"`
}

// Collection requests modifying options
type CollectionOptions struct {
	// Contains ID which uniquely identifies transaction.This context is returned by StartTransaction request andshould be passed in the options of document modificationrequests in order to run them in the context of the sametransaction
	TxCtx *TransactionCtx `json:"tx_ctx,omitempty"`
}

// Commit transaction with the given ID
type CommitTransactionRequest struct {
	// Contains ID which uniquely identifies transaction.This context is returned by StartTransaction request andshould be passed in the options of document modificationrequests in order to run them in the context of the sametransaction
	TxCtx *TransactionCtx `json:"tx_ctx,omitempty"`
}

// CommitTransactionResponse defines model for CommitTransactionResponse.
type CommitTransactionResponse map[string]interface{}

// CreateCollectionRequest defines model for CreateCollectionRequest.
type CreateCollectionRequest struct {
	// Collection requests modifying options
	Options *CollectionOptions `json:"options,omitempty"`

	// Schema of the documents in this collection. Should be proper JSON object. Schema syntax described here: {TBD}
	Schema json.RawMessage `json:"schema,omitempty"`
}

// CreateCollectionResponse defines model for CreateCollectionResponse.
type CreateCollectionResponse struct {
	Msg *string `json:"msg,omitempty"`
}

// CreateDatabaseRequest defines model for CreateDatabaseRequest.
type CreateDatabaseRequest struct {
	// Database requests modifying options
	Options *DatabaseOptions `json:"options,omitempty"`
}

// CreateDatabaseResponse defines model for CreateDatabaseResponse.
type CreateDatabaseResponse struct {
	Msg *string `json:"msg,omitempty"`
}

// Database requests modifying options
type DatabaseOptions map[string]interface{}

// DeleteRequest defines model for DeleteRequest.
type DeleteRequest struct {
	// Delete documents which matching specified filter. The filter should proper JSON object. Filter syntax described here: {TBD}
	Filter  json.RawMessage       `json:"filter,omitempty"`
	Options *DeleteRequestOptions `json:"options,omitempty"`
}

// DeleteRequestOptions defines model for DeleteRequestOptions.
type DeleteRequestOptions struct {
	// WriteOptions contain write behavior modifying options
	WriteOptions *WriteOptions `json:"write_options,omitempty"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse map[string]interface{}

// DropCollectionRequest defines model for DropCollectionRequest.
type DropCollectionRequest struct {
	// Collection requests modifying options
	Options *CollectionOptions `json:"options,omitempty"`
}

// DropCollectionResponse defines model for DropCollectionResponse.
type DropCollectionResponse struct {
	Msg *string `json:"msg,omitempty"`
}

// DropDatabaseRequest defines model for DropDatabaseRequest.
type DropDatabaseRequest struct {
	// Database requests modifying options
	Options *DatabaseOptions `json:"options,omitempty"`
}

// DropDatabaseResponse defines model for DropDatabaseResponse.
type DropDatabaseResponse struct {
	Msg *string `json:"msg,omitempty"`
}

// InsertRequest defines model for InsertRequest.
type InsertRequest struct {
	// Array of documents to insert. Should be proper JSON object
	Documents *[]json.RawMessage `json:"documents,omitempty"`

	// Insert request options
	Options *InsertRequestOptions `json:"options,omitempty"`
}

// Insert request options
type InsertRequestOptions struct {
	// The must_not_exist, when set to true, prevents overwriting if the documents with the same ID already exist in the collection
	MustNotExist *bool `json:"must_not_exist,omitempty"`

	// WriteOptions contain write behavior modifying options
	WriteOptions *WriteOptions `json:"write_options,omitempty"`
}

// InsertResponse defines model for InsertResponse.
type InsertResponse map[string]interface{}

// ListCollectionsRequest defines model for ListCollectionsRequest.
type ListCollectionsRequest struct {
	// Collection requests modifying options
	Options *CollectionOptions `json:"options,omitempty"`
}

// ListCollectionsResponse defines model for ListCollectionsResponse.
type ListCollectionsResponse struct {
	// List of the collections in the database
	Collections *[]string `json:"collections,omitempty"`
}

// ListDatabasesResponse defines model for ListDatabasesResponse.
type ListDatabasesResponse struct {
	// List of the databases in the namespace
	Dbs *[]string `json:"dbs,omitempty"`
}

// ReadRequest defines model for ReadRequest.
type ReadRequest struct {
	// Limit fields returned by the read by this subset of the fields The fields should proper JSON object
	Fields *[]byte `json:"fields,omitempty"`

	// Returns documents matching this filter. The filter should proper JSON object Filter syntax described here: {TBD}
	Filter json.RawMessage `json:"filter,omitempty"`

	// ReadRequestOptions contain read behavior modifying options
	Options *ReadRequestOptions `json:"options,omitempty"`
}

// ReadRequestOptions contain read behavior modifying options
type ReadRequestOptions struct {
	// Limit the number of documents returned by the read operation
	Limit *int64 `json:"limit,omitempty"`

	// Start returning document start from this primary key
	Offset *[]byte `json:"offset,omitempty"`

	// Number of documents to skip before starting to return resulting documents
	Skip *int64 `json:"skip,omitempty"`

	// Contains ID which uniquely identifies transaction.This context is returned by StartTransaction request andshould be passed in the options of document modificationrequests in order to run them in the context of the sametransaction
	TxCtx *TransactionCtx `json:"tx_ctx,omitempty"`
}

// ReadResponse defines model for ReadResponse.
type ReadResponse struct {
	// Doc is the JSON object representing requested fields
	Doc json.RawMessage `json:"doc,omitempty"`

	// Key is internal key, which uniquely identify the document. This fields is used to
	Key *[]byte `json:"key,omitempty"`
}

// Rollback transaction with the given ID
type RollbackTransactionRequest struct {
	// Contains ID which uniquely identifies transaction.This context is returned by StartTransaction request andshould be passed in the options of document modificationrequests in order to run them in the context of the sametransaction
	TxCtx *TransactionCtx `json:"tx_ctx,omitempty"`
}

// RollbackTransactionResponse defines model for RollbackTransactionResponse.
type RollbackTransactionResponse map[string]interface{}

// Contains ID which uniquely identifies transaction.This context is returned by StartTransaction request andshould be passed in the options of document modificationrequests in order to run them in the context of the sametransaction
type TransactionCtx struct {
	Id     *string `json:"id,omitempty"`
	Origin *string `json:"origin,omitempty"`
}

// Modify start transaction behavior
type TransactionOptions map[string]interface{}

// UpdateRequest defines model for UpdateRequest.
type UpdateRequest struct {
	// Fields contains set of fields with the values which need to be updated. Should be proper JSON object.
	Fields json.RawMessage `json:"fields,omitempty"`

	// Update documents which matching specified filter. The filter should proper JSON object Filter syntax described here: {TBD}
	Filter  json.RawMessage       `json:"filter,omitempty"`
	Options *UpdateRequestOptions `json:"options,omitempty"`
}

// UpdateRequestOptions defines model for UpdateRequestOptions.
type UpdateRequestOptions struct {
	// WriteOptions contain write behavior modifying options
	WriteOptions *WriteOptions `json:"write_options,omitempty"`
}

// UpdateResponse defines model for UpdateResponse.
type UpdateResponse struct {
	Rc *int32 `json:"rc,omitempty"`
}

// WriteOptions contain write behavior modifying options
type WriteOptions struct {
	// Contains ID which uniquely identifies transaction.This context is returned by StartTransaction request andshould be passed in the options of document modificationrequests in order to run them in the context of the sametransaction
	TxCtx *TransactionCtx `json:"tx_ctx,omitempty"`
}

// TigrisDBListCollectionsJSONBody defines parameters for TigrisDBListCollections.
type TigrisDBListCollectionsJSONBody ListCollectionsRequest

// TigrisDBAlterCollectionJSONBody defines parameters for TigrisDBAlterCollection.
type TigrisDBAlterCollectionJSONBody AlterCollectionRequest

// TigrisDBCreateCollectionJSONBody defines parameters for TigrisDBCreateCollection.
type TigrisDBCreateCollectionJSONBody CreateCollectionRequest

// TigrisDBDeleteJSONBody defines parameters for TigrisDBDelete.
type TigrisDBDeleteJSONBody DeleteRequest

// TigrisDBInsertJSONBody defines parameters for TigrisDBInsert.
type TigrisDBInsertJSONBody InsertRequest

// TigrisDBReadJSONBody defines parameters for TigrisDBRead.
type TigrisDBReadJSONBody ReadRequest

// TigrisDBUpdateJSONBody defines parameters for TigrisDBUpdate.
type TigrisDBUpdateJSONBody UpdateRequest

// TigrisDBDropCollectionJSONBody defines parameters for TigrisDBDropCollection.
type TigrisDBDropCollectionJSONBody DropCollectionRequest

// TigrisDBCreateDatabaseJSONBody defines parameters for TigrisDBCreateDatabase.
type TigrisDBCreateDatabaseJSONBody CreateDatabaseRequest

// TigrisDBDropDatabaseJSONBody defines parameters for TigrisDBDropDatabase.
type TigrisDBDropDatabaseJSONBody DropDatabaseRequest

// TigrisDBBeginTransactionJSONBody defines parameters for TigrisDBBeginTransaction.
type TigrisDBBeginTransactionJSONBody BeginTransactionRequest

// TigrisDBCommitTransactionJSONBody defines parameters for TigrisDBCommitTransaction.
type TigrisDBCommitTransactionJSONBody CommitTransactionRequest

// TigrisDBRollbackTransactionJSONBody defines parameters for TigrisDBRollbackTransaction.
type TigrisDBRollbackTransactionJSONBody RollbackTransactionRequest

// TigrisDBListCollectionsJSONRequestBody defines body for TigrisDBListCollections for application/json ContentType.
type TigrisDBListCollectionsJSONRequestBody TigrisDBListCollectionsJSONBody

// TigrisDBAlterCollectionJSONRequestBody defines body for TigrisDBAlterCollection for application/json ContentType.
type TigrisDBAlterCollectionJSONRequestBody TigrisDBAlterCollectionJSONBody

// TigrisDBCreateCollectionJSONRequestBody defines body for TigrisDBCreateCollection for application/json ContentType.
type TigrisDBCreateCollectionJSONRequestBody TigrisDBCreateCollectionJSONBody

// TigrisDBDeleteJSONRequestBody defines body for TigrisDBDelete for application/json ContentType.
type TigrisDBDeleteJSONRequestBody TigrisDBDeleteJSONBody

// TigrisDBInsertJSONRequestBody defines body for TigrisDBInsert for application/json ContentType.
type TigrisDBInsertJSONRequestBody TigrisDBInsertJSONBody

// TigrisDBReadJSONRequestBody defines body for TigrisDBRead for application/json ContentType.
type TigrisDBReadJSONRequestBody TigrisDBReadJSONBody

// TigrisDBUpdateJSONRequestBody defines body for TigrisDBUpdate for application/json ContentType.
type TigrisDBUpdateJSONRequestBody TigrisDBUpdateJSONBody

// TigrisDBDropCollectionJSONRequestBody defines body for TigrisDBDropCollection for application/json ContentType.
type TigrisDBDropCollectionJSONRequestBody TigrisDBDropCollectionJSONBody

// TigrisDBCreateDatabaseJSONRequestBody defines body for TigrisDBCreateDatabase for application/json ContentType.
type TigrisDBCreateDatabaseJSONRequestBody TigrisDBCreateDatabaseJSONBody

// TigrisDBDropDatabaseJSONRequestBody defines body for TigrisDBDropDatabase for application/json ContentType.
type TigrisDBDropDatabaseJSONRequestBody TigrisDBDropDatabaseJSONBody

// TigrisDBBeginTransactionJSONRequestBody defines body for TigrisDBBeginTransaction for application/json ContentType.
type TigrisDBBeginTransactionJSONRequestBody TigrisDBBeginTransactionJSONBody

// TigrisDBCommitTransactionJSONRequestBody defines body for TigrisDBCommitTransaction for application/json ContentType.
type TigrisDBCommitTransactionJSONRequestBody TigrisDBCommitTransactionJSONBody

// TigrisDBRollbackTransactionJSONRequestBody defines body for TigrisDBRollbackTransaction for application/json ContentType.
type TigrisDBRollbackTransactionJSONRequestBody TigrisDBRollbackTransactionJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// TigrisDBListDatabases request
	TigrisDBListDatabases(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBListCollections request with any body
	TigrisDBListCollectionsWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBListCollections(ctx context.Context, db string, body TigrisDBListCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBAlterCollection request with any body
	TigrisDBAlterCollectionWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBAlterCollection(ctx context.Context, db string, collection string, body TigrisDBAlterCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBCreateCollection request with any body
	TigrisDBCreateCollectionWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBCreateCollection(ctx context.Context, db string, collection string, body TigrisDBCreateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBDelete request with any body
	TigrisDBDeleteWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBDelete(ctx context.Context, db string, collection string, body TigrisDBDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBInsert request with any body
	TigrisDBInsertWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBInsert(ctx context.Context, db string, collection string, body TigrisDBInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBRead request with any body
	TigrisDBReadWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBRead(ctx context.Context, db string, collection string, body TigrisDBReadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBUpdate request with any body
	TigrisDBUpdateWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBUpdate(ctx context.Context, db string, collection string, body TigrisDBUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBDropCollection request with any body
	TigrisDBDropCollectionWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBDropCollection(ctx context.Context, db string, collection string, body TigrisDBDropCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBCreateDatabase request with any body
	TigrisDBCreateDatabaseWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBCreateDatabase(ctx context.Context, db string, body TigrisDBCreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBDropDatabase request with any body
	TigrisDBDropDatabaseWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBDropDatabase(ctx context.Context, db string, body TigrisDBDropDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBBeginTransaction request with any body
	TigrisDBBeginTransactionWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBBeginTransaction(ctx context.Context, db string, body TigrisDBBeginTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBCommitTransaction request with any body
	TigrisDBCommitTransactionWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBCommitTransaction(ctx context.Context, db string, body TigrisDBCommitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDBRollbackTransaction request with any body
	TigrisDBRollbackTransactionWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDBRollbackTransaction(ctx context.Context, db string, body TigrisDBRollbackTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) TigrisDBListDatabases(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBListDatabasesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBListCollectionsWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBListCollectionsRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBListCollections(ctx context.Context, db string, body TigrisDBListCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBListCollectionsRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBAlterCollectionWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBAlterCollectionRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBAlterCollection(ctx context.Context, db string, collection string, body TigrisDBAlterCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBAlterCollectionRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBCreateCollectionWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBCreateCollectionRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBCreateCollection(ctx context.Context, db string, collection string, body TigrisDBCreateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBCreateCollectionRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBDeleteWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBDeleteRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBDelete(ctx context.Context, db string, collection string, body TigrisDBDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBDeleteRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBInsertWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBInsertRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBInsert(ctx context.Context, db string, collection string, body TigrisDBInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBInsertRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBReadWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBReadRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBRead(ctx context.Context, db string, collection string, body TigrisDBReadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBReadRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBUpdateWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBUpdateRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBUpdate(ctx context.Context, db string, collection string, body TigrisDBUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBUpdateRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBDropCollectionWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBDropCollectionRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBDropCollection(ctx context.Context, db string, collection string, body TigrisDBDropCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBDropCollectionRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBCreateDatabaseWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBCreateDatabaseRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBCreateDatabase(ctx context.Context, db string, body TigrisDBCreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBCreateDatabaseRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBDropDatabaseWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBDropDatabaseRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBDropDatabase(ctx context.Context, db string, body TigrisDBDropDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBDropDatabaseRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBBeginTransactionWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBBeginTransactionRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBBeginTransaction(ctx context.Context, db string, body TigrisDBBeginTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBBeginTransactionRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBCommitTransactionWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBCommitTransactionRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBCommitTransaction(ctx context.Context, db string, body TigrisDBCommitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBCommitTransactionRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBRollbackTransactionWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBRollbackTransactionRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDBRollbackTransaction(ctx context.Context, db string, body TigrisDBRollbackTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDBRollbackTransactionRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewTigrisDBListDatabasesRequest generates requests for TigrisDBListDatabases
func NewTigrisDBListDatabasesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTigrisDBListCollectionsRequest calls the generic TigrisDBListCollections builder with application/json body
func NewTigrisDBListCollectionsRequest(server string, db string, body TigrisDBListCollectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBListCollectionsRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisDBListCollectionsRequestWithBody generates requests for TigrisDBListCollections with any type of body
func NewTigrisDBListCollectionsRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/list", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBAlterCollectionRequest calls the generic TigrisDBAlterCollection builder with application/json body
func NewTigrisDBAlterCollectionRequest(server string, db string, collection string, body TigrisDBAlterCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBAlterCollectionRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisDBAlterCollectionRequestWithBody generates requests for TigrisDBAlterCollection with any type of body
func NewTigrisDBAlterCollectionRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/alter", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBCreateCollectionRequest calls the generic TigrisDBCreateCollection builder with application/json body
func NewTigrisDBCreateCollectionRequest(server string, db string, collection string, body TigrisDBCreateCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBCreateCollectionRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisDBCreateCollectionRequestWithBody generates requests for TigrisDBCreateCollection with any type of body
func NewTigrisDBCreateCollectionRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/create", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBDeleteRequest calls the generic TigrisDBDelete builder with application/json body
func NewTigrisDBDeleteRequest(server string, db string, collection string, body TigrisDBDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBDeleteRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisDBDeleteRequestWithBody generates requests for TigrisDBDelete with any type of body
func NewTigrisDBDeleteRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/documents/delete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBInsertRequest calls the generic TigrisDBInsert builder with application/json body
func NewTigrisDBInsertRequest(server string, db string, collection string, body TigrisDBInsertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBInsertRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisDBInsertRequestWithBody generates requests for TigrisDBInsert with any type of body
func NewTigrisDBInsertRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/documents/insert", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBReadRequest calls the generic TigrisDBRead builder with application/json body
func NewTigrisDBReadRequest(server string, db string, collection string, body TigrisDBReadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBReadRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisDBReadRequestWithBody generates requests for TigrisDBRead with any type of body
func NewTigrisDBReadRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/documents/read", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBUpdateRequest calls the generic TigrisDBUpdate builder with application/json body
func NewTigrisDBUpdateRequest(server string, db string, collection string, body TigrisDBUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBUpdateRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisDBUpdateRequestWithBody generates requests for TigrisDBUpdate with any type of body
func NewTigrisDBUpdateRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/documents/update", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBDropCollectionRequest calls the generic TigrisDBDropCollection builder with application/json body
func NewTigrisDBDropCollectionRequest(server string, db string, collection string, body TigrisDBDropCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBDropCollectionRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisDBDropCollectionRequestWithBody generates requests for TigrisDBDropCollection with any type of body
func NewTigrisDBDropCollectionRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/drop", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBCreateDatabaseRequest calls the generic TigrisDBCreateDatabase builder with application/json body
func NewTigrisDBCreateDatabaseRequest(server string, db string, body TigrisDBCreateDatabaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBCreateDatabaseRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisDBCreateDatabaseRequestWithBody generates requests for TigrisDBCreateDatabase with any type of body
func NewTigrisDBCreateDatabaseRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/create", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBDropDatabaseRequest calls the generic TigrisDBDropDatabase builder with application/json body
func NewTigrisDBDropDatabaseRequest(server string, db string, body TigrisDBDropDatabaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBDropDatabaseRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisDBDropDatabaseRequestWithBody generates requests for TigrisDBDropDatabase with any type of body
func NewTigrisDBDropDatabaseRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/drop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBBeginTransactionRequest calls the generic TigrisDBBeginTransaction builder with application/json body
func NewTigrisDBBeginTransactionRequest(server string, db string, body TigrisDBBeginTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBBeginTransactionRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisDBBeginTransactionRequestWithBody generates requests for TigrisDBBeginTransaction with any type of body
func NewTigrisDBBeginTransactionRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/transactions/begin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBCommitTransactionRequest calls the generic TigrisDBCommitTransaction builder with application/json body
func NewTigrisDBCommitTransactionRequest(server string, db string, body TigrisDBCommitTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBCommitTransactionRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisDBCommitTransactionRequestWithBody generates requests for TigrisDBCommitTransaction with any type of body
func NewTigrisDBCommitTransactionRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/transactions/commit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDBRollbackTransactionRequest calls the generic TigrisDBRollbackTransaction builder with application/json body
func NewTigrisDBRollbackTransactionRequest(server string, db string, body TigrisDBRollbackTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDBRollbackTransactionRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisDBRollbackTransactionRequestWithBody generates requests for TigrisDBRollbackTransaction with any type of body
func NewTigrisDBRollbackTransactionRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/transactions/rollback", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// TigrisDBListDatabases request
	TigrisDBListDatabasesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TigrisDBListDatabasesResponse, error)

	// TigrisDBListCollections request with any body
	TigrisDBListCollectionsWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBListCollectionsResponse, error)

	TigrisDBListCollectionsWithResponse(ctx context.Context, db string, body TigrisDBListCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBListCollectionsResponse, error)

	// TigrisDBAlterCollection request with any body
	TigrisDBAlterCollectionWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBAlterCollectionResponse, error)

	TigrisDBAlterCollectionWithResponse(ctx context.Context, db string, collection string, body TigrisDBAlterCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBAlterCollectionResponse, error)

	// TigrisDBCreateCollection request with any body
	TigrisDBCreateCollectionWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBCreateCollectionResponse, error)

	TigrisDBCreateCollectionWithResponse(ctx context.Context, db string, collection string, body TigrisDBCreateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBCreateCollectionResponse, error)

	// TigrisDBDelete request with any body
	TigrisDBDeleteWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBDeleteResponse, error)

	TigrisDBDeleteWithResponse(ctx context.Context, db string, collection string, body TigrisDBDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBDeleteResponse, error)

	// TigrisDBInsert request with any body
	TigrisDBInsertWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBInsertResponse, error)

	TigrisDBInsertWithResponse(ctx context.Context, db string, collection string, body TigrisDBInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBInsertResponse, error)

	// TigrisDBRead request with any body
	TigrisDBReadWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBReadResponse, error)

	TigrisDBReadWithResponse(ctx context.Context, db string, collection string, body TigrisDBReadJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBReadResponse, error)

	// TigrisDBUpdate request with any body
	TigrisDBUpdateWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBUpdateResponse, error)

	TigrisDBUpdateWithResponse(ctx context.Context, db string, collection string, body TigrisDBUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBUpdateResponse, error)

	// TigrisDBDropCollection request with any body
	TigrisDBDropCollectionWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBDropCollectionResponse, error)

	TigrisDBDropCollectionWithResponse(ctx context.Context, db string, collection string, body TigrisDBDropCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBDropCollectionResponse, error)

	// TigrisDBCreateDatabase request with any body
	TigrisDBCreateDatabaseWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBCreateDatabaseResponse, error)

	TigrisDBCreateDatabaseWithResponse(ctx context.Context, db string, body TigrisDBCreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBCreateDatabaseResponse, error)

	// TigrisDBDropDatabase request with any body
	TigrisDBDropDatabaseWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBDropDatabaseResponse, error)

	TigrisDBDropDatabaseWithResponse(ctx context.Context, db string, body TigrisDBDropDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBDropDatabaseResponse, error)

	// TigrisDBBeginTransaction request with any body
	TigrisDBBeginTransactionWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBBeginTransactionResponse, error)

	TigrisDBBeginTransactionWithResponse(ctx context.Context, db string, body TigrisDBBeginTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBBeginTransactionResponse, error)

	// TigrisDBCommitTransaction request with any body
	TigrisDBCommitTransactionWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBCommitTransactionResponse, error)

	TigrisDBCommitTransactionWithResponse(ctx context.Context, db string, body TigrisDBCommitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBCommitTransactionResponse, error)

	// TigrisDBRollbackTransaction request with any body
	TigrisDBRollbackTransactionWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBRollbackTransactionResponse, error)

	TigrisDBRollbackTransactionWithResponse(ctx context.Context, db string, body TigrisDBRollbackTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBRollbackTransactionResponse, error)
}

type TigrisDBListDatabasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListDatabasesResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBListDatabasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBListDatabasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBListCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCollectionsResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBListCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBListCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBAlterCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlterCollectionResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBAlterCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBAlterCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBCreateCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateCollectionResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBCreateCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBCreateCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBInsertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsertResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBInsertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBInsertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReadResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBDropCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DropCollectionResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBDropCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBDropCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBCreateDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateDatabaseResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBCreateDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBCreateDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBDropDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DropDatabaseResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBDropDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBDropDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBBeginTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BeginTransactionResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBBeginTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBBeginTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBCommitTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommitTransactionResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBCommitTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBCommitTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDBRollbackTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RollbackTransactionResponse
}

// Status returns HTTPResponse.Status
func (r TigrisDBRollbackTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDBRollbackTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TigrisDBListDatabasesWithResponse request returning *TigrisDBListDatabasesResponse
func (c *ClientWithResponses) TigrisDBListDatabasesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TigrisDBListDatabasesResponse, error) {
	rsp, err := c.TigrisDBListDatabases(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBListDatabasesResponse(rsp)
}

// TigrisDBListCollectionsWithBodyWithResponse request with arbitrary body returning *TigrisDBListCollectionsResponse
func (c *ClientWithResponses) TigrisDBListCollectionsWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBListCollectionsResponse, error) {
	rsp, err := c.TigrisDBListCollectionsWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBListCollectionsResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBListCollectionsWithResponse(ctx context.Context, db string, body TigrisDBListCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBListCollectionsResponse, error) {
	rsp, err := c.TigrisDBListCollections(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBListCollectionsResponse(rsp)
}

// TigrisDBAlterCollectionWithBodyWithResponse request with arbitrary body returning *TigrisDBAlterCollectionResponse
func (c *ClientWithResponses) TigrisDBAlterCollectionWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBAlterCollectionResponse, error) {
	rsp, err := c.TigrisDBAlterCollectionWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBAlterCollectionResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBAlterCollectionWithResponse(ctx context.Context, db string, collection string, body TigrisDBAlterCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBAlterCollectionResponse, error) {
	rsp, err := c.TigrisDBAlterCollection(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBAlterCollectionResponse(rsp)
}

// TigrisDBCreateCollectionWithBodyWithResponse request with arbitrary body returning *TigrisDBCreateCollectionResponse
func (c *ClientWithResponses) TigrisDBCreateCollectionWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBCreateCollectionResponse, error) {
	rsp, err := c.TigrisDBCreateCollectionWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBCreateCollectionResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBCreateCollectionWithResponse(ctx context.Context, db string, collection string, body TigrisDBCreateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBCreateCollectionResponse, error) {
	rsp, err := c.TigrisDBCreateCollection(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBCreateCollectionResponse(rsp)
}

// TigrisDBDeleteWithBodyWithResponse request with arbitrary body returning *TigrisDBDeleteResponse
func (c *ClientWithResponses) TigrisDBDeleteWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBDeleteResponse, error) {
	rsp, err := c.TigrisDBDeleteWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBDeleteResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBDeleteWithResponse(ctx context.Context, db string, collection string, body TigrisDBDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBDeleteResponse, error) {
	rsp, err := c.TigrisDBDelete(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBDeleteResponse(rsp)
}

// TigrisDBInsertWithBodyWithResponse request with arbitrary body returning *TigrisDBInsertResponse
func (c *ClientWithResponses) TigrisDBInsertWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBInsertResponse, error) {
	rsp, err := c.TigrisDBInsertWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBInsertResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBInsertWithResponse(ctx context.Context, db string, collection string, body TigrisDBInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBInsertResponse, error) {
	rsp, err := c.TigrisDBInsert(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBInsertResponse(rsp)
}

// TigrisDBReadWithBodyWithResponse request with arbitrary body returning *TigrisDBReadResponse
func (c *ClientWithResponses) TigrisDBReadWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBReadResponse, error) {
	rsp, err := c.TigrisDBReadWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBReadResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBReadWithResponse(ctx context.Context, db string, collection string, body TigrisDBReadJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBReadResponse, error) {
	rsp, err := c.TigrisDBRead(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBReadResponse(rsp)
}

// TigrisDBUpdateWithBodyWithResponse request with arbitrary body returning *TigrisDBUpdateResponse
func (c *ClientWithResponses) TigrisDBUpdateWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBUpdateResponse, error) {
	rsp, err := c.TigrisDBUpdateWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBUpdateResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBUpdateWithResponse(ctx context.Context, db string, collection string, body TigrisDBUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBUpdateResponse, error) {
	rsp, err := c.TigrisDBUpdate(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBUpdateResponse(rsp)
}

// TigrisDBDropCollectionWithBodyWithResponse request with arbitrary body returning *TigrisDBDropCollectionResponse
func (c *ClientWithResponses) TigrisDBDropCollectionWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBDropCollectionResponse, error) {
	rsp, err := c.TigrisDBDropCollectionWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBDropCollectionResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBDropCollectionWithResponse(ctx context.Context, db string, collection string, body TigrisDBDropCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBDropCollectionResponse, error) {
	rsp, err := c.TigrisDBDropCollection(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBDropCollectionResponse(rsp)
}

// TigrisDBCreateDatabaseWithBodyWithResponse request with arbitrary body returning *TigrisDBCreateDatabaseResponse
func (c *ClientWithResponses) TigrisDBCreateDatabaseWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBCreateDatabaseResponse, error) {
	rsp, err := c.TigrisDBCreateDatabaseWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBCreateDatabaseResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBCreateDatabaseWithResponse(ctx context.Context, db string, body TigrisDBCreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBCreateDatabaseResponse, error) {
	rsp, err := c.TigrisDBCreateDatabase(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBCreateDatabaseResponse(rsp)
}

// TigrisDBDropDatabaseWithBodyWithResponse request with arbitrary body returning *TigrisDBDropDatabaseResponse
func (c *ClientWithResponses) TigrisDBDropDatabaseWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBDropDatabaseResponse, error) {
	rsp, err := c.TigrisDBDropDatabaseWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBDropDatabaseResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBDropDatabaseWithResponse(ctx context.Context, db string, body TigrisDBDropDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBDropDatabaseResponse, error) {
	rsp, err := c.TigrisDBDropDatabase(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBDropDatabaseResponse(rsp)
}

// TigrisDBBeginTransactionWithBodyWithResponse request with arbitrary body returning *TigrisDBBeginTransactionResponse
func (c *ClientWithResponses) TigrisDBBeginTransactionWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBBeginTransactionResponse, error) {
	rsp, err := c.TigrisDBBeginTransactionWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBBeginTransactionResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBBeginTransactionWithResponse(ctx context.Context, db string, body TigrisDBBeginTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBBeginTransactionResponse, error) {
	rsp, err := c.TigrisDBBeginTransaction(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBBeginTransactionResponse(rsp)
}

// TigrisDBCommitTransactionWithBodyWithResponse request with arbitrary body returning *TigrisDBCommitTransactionResponse
func (c *ClientWithResponses) TigrisDBCommitTransactionWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBCommitTransactionResponse, error) {
	rsp, err := c.TigrisDBCommitTransactionWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBCommitTransactionResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBCommitTransactionWithResponse(ctx context.Context, db string, body TigrisDBCommitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBCommitTransactionResponse, error) {
	rsp, err := c.TigrisDBCommitTransaction(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBCommitTransactionResponse(rsp)
}

// TigrisDBRollbackTransactionWithBodyWithResponse request with arbitrary body returning *TigrisDBRollbackTransactionResponse
func (c *ClientWithResponses) TigrisDBRollbackTransactionWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDBRollbackTransactionResponse, error) {
	rsp, err := c.TigrisDBRollbackTransactionWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBRollbackTransactionResponse(rsp)
}

func (c *ClientWithResponses) TigrisDBRollbackTransactionWithResponse(ctx context.Context, db string, body TigrisDBRollbackTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDBRollbackTransactionResponse, error) {
	rsp, err := c.TigrisDBRollbackTransaction(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDBRollbackTransactionResponse(rsp)
}

// ParseTigrisDBListDatabasesResponse parses an HTTP response from a TigrisDBListDatabasesWithResponse call
func ParseTigrisDBListDatabasesResponse(rsp *http.Response) (*TigrisDBListDatabasesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBListDatabasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListDatabasesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBListCollectionsResponse parses an HTTP response from a TigrisDBListCollectionsWithResponse call
func ParseTigrisDBListCollectionsResponse(rsp *http.Response) (*TigrisDBListCollectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBListCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCollectionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBAlterCollectionResponse parses an HTTP response from a TigrisDBAlterCollectionWithResponse call
func ParseTigrisDBAlterCollectionResponse(rsp *http.Response) (*TigrisDBAlterCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBAlterCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlterCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBCreateCollectionResponse parses an HTTP response from a TigrisDBCreateCollectionWithResponse call
func ParseTigrisDBCreateCollectionResponse(rsp *http.Response) (*TigrisDBCreateCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBCreateCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBDeleteResponse parses an HTTP response from a TigrisDBDeleteWithResponse call
func ParseTigrisDBDeleteResponse(rsp *http.Response) (*TigrisDBDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBInsertResponse parses an HTTP response from a TigrisDBInsertWithResponse call
func ParseTigrisDBInsertResponse(rsp *http.Response) (*TigrisDBInsertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBInsertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsertResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBReadResponse parses an HTTP response from a TigrisDBReadWithResponse call
func ParseTigrisDBReadResponse(rsp *http.Response) (*TigrisDBReadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBUpdateResponse parses an HTTP response from a TigrisDBUpdateWithResponse call
func ParseTigrisDBUpdateResponse(rsp *http.Response) (*TigrisDBUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBDropCollectionResponse parses an HTTP response from a TigrisDBDropCollectionWithResponse call
func ParseTigrisDBDropCollectionResponse(rsp *http.Response) (*TigrisDBDropCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBDropCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DropCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBCreateDatabaseResponse parses an HTTP response from a TigrisDBCreateDatabaseWithResponse call
func ParseTigrisDBCreateDatabaseResponse(rsp *http.Response) (*TigrisDBCreateDatabaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBCreateDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateDatabaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBDropDatabaseResponse parses an HTTP response from a TigrisDBDropDatabaseWithResponse call
func ParseTigrisDBDropDatabaseResponse(rsp *http.Response) (*TigrisDBDropDatabaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBDropDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DropDatabaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBBeginTransactionResponse parses an HTTP response from a TigrisDBBeginTransactionWithResponse call
func ParseTigrisDBBeginTransactionResponse(rsp *http.Response) (*TigrisDBBeginTransactionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBBeginTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BeginTransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBCommitTransactionResponse parses an HTTP response from a TigrisDBCommitTransactionWithResponse call
func ParseTigrisDBCommitTransactionResponse(rsp *http.Response) (*TigrisDBCommitTransactionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBCommitTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommitTransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTigrisDBRollbackTransactionResponse parses an HTTP response from a TigrisDBRollbackTransactionWithResponse call
func ParseTigrisDBRollbackTransactionResponse(rsp *http.Response) (*TigrisDBRollbackTransactionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDBRollbackTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RollbackTransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xb3XPbuBH/V3bYPmok36XTB70lcW/GvTbpJL7pQ53JgMRKQkICDADaVj3+32/wwW+Q",
	"omKJdubuyTIJYBe7v13sB/gQJSLLBUeuVbR+iFSyw4zYn69TjfKtSFNMNBP8A34rUGnzJpciR6kZ2nEi",
	"N6/tz79K3ETr6C+retGVX3FVr/TeT3hceHJmKkWVSGbfROvoo30OYgN6h0BFUmRmMWAc9I4pSKrFlvBx",
	"J4qUQozg+IJ/fnz/DkT8BRO9BL+S2nNN7sFRiZHCDiWu4eH6zeVjtIg2QmZER+voixI8WkR6n2O0jpSW",
	"jG+jx8fqiVvWsN4Tj8oFV9iXT6a25s+EJd/glvFrSbgiXZF3xKOJ1MDxDnQ92giHEk1iohBUjgnbMKQQ",
	"7+EmovFNFC2+T3ENhirNTeO+lkiI/SbrEnUhuWo9SwTXeK8B7nYs2UHB2bcC0z0wilybvSkLjsaU3g71",
	"/edE3x+xwbf6Pry5Pnp7u6qHgHSKU5AJyjZ7xrdQCvucLGYZ01Pg40a2hH3H9M6Kc8tukcPV5byM1kjp",
	"j5ZINP7ph4acRl8+T3dEbs1L70yeKvFynVHv0SX59E10yfaUWw4YN9f+upiiHhbKhpmDIUDNTmtgyLm1",
	"jOhkZyjWHtutsITrHfrfoBy2QsD6xY94ErAWk3XZ3PyoQoMje9K6k0zj54nE/2sGTyI64k8upcjP6k2C",
	"fHWIngDdUuSzGmib4NM3cMUVSj3IemUnfUt6LSXZG59c25IWwOx64244WkRMY+bs9JBF+AfEUDvCQlr7",
	"GpVocGRvt25U6aMG44isUPozF/oz3rPQmW+cSXvMAu52yEGhNuLTssAF5BJvrUDFLUpjm8Yzse7pVwUL",
	"imQIV5dAUomE7sGu6w5HbJyNtXRjIVIk3Oz+xJZfCnPE8v/FlK6NUM1k+j2qQ6ZTyyuAArNKGYY0Bpay",
	"LuP+JsAPAHqI19LGRzil8QEOS3Yq/jjJUOUkeSqDH5DQkZMXUxrkzES77q3PNFxeZDgzwHW/mQJVxMYc",
	"/C78jOv65+Ax3Dxh473GkD8ZCgw++Nyntq8qJrBMHRMOzBwNNNQxagOBcQExdMfYDJAw7nWEO3LLhJyQ",
	"U6VG4UM4sHAsshhl+wgJAsOsSrwLq4TGuP7732qpMa5xi9KKbbNROJivOwqG8ZIqKPtiI0XmdJ1LlhG5",
	"h6+4nwIp9ZXlfWrvArvTAsxgiHEjJDq6FmHCswUSVZHqJndq2qZPlxg6CAx6HZEEomqRAHOFgKYZSMwl",
	"KuR2P/7otJG19RATDMAooEfsV9wbYmbvkpPUaGkxUJ3Yt45MY7zWkq0XYQoKhRS0OKzjoJhEmsYk+Tol",
	"1S/HPluyH2R25JDurBmoXVifoEzYMVIYqldZXrtE3RWTWNvQrWFetwpRLswinKo6kCTK6MufZd7rNO3L",
	"+SSWWFdRZZOMg5AUpTWywk7O6uDI8eOPGhNIjRWyGA0emEKyLeMTA+5AHa8n3X9b3+rdUhMypfcNJcS/",
	"5ZSMJsThY/kXZw1JqVB/8nojqTB6S9ICy2yZo7Ubo5TCUqUH6i5TbH3oYHb7OnXGPvMR3VLO6CEdHHnu",
	"hL0kOuT0ZdLK1RjXr34OnEKhpVvEe8ptvq0CDbu5YyKNU/lJ84jxjbBrMp2ad9dsK5m6fAOv/3MVLaJb",
	"lMqxfrG8WP7kIICc5CxaR6+WF8tXhjuid5axFcnZ6vanVRWJr1KfFm5RDwTvvag9KaQ03q0ZvVcR0RVt",
	"8NhKHKJFJL1CLS8/X1y4/IZr5JY4yfPUe8uVxXfVeTokynCGYuXX3tH7X52cyVZF6/9VjEafzNO+dB5o",
	"/LhqJFaVuHKhhuQVyMNql9DIyIZF1sgLrfKkOQZQGo4PUKwq0M3Mz4wzCIgWkVFZtI5obJXxrWASabS2",
	"SX5D0t1T45MbjEq/EXR/UqUFEm+rtTZzj2eGTigRPwN4Hup/HlekPF3CUHq7I3yLDj1Vt8EWUozjaRVR",
	"wkDqNCIPAamqehuI9EsKJ8HRYqQ3ZslqAYnbt18kSLXF1bOjeKAfPjOKh9rO50ZxYvszIzC2721PuuGl",
	"Wjno8T6y29s6Dtt3JqKyUHO8PQfIndR+AHQPtVlnhvdgN/Pc+K5guqK2h+QQXv8abeX5Ak4TYkCSREjq",
	"ayzdVGEQ8W7p78S5a4G06jczwPxI8i8L9u1m7sxg73Qr54O409SwM/c9J+e9lHXqPTfe9PISJOYpSVBV",
	"kcsNb07Z2N7TO6H/YTtELp0CpmrDGLQIx8ufFjGXRbT7sjNbRKeLN59FSCR02B4+IKEgbbzaimgO+f0b",
	"Dp2Q54D7N4SOg7ot4BPaYWq2AGcy7ZcF8mYfcWaIt5oc8wHclUstxAs9WOsMYLzv7jsIDwEcCKfNHmou",
	"xZcDaazj4Dv9fNEp1c7s56eRf1km0K7az2wEnbLv2c1Ainw0oJci79dBBiL01lWuH6XaQrXIf4h4PHg7",
	"b+64PHxb71QonVZJqa7yH12Mb1+lPYTQLjnfeGPKUnrJZeXwLeVnKVj0LkaeCCuTHFelOjdKAUnTQxfF",
	"bjiQVPCtU7eZwNp5yrDzmwqsNm9tWC3hcjqvS/itXCAhhe3pv2RYhm7mPoMDOxckG7cC1CpGf/8g7Mrs",
	"9QoFpPepkgkPy29+SPMNScvO/Q2H12lqEwy1so1ZBTnKjZAZUosGxttz4Y6ZCYW74HLDQaFkJGX/J3GK",
	"wJRISQmeMLq7XzAdmYkZcLfvTBgLU+6ez4uF69BHZzNDdvDrsXPANrFfII0cwf0PpIgWGUtImu7Bza49",
	"l21kqRvegGf4lk/zVpKHd2MBv65GCkICF7yMF7PGG8Z9xpUY3IkNoJRCDkO6963VHwLTg5/CzR0cDH7p",
	"dg5US3/VbqSOFboNSJlKiKRqCqDbd9QGalj9G39/CNCNXMucu8Q0cufyOODVjx9KYVevHz89/h4AAP//",
	"9x0vbT4+AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
