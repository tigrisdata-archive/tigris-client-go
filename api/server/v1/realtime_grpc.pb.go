// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: server/v1/realtime.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RealtimeClient is the client API for Realtime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RealtimeClient interface {
	Presence(ctx context.Context, in *PresenceRequest, opts ...grpc.CallOption) (*PresenceResponse, error)
	GetRTChannel(ctx context.Context, in *GetRTChannelRequest, opts ...grpc.CallOption) (*GetRTChannelResponse, error)
	GetRTChannels(ctx context.Context, in *GetRTChannelsRequest, opts ...grpc.CallOption) (*GetRTChannelsResponse, error)
	ReadMessages(ctx context.Context, in *ReadMessagesRequest, opts ...grpc.CallOption) (Realtime_ReadMessagesClient, error)
	Messages(ctx context.Context, in *MessagesRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
	ListSubscriptions(ctx context.Context, in *ListSubscriptionRequest, opts ...grpc.CallOption) (*ListSubscriptionResponse, error)
}

type realtimeClient struct {
	cc grpc.ClientConnInterface
}

func NewRealtimeClient(cc grpc.ClientConnInterface) RealtimeClient {
	return &realtimeClient{cc}
}

func (c *realtimeClient) Presence(ctx context.Context, in *PresenceRequest, opts ...grpc.CallOption) (*PresenceResponse, error) {
	out := new(PresenceResponse)
	err := c.cc.Invoke(ctx, "/tigrisdata.realtime.v1.Realtime/Presence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeClient) GetRTChannel(ctx context.Context, in *GetRTChannelRequest, opts ...grpc.CallOption) (*GetRTChannelResponse, error) {
	out := new(GetRTChannelResponse)
	err := c.cc.Invoke(ctx, "/tigrisdata.realtime.v1.Realtime/GetRTChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeClient) GetRTChannels(ctx context.Context, in *GetRTChannelsRequest, opts ...grpc.CallOption) (*GetRTChannelsResponse, error) {
	out := new(GetRTChannelsResponse)
	err := c.cc.Invoke(ctx, "/tigrisdata.realtime.v1.Realtime/GetRTChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeClient) ReadMessages(ctx context.Context, in *ReadMessagesRequest, opts ...grpc.CallOption) (Realtime_ReadMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Realtime_ServiceDesc.Streams[0], "/tigrisdata.realtime.v1.Realtime/ReadMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &realtimeReadMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Realtime_ReadMessagesClient interface {
	Recv() (*ReadMessagesResponse, error)
	grpc.ClientStream
}

type realtimeReadMessagesClient struct {
	grpc.ClientStream
}

func (x *realtimeReadMessagesClient) Recv() (*ReadMessagesResponse, error) {
	m := new(ReadMessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *realtimeClient) Messages(ctx context.Context, in *MessagesRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, "/tigrisdata.realtime.v1.Realtime/Messages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeClient) ListSubscriptions(ctx context.Context, in *ListSubscriptionRequest, opts ...grpc.CallOption) (*ListSubscriptionResponse, error) {
	out := new(ListSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/tigrisdata.realtime.v1.Realtime/ListSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RealtimeServer is the server API for Realtime service.
// All implementations should embed UnimplementedRealtimeServer
// for forward compatibility
type RealtimeServer interface {
	Presence(context.Context, *PresenceRequest) (*PresenceResponse, error)
	GetRTChannel(context.Context, *GetRTChannelRequest) (*GetRTChannelResponse, error)
	GetRTChannels(context.Context, *GetRTChannelsRequest) (*GetRTChannelsResponse, error)
	ReadMessages(*ReadMessagesRequest, Realtime_ReadMessagesServer) error
	Messages(context.Context, *MessagesRequest) (*MessagesResponse, error)
	ListSubscriptions(context.Context, *ListSubscriptionRequest) (*ListSubscriptionResponse, error)
}

// UnimplementedRealtimeServer should be embedded to have forward compatible implementations.
type UnimplementedRealtimeServer struct {
}

func (UnimplementedRealtimeServer) Presence(context.Context, *PresenceRequest) (*PresenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Presence not implemented")
}
func (UnimplementedRealtimeServer) GetRTChannel(context.Context, *GetRTChannelRequest) (*GetRTChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRTChannel not implemented")
}
func (UnimplementedRealtimeServer) GetRTChannels(context.Context, *GetRTChannelsRequest) (*GetRTChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRTChannels not implemented")
}
func (UnimplementedRealtimeServer) ReadMessages(*ReadMessagesRequest, Realtime_ReadMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadMessages not implemented")
}
func (UnimplementedRealtimeServer) Messages(context.Context, *MessagesRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Messages not implemented")
}
func (UnimplementedRealtimeServer) ListSubscriptions(context.Context, *ListSubscriptionRequest) (*ListSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}

// UnsafeRealtimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RealtimeServer will
// result in compilation errors.
type UnsafeRealtimeServer interface {
	mustEmbedUnimplementedRealtimeServer()
}

func RegisterRealtimeServer(s grpc.ServiceRegistrar, srv RealtimeServer) {
	s.RegisterService(&Realtime_ServiceDesc, srv)
}

func _Realtime_Presence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServer).Presence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tigrisdata.realtime.v1.Realtime/Presence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServer).Presence(ctx, req.(*PresenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Realtime_GetRTChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRTChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServer).GetRTChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tigrisdata.realtime.v1.Realtime/GetRTChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServer).GetRTChannel(ctx, req.(*GetRTChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Realtime_GetRTChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRTChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServer).GetRTChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tigrisdata.realtime.v1.Realtime/GetRTChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServer).GetRTChannels(ctx, req.(*GetRTChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Realtime_ReadMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RealtimeServer).ReadMessages(m, &realtimeReadMessagesServer{stream})
}

type Realtime_ReadMessagesServer interface {
	Send(*ReadMessagesResponse) error
	grpc.ServerStream
}

type realtimeReadMessagesServer struct {
	grpc.ServerStream
}

func (x *realtimeReadMessagesServer) Send(m *ReadMessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Realtime_Messages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServer).Messages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tigrisdata.realtime.v1.Realtime/Messages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServer).Messages(ctx, req.(*MessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Realtime_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tigrisdata.realtime.v1.Realtime/ListSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServer).ListSubscriptions(ctx, req.(*ListSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Realtime_ServiceDesc is the grpc.ServiceDesc for Realtime service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Realtime_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tigrisdata.realtime.v1.Realtime",
	HandlerType: (*RealtimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Presence",
			Handler:    _Realtime_Presence_Handler,
		},
		{
			MethodName: "GetRTChannel",
			Handler:    _Realtime_GetRTChannel_Handler,
		},
		{
			MethodName: "GetRTChannels",
			Handler:    _Realtime_GetRTChannels_Handler,
		},
		{
			MethodName: "Messages",
			Handler:    _Realtime_Messages_Handler,
		},
		{
			MethodName: "ListSubscriptions",
			Handler:    _Realtime_ListSubscriptions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadMessages",
			Handler:       _Realtime_ReadMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server/v1/realtime.proto",
}
