// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tigrisdata/tigris-client-go/driver (interfaces: Driver,Tx,Database,Iterator,SearchResultIterator,SearchClient,SearchIndexResultIterator)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/tigrisdata/tigris-client-go/api/server/v1"
	driver "github.com/tigrisdata/tigris-client-go/driver"
)

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDriver) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDriverMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDriver)(nil).Close))
}

// CreateAppKey mocks base method.
func (m *MockDriver) CreateAppKey(arg0 context.Context, arg1, arg2, arg3 string) (*driver.AppKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppKey", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*driver.AppKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppKey indicates an expected call of CreateAppKey.
func (mr *MockDriverMockRecorder) CreateAppKey(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppKey", reflect.TypeOf((*MockDriver)(nil).CreateAppKey), arg0, arg1, arg2, arg3)
}

// CreateGlobalAppKey mocks base method.
func (m *MockDriver) CreateGlobalAppKey(arg0 context.Context, arg1, arg2 string) (*driver.GlobalAppKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGlobalAppKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(*driver.GlobalAppKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGlobalAppKey indicates an expected call of CreateGlobalAppKey.
func (mr *MockDriverMockRecorder) CreateGlobalAppKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGlobalAppKey", reflect.TypeOf((*MockDriver)(nil).CreateGlobalAppKey), arg0, arg1, arg2)
}

// CreateProject mocks base method.
func (m *MockDriver) CreateProject(arg0 context.Context, arg1 string, arg2 ...*driver.CreateProjectOptions) (*driver.CreateProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProject", varargs...)
	ret0, _ := ret[0].(*driver.CreateProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockDriverMockRecorder) CreateProject(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockDriver)(nil).CreateProject), varargs...)
}

// DeleteAppKey mocks base method.
func (m *MockDriver) DeleteAppKey(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAppKey indicates an expected call of DeleteAppKey.
func (mr *MockDriverMockRecorder) DeleteAppKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppKey", reflect.TypeOf((*MockDriver)(nil).DeleteAppKey), arg0, arg1, arg2)
}

// DeleteGlobalAppKey mocks base method.
func (m *MockDriver) DeleteGlobalAppKey(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGlobalAppKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGlobalAppKey indicates an expected call of DeleteGlobalAppKey.
func (mr *MockDriverMockRecorder) DeleteGlobalAppKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGlobalAppKey", reflect.TypeOf((*MockDriver)(nil).DeleteGlobalAppKey), arg0, arg1)
}

// DeleteProject mocks base method.
func (m *MockDriver) DeleteProject(arg0 context.Context, arg1 string, arg2 ...*driver.DeleteProjectOptions) (*driver.DeleteProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProject", varargs...)
	ret0, _ := ret[0].(*driver.DeleteProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockDriverMockRecorder) DeleteProject(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockDriver)(nil).DeleteProject), varargs...)
}

// DescribeDatabase mocks base method.
func (m *MockDriver) DescribeDatabase(arg0 context.Context, arg1 string, arg2 ...*driver.DescribeProjectOptions) (*driver.DescribeDatabaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDatabase", varargs...)
	ret0, _ := ret[0].(*driver.DescribeDatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatabase indicates an expected call of DescribeDatabase.
func (mr *MockDriverMockRecorder) DescribeDatabase(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatabase", reflect.TypeOf((*MockDriver)(nil).DescribeDatabase), varargs...)
}

// Health mocks base method.
func (m *MockDriver) Health(arg0 context.Context) (*driver.HealthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", arg0)
	ret0, _ := ret[0].(*driver.HealthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockDriverMockRecorder) Health(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockDriver)(nil).Health), arg0)
}

// Info mocks base method.
func (m *MockDriver) Info(arg0 context.Context) (*driver.InfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0)
	ret0, _ := ret[0].(*driver.InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockDriverMockRecorder) Info(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockDriver)(nil).Info), arg0)
}

// ListAppKeys mocks base method.
func (m *MockDriver) ListAppKeys(arg0 context.Context, arg1 string) ([]*driver.AppKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppKeys", arg0, arg1)
	ret0, _ := ret[0].([]*driver.AppKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppKeys indicates an expected call of ListAppKeys.
func (mr *MockDriverMockRecorder) ListAppKeys(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppKeys", reflect.TypeOf((*MockDriver)(nil).ListAppKeys), arg0, arg1)
}

// ListGlobalAppKeys mocks base method.
func (m *MockDriver) ListGlobalAppKeys(arg0 context.Context) ([]*driver.GlobalAppKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGlobalAppKeys", arg0)
	ret0, _ := ret[0].([]*driver.GlobalAppKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGlobalAppKeys indicates an expected call of ListGlobalAppKeys.
func (mr *MockDriverMockRecorder) ListGlobalAppKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGlobalAppKeys", reflect.TypeOf((*MockDriver)(nil).ListGlobalAppKeys), arg0)
}

// ListProjects mocks base method.
func (m *MockDriver) ListProjects(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockDriverMockRecorder) ListProjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockDriver)(nil).ListProjects), arg0)
}

// RotateAppKeySecret mocks base method.
func (m *MockDriver) RotateAppKeySecret(arg0 context.Context, arg1, arg2 string) (*driver.AppKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateAppKeySecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(*driver.AppKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RotateAppKeySecret indicates an expected call of RotateAppKeySecret.
func (mr *MockDriverMockRecorder) RotateAppKeySecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateAppKeySecret", reflect.TypeOf((*MockDriver)(nil).RotateAppKeySecret), arg0, arg1, arg2)
}

// RotateGlobalAppKeySecret mocks base method.
func (m *MockDriver) RotateGlobalAppKeySecret(arg0 context.Context, arg1 string) (*driver.GlobalAppKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateGlobalAppKeySecret", arg0, arg1)
	ret0, _ := ret[0].(*driver.GlobalAppKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RotateGlobalAppKeySecret indicates an expected call of RotateGlobalAppKeySecret.
func (mr *MockDriverMockRecorder) RotateGlobalAppKeySecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateGlobalAppKeySecret", reflect.TypeOf((*MockDriver)(nil).RotateGlobalAppKeySecret), arg0, arg1)
}

// UpdateAppKey mocks base method.
func (m *MockDriver) UpdateAppKey(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*driver.AppKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppKey", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*driver.AppKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppKey indicates an expected call of UpdateAppKey.
func (mr *MockDriverMockRecorder) UpdateAppKey(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppKey", reflect.TypeOf((*MockDriver)(nil).UpdateAppKey), arg0, arg1, arg2, arg3, arg4)
}

// UpdateGlobalAppKey mocks base method.
func (m *MockDriver) UpdateGlobalAppKey(arg0 context.Context, arg1, arg2, arg3 string) (*driver.GlobalAppKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalAppKey", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*driver.GlobalAppKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalAppKey indicates an expected call of UpdateGlobalAppKey.
func (mr *MockDriverMockRecorder) UpdateGlobalAppKey(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalAppKey", reflect.TypeOf((*MockDriver)(nil).UpdateGlobalAppKey), arg0, arg1, arg2, arg3)
}

// UseDatabase mocks base method.
func (m *MockDriver) UseDatabase(arg0 string) driver.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseDatabase", arg0)
	ret0, _ := ret[0].(driver.Database)
	return ret0
}

// UseDatabase indicates an expected call of UseDatabase.
func (mr *MockDriverMockRecorder) UseDatabase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseDatabase", reflect.TypeOf((*MockDriver)(nil).UseDatabase), arg0)
}

// UseSearch mocks base method.
func (m *MockDriver) UseSearch(arg0 string) driver.SearchClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseSearch", arg0)
	ret0, _ := ret[0].(driver.SearchClient)
	return ret0
}

// UseSearch indicates an expected call of UseSearch.
func (mr *MockDriverMockRecorder) UseSearch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseSearch", reflect.TypeOf((*MockDriver)(nil).UseSearch), arg0)
}

// MockTx is a mock of Tx interface.
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
}

// MockTxMockRecorder is the mock recorder for MockTx.
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance.
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockTx) BeginTx(arg0 context.Context, arg1 ...*driver.TxOptions) (driver.Tx, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BeginTx", varargs...)
	ret0, _ := ret[0].(driver.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockTxMockRecorder) BeginTx(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockTx)(nil).BeginTx), varargs...)
}

// Commit mocks base method.
func (m *MockTx) Commit(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTx)(nil).Commit), arg0)
}

// Count mocks base method.
func (m *MockTx) Count(arg0 context.Context, arg1 string, arg2 driver.Filter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockTxMockRecorder) Count(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockTx)(nil).Count), arg0, arg1, arg2)
}

// CreateBranch mocks base method.
func (m *MockTx) CreateBranch(arg0 context.Context, arg1 string) (*driver.CreateBranchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", arg0, arg1)
	ret0, _ := ret[0].(*driver.CreateBranchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranch indicates an expected call of CreateBranch.
func (mr *MockTxMockRecorder) CreateBranch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockTx)(nil).CreateBranch), arg0, arg1)
}

// CreateOrUpdateCollection mocks base method.
func (m *MockTx) CreateOrUpdateCollection(arg0 context.Context, arg1 string, arg2 driver.Schema, arg3 ...*driver.CreateCollectionOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrUpdateCollection", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateCollection indicates an expected call of CreateOrUpdateCollection.
func (mr *MockTxMockRecorder) CreateOrUpdateCollection(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateCollection", reflect.TypeOf((*MockTx)(nil).CreateOrUpdateCollection), varargs...)
}

// CreateOrUpdateCollections mocks base method.
func (m *MockTx) CreateOrUpdateCollections(arg0 context.Context, arg1 []driver.Schema, arg2 ...*driver.CreateCollectionOptions) (*driver.CreateOrUpdateCollectionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrUpdateCollections", varargs...)
	ret0, _ := ret[0].(*driver.CreateOrUpdateCollectionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateCollections indicates an expected call of CreateOrUpdateCollections.
func (mr *MockTxMockRecorder) CreateOrUpdateCollections(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateCollections", reflect.TypeOf((*MockTx)(nil).CreateOrUpdateCollections), varargs...)
}

// Delete mocks base method.
func (m *MockTx) Delete(arg0 context.Context, arg1 string, arg2 driver.Filter, arg3 ...*driver.DeleteOptions) (*driver.DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*driver.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockTxMockRecorder) Delete(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTx)(nil).Delete), varargs...)
}

// DeleteBranch mocks base method.
func (m *MockTx) DeleteBranch(arg0 context.Context, arg1 string) (*driver.DeleteBranchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranch", arg0, arg1)
	ret0, _ := ret[0].(*driver.DeleteBranchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBranch indicates an expected call of DeleteBranch.
func (mr *MockTxMockRecorder) DeleteBranch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranch", reflect.TypeOf((*MockTx)(nil).DeleteBranch), arg0, arg1)
}

// DescribeCollection mocks base method.
func (m *MockTx) DescribeCollection(arg0 context.Context, arg1 string, arg2 ...*driver.DescribeCollectionOptions) (*driver.DescribeCollectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCollection", varargs...)
	ret0, _ := ret[0].(*driver.DescribeCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCollection indicates an expected call of DescribeCollection.
func (mr *MockTxMockRecorder) DescribeCollection(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCollection", reflect.TypeOf((*MockTx)(nil).DescribeCollection), varargs...)
}

// DropAllCollections mocks base method.
func (m *MockTx) DropAllCollections(arg0 context.Context, arg1 ...*driver.CollectionOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropAllCollections", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropAllCollections indicates an expected call of DropAllCollections.
func (mr *MockTxMockRecorder) DropAllCollections(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropAllCollections", reflect.TypeOf((*MockTx)(nil).DropAllCollections), varargs...)
}

// DropCollection mocks base method.
func (m *MockTx) DropCollection(arg0 context.Context, arg1 string, arg2 ...*driver.CollectionOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropCollection", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropCollection indicates an expected call of DropCollection.
func (mr *MockTxMockRecorder) DropCollection(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropCollection", reflect.TypeOf((*MockTx)(nil).DropCollection), varargs...)
}

// Explain mocks base method.
func (m *MockTx) Explain(arg0 context.Context, arg1 string, arg2 driver.Filter, arg3 driver.Projection, arg4 ...*driver.ReadOptions) (*driver.ExplainResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Explain", varargs...)
	ret0, _ := ret[0].(*driver.ExplainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Explain indicates an expected call of Explain.
func (mr *MockTxMockRecorder) Explain(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Explain", reflect.TypeOf((*MockTx)(nil).Explain), varargs...)
}

// Insert mocks base method.
func (m *MockTx) Insert(arg0 context.Context, arg1 string, arg2 []driver.Document, arg3 ...*driver.InsertOptions) (*driver.InsertResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(*driver.InsertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockTxMockRecorder) Insert(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTx)(nil).Insert), varargs...)
}

// ListCollections mocks base method.
func (m *MockTx) ListCollections(arg0 context.Context, arg1 ...*driver.CollectionOptions) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCollections", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollections indicates an expected call of ListCollections.
func (mr *MockTxMockRecorder) ListCollections(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollections", reflect.TypeOf((*MockTx)(nil).ListCollections), varargs...)
}

// Read mocks base method.
func (m *MockTx) Read(arg0 context.Context, arg1 string, arg2 driver.Filter, arg3 driver.Projection, arg4 ...*driver.ReadOptions) (driver.Iterator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(driver.Iterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTxMockRecorder) Read(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTx)(nil).Read), varargs...)
}

// Replace mocks base method.
func (m *MockTx) Replace(arg0 context.Context, arg1 string, arg2 []driver.Document, arg3 ...*driver.ReplaceOptions) (*driver.ReplaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Replace", varargs...)
	ret0, _ := ret[0].(*driver.ReplaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Replace indicates an expected call of Replace.
func (mr *MockTxMockRecorder) Replace(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockTx)(nil).Replace), varargs...)
}

// Rollback mocks base method.
func (m *MockTx) Rollback(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTxMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTx)(nil).Rollback), arg0)
}

// Search mocks base method.
func (m *MockTx) Search(arg0 context.Context, arg1 string, arg2 *driver.SearchRequest) (driver.SearchResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1, arg2)
	ret0, _ := ret[0].(driver.SearchResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockTxMockRecorder) Search(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockTx)(nil).Search), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockTx) Update(arg0 context.Context, arg1 string, arg2 driver.Filter, arg3 driver.Update, arg4 ...*driver.UpdateOptions) (*driver.UpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*driver.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTxMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTx)(nil).Update), varargs...)
}

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockDatabase) BeginTx(arg0 context.Context, arg1 ...*driver.TxOptions) (driver.Tx, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BeginTx", varargs...)
	ret0, _ := ret[0].(driver.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockDatabaseMockRecorder) BeginTx(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockDatabase)(nil).BeginTx), varargs...)
}

// Count mocks base method.
func (m *MockDatabase) Count(arg0 context.Context, arg1 string, arg2 driver.Filter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockDatabaseMockRecorder) Count(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockDatabase)(nil).Count), arg0, arg1, arg2)
}

// CreateBranch mocks base method.
func (m *MockDatabase) CreateBranch(arg0 context.Context, arg1 string) (*driver.CreateBranchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", arg0, arg1)
	ret0, _ := ret[0].(*driver.CreateBranchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranch indicates an expected call of CreateBranch.
func (mr *MockDatabaseMockRecorder) CreateBranch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockDatabase)(nil).CreateBranch), arg0, arg1)
}

// CreateOrUpdateCollection mocks base method.
func (m *MockDatabase) CreateOrUpdateCollection(arg0 context.Context, arg1 string, arg2 driver.Schema, arg3 ...*driver.CreateCollectionOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrUpdateCollection", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateCollection indicates an expected call of CreateOrUpdateCollection.
func (mr *MockDatabaseMockRecorder) CreateOrUpdateCollection(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateCollection", reflect.TypeOf((*MockDatabase)(nil).CreateOrUpdateCollection), varargs...)
}

// CreateOrUpdateCollections mocks base method.
func (m *MockDatabase) CreateOrUpdateCollections(arg0 context.Context, arg1 []driver.Schema, arg2 ...*driver.CreateCollectionOptions) (*driver.CreateOrUpdateCollectionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrUpdateCollections", varargs...)
	ret0, _ := ret[0].(*driver.CreateOrUpdateCollectionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateCollections indicates an expected call of CreateOrUpdateCollections.
func (mr *MockDatabaseMockRecorder) CreateOrUpdateCollections(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateCollections", reflect.TypeOf((*MockDatabase)(nil).CreateOrUpdateCollections), varargs...)
}

// Delete mocks base method.
func (m *MockDatabase) Delete(arg0 context.Context, arg1 string, arg2 driver.Filter, arg3 ...*driver.DeleteOptions) (*driver.DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*driver.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDatabaseMockRecorder) Delete(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDatabase)(nil).Delete), varargs...)
}

// DeleteBranch mocks base method.
func (m *MockDatabase) DeleteBranch(arg0 context.Context, arg1 string) (*driver.DeleteBranchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranch", arg0, arg1)
	ret0, _ := ret[0].(*driver.DeleteBranchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBranch indicates an expected call of DeleteBranch.
func (mr *MockDatabaseMockRecorder) DeleteBranch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranch", reflect.TypeOf((*MockDatabase)(nil).DeleteBranch), arg0, arg1)
}

// DescribeCollection mocks base method.
func (m *MockDatabase) DescribeCollection(arg0 context.Context, arg1 string, arg2 ...*driver.DescribeCollectionOptions) (*driver.DescribeCollectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCollection", varargs...)
	ret0, _ := ret[0].(*driver.DescribeCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCollection indicates an expected call of DescribeCollection.
func (mr *MockDatabaseMockRecorder) DescribeCollection(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCollection", reflect.TypeOf((*MockDatabase)(nil).DescribeCollection), varargs...)
}

// DropAllCollections mocks base method.
func (m *MockDatabase) DropAllCollections(arg0 context.Context, arg1 ...*driver.CollectionOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropAllCollections", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropAllCollections indicates an expected call of DropAllCollections.
func (mr *MockDatabaseMockRecorder) DropAllCollections(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropAllCollections", reflect.TypeOf((*MockDatabase)(nil).DropAllCollections), varargs...)
}

// DropCollection mocks base method.
func (m *MockDatabase) DropCollection(arg0 context.Context, arg1 string, arg2 ...*driver.CollectionOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropCollection", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropCollection indicates an expected call of DropCollection.
func (mr *MockDatabaseMockRecorder) DropCollection(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropCollection", reflect.TypeOf((*MockDatabase)(nil).DropCollection), varargs...)
}

// Explain mocks base method.
func (m *MockDatabase) Explain(arg0 context.Context, arg1 string, arg2 driver.Filter, arg3 driver.Projection, arg4 ...*driver.ReadOptions) (*driver.ExplainResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Explain", varargs...)
	ret0, _ := ret[0].(*driver.ExplainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Explain indicates an expected call of Explain.
func (mr *MockDatabaseMockRecorder) Explain(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Explain", reflect.TypeOf((*MockDatabase)(nil).Explain), varargs...)
}

// Insert mocks base method.
func (m *MockDatabase) Insert(arg0 context.Context, arg1 string, arg2 []driver.Document, arg3 ...*driver.InsertOptions) (*driver.InsertResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(*driver.InsertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockDatabaseMockRecorder) Insert(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDatabase)(nil).Insert), varargs...)
}

// ListCollections mocks base method.
func (m *MockDatabase) ListCollections(arg0 context.Context, arg1 ...*driver.CollectionOptions) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCollections", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollections indicates an expected call of ListCollections.
func (mr *MockDatabaseMockRecorder) ListCollections(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollections", reflect.TypeOf((*MockDatabase)(nil).ListCollections), varargs...)
}

// Read mocks base method.
func (m *MockDatabase) Read(arg0 context.Context, arg1 string, arg2 driver.Filter, arg3 driver.Projection, arg4 ...*driver.ReadOptions) (driver.Iterator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(driver.Iterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockDatabaseMockRecorder) Read(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDatabase)(nil).Read), varargs...)
}

// Replace mocks base method.
func (m *MockDatabase) Replace(arg0 context.Context, arg1 string, arg2 []driver.Document, arg3 ...*driver.ReplaceOptions) (*driver.ReplaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Replace", varargs...)
	ret0, _ := ret[0].(*driver.ReplaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Replace indicates an expected call of Replace.
func (mr *MockDatabaseMockRecorder) Replace(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockDatabase)(nil).Replace), varargs...)
}

// Search mocks base method.
func (m *MockDatabase) Search(arg0 context.Context, arg1 string, arg2 *driver.SearchRequest) (driver.SearchResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1, arg2)
	ret0, _ := ret[0].(driver.SearchResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockDatabaseMockRecorder) Search(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDatabase)(nil).Search), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockDatabase) Update(arg0 context.Context, arg1 string, arg2 driver.Filter, arg3 driver.Update, arg4 ...*driver.UpdateOptions) (*driver.UpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*driver.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDatabaseMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDatabase)(nil).Update), varargs...)
}

// MockIterator is a mock of Iterator interface.
type MockIterator struct {
	ctrl     *gomock.Controller
	recorder *MockIteratorMockRecorder
}

// MockIteratorMockRecorder is the mock recorder for MockIterator.
type MockIteratorMockRecorder struct {
	mock *MockIterator
}

// NewMockIterator creates a new mock instance.
func NewMockIterator(ctrl *gomock.Controller) *MockIterator {
	mock := &MockIterator{ctrl: ctrl}
	mock.recorder = &MockIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIterator) EXPECT() *MockIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIterator)(nil).Close))
}

// Err mocks base method.
func (m *MockIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockIterator)(nil).Err))
}

// Next mocks base method.
func (m *MockIterator) Next(arg0 *driver.Document) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockIteratorMockRecorder) Next(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockIterator)(nil).Next), arg0)
}

// MockSearchResultIterator is a mock of SearchResultIterator interface.
type MockSearchResultIterator struct {
	ctrl     *gomock.Controller
	recorder *MockSearchResultIteratorMockRecorder
}

// MockSearchResultIteratorMockRecorder is the mock recorder for MockSearchResultIterator.
type MockSearchResultIteratorMockRecorder struct {
	mock *MockSearchResultIterator
}

// NewMockSearchResultIterator creates a new mock instance.
func NewMockSearchResultIterator(ctrl *gomock.Controller) *MockSearchResultIterator {
	mock := &MockSearchResultIterator{ctrl: ctrl}
	mock.recorder = &MockSearchResultIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchResultIterator) EXPECT() *MockSearchResultIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSearchResultIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockSearchResultIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSearchResultIterator)(nil).Close))
}

// Err mocks base method.
func (m *MockSearchResultIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockSearchResultIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockSearchResultIterator)(nil).Err))
}

// Next mocks base method.
func (m *MockSearchResultIterator) Next(arg0 *driver.SearchResponse) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockSearchResultIteratorMockRecorder) Next(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSearchResultIterator)(nil).Next), arg0)
}

// MockSearchClient is a mock of SearchClient interface.
type MockSearchClient struct {
	ctrl     *gomock.Controller
	recorder *MockSearchClientMockRecorder
}

// MockSearchClientMockRecorder is the mock recorder for MockSearchClient.
type MockSearchClientMockRecorder struct {
	mock *MockSearchClient
}

// NewMockSearchClient creates a new mock instance.
func NewMockSearchClient(ctrl *gomock.Controller) *MockSearchClient {
	mock := &MockSearchClient{ctrl: ctrl}
	mock.recorder = &MockSearchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchClient) EXPECT() *MockSearchClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSearchClient) Create(arg0 context.Context, arg1 string, arg2 []driver.Document) ([]*api.DocStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*api.DocStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSearchClientMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSearchClient)(nil).Create), arg0, arg1, arg2)
}

// CreateByID mocks base method.
func (m *MockSearchClient) CreateByID(arg0 context.Context, arg1, arg2 string, arg3 driver.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateByID indicates an expected call of CreateByID.
func (mr *MockSearchClientMockRecorder) CreateByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByID", reflect.TypeOf((*MockSearchClient)(nil).CreateByID), arg0, arg1, arg2, arg3)
}

// CreateOrReplace mocks base method.
func (m *MockSearchClient) CreateOrReplace(arg0 context.Context, arg1 string, arg2 []driver.Document) ([]*api.DocStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrReplace", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*api.DocStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrReplace indicates an expected call of CreateOrReplace.
func (mr *MockSearchClientMockRecorder) CreateOrReplace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrReplace", reflect.TypeOf((*MockSearchClient)(nil).CreateOrReplace), arg0, arg1, arg2)
}

// CreateOrUpdateIndex mocks base method.
func (m *MockSearchClient) CreateOrUpdateIndex(arg0 context.Context, arg1 string, arg2 driver.Schema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateIndex", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateIndex indicates an expected call of CreateOrUpdateIndex.
func (mr *MockSearchClientMockRecorder) CreateOrUpdateIndex(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateIndex", reflect.TypeOf((*MockSearchClient)(nil).CreateOrUpdateIndex), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockSearchClient) Delete(arg0 context.Context, arg1 string, arg2 []string) ([]*api.DocStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*api.DocStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSearchClientMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSearchClient)(nil).Delete), arg0, arg1, arg2)
}

// DeleteByQuery mocks base method.
func (m *MockSearchClient) DeleteByQuery(arg0 context.Context, arg1 string, arg2 driver.Filter) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByQuery", arg0, arg1, arg2)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByQuery indicates an expected call of DeleteByQuery.
func (mr *MockSearchClientMockRecorder) DeleteByQuery(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByQuery", reflect.TypeOf((*MockSearchClient)(nil).DeleteByQuery), arg0, arg1, arg2)
}

// DeleteIndex mocks base method.
func (m *MockSearchClient) DeleteIndex(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndex", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIndex indicates an expected call of DeleteIndex.
func (mr *MockSearchClientMockRecorder) DeleteIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndex", reflect.TypeOf((*MockSearchClient)(nil).DeleteIndex), arg0, arg1)
}

// Get mocks base method.
func (m *MockSearchClient) Get(arg0 context.Context, arg1 string, arg2 []string) ([]*api.SearchHit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*api.SearchHit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSearchClientMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSearchClient)(nil).Get), arg0, arg1, arg2)
}

// GetIndex mocks base method.
func (m *MockSearchClient) GetIndex(arg0 context.Context, arg1 string) (*api.IndexInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndex", arg0, arg1)
	ret0, _ := ret[0].(*api.IndexInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndex indicates an expected call of GetIndex.
func (mr *MockSearchClientMockRecorder) GetIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndex", reflect.TypeOf((*MockSearchClient)(nil).GetIndex), arg0, arg1)
}

// ListIndexes mocks base method.
func (m *MockSearchClient) ListIndexes(arg0 context.Context, arg1 *api.IndexSource) ([]*api.IndexInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndexes", arg0, arg1)
	ret0, _ := ret[0].([]*api.IndexInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndexes indicates an expected call of ListIndexes.
func (mr *MockSearchClientMockRecorder) ListIndexes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexes", reflect.TypeOf((*MockSearchClient)(nil).ListIndexes), arg0, arg1)
}

// Search mocks base method.
func (m *MockSearchClient) Search(arg0 context.Context, arg1 string, arg2 *driver.SearchRequest) (driver.SearchIndexResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1, arg2)
	ret0, _ := ret[0].(driver.SearchIndexResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSearchClientMockRecorder) Search(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSearchClient)(nil).Search), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockSearchClient) Update(arg0 context.Context, arg1 string, arg2 []driver.Document) ([]*api.DocStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*api.DocStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSearchClientMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSearchClient)(nil).Update), arg0, arg1, arg2)
}

// MockSearchIndexResultIterator is a mock of SearchIndexResultIterator interface.
type MockSearchIndexResultIterator struct {
	ctrl     *gomock.Controller
	recorder *MockSearchIndexResultIteratorMockRecorder
}

// MockSearchIndexResultIteratorMockRecorder is the mock recorder for MockSearchIndexResultIterator.
type MockSearchIndexResultIteratorMockRecorder struct {
	mock *MockSearchIndexResultIterator
}

// NewMockSearchIndexResultIterator creates a new mock instance.
func NewMockSearchIndexResultIterator(ctrl *gomock.Controller) *MockSearchIndexResultIterator {
	mock := &MockSearchIndexResultIterator{ctrl: ctrl}
	mock.recorder = &MockSearchIndexResultIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchIndexResultIterator) EXPECT() *MockSearchIndexResultIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSearchIndexResultIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockSearchIndexResultIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSearchIndexResultIterator)(nil).Close))
}

// Err mocks base method.
func (m *MockSearchIndexResultIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockSearchIndexResultIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockSearchIndexResultIterator)(nil).Err))
}

// Next mocks base method.
func (m *MockSearchIndexResultIterator) Next(arg0 **api.SearchIndexResponse) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockSearchIndexResultIteratorMockRecorder) Next(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSearchIndexResultIterator)(nil).Next), arg0)
}
