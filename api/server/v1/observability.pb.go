// Copyright 2022 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: server/v1/observability.proto

package api

import (
	_ "github.com/google/gnostic/openapiv3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents Tigris operation category
type TigrisOperation int32

const (
	TigrisOperation_ALL   TigrisOperation = 0
	TigrisOperation_READ  TigrisOperation = 1
	TigrisOperation_WRITE TigrisOperation = 2
)

// Enum value maps for TigrisOperation.
var (
	TigrisOperation_name = map[int32]string{
		0: "ALL",
		1: "READ",
		2: "WRITE",
	}
	TigrisOperation_value = map[string]int32{
		"ALL":   0,
		"READ":  1,
		"WRITE": 2,
	}
)

func (x TigrisOperation) Enum() *TigrisOperation {
	p := new(TigrisOperation)
	*p = x
	return p
}

func (x TigrisOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TigrisOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_server_v1_observability_proto_enumTypes[0].Descriptor()
}

func (TigrisOperation) Type() protoreflect.EnumType {
	return &file_server_v1_observability_proto_enumTypes[0]
}

func (x TigrisOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TigrisOperation.Descriptor instead.
func (TigrisOperation) EnumDescriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{0}
}

// Function to apply on metrics query
type MetricQueryFunction int32

const (
	MetricQueryFunction_RATE  MetricQueryFunction = 0
	MetricQueryFunction_COUNT MetricQueryFunction = 1
	MetricQueryFunction_NONE  MetricQueryFunction = 2
)

// Enum value maps for MetricQueryFunction.
var (
	MetricQueryFunction_name = map[int32]string{
		0: "RATE",
		1: "COUNT",
		2: "NONE",
	}
	MetricQueryFunction_value = map[string]int32{
		"RATE":  0,
		"COUNT": 1,
		"NONE":  2,
	}
)

func (x MetricQueryFunction) Enum() *MetricQueryFunction {
	p := new(MetricQueryFunction)
	*p = x
	return p
}

func (x MetricQueryFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricQueryFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_server_v1_observability_proto_enumTypes[1].Descriptor()
}

func (MetricQueryFunction) Type() protoreflect.EnumType {
	return &file_server_v1_observability_proto_enumTypes[1]
}

func (x MetricQueryFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricQueryFunction.Descriptor instead.
func (MetricQueryFunction) EnumDescriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{1}
}

// Specifies how the initial query's result buckets should be processed in
// next stage.
type RollupAggregator int32

const (
	RollupAggregator_ROLLUP_AGGREGATOR_SUM   RollupAggregator = 0
	RollupAggregator_ROLLUP_AGGREGATOR_COUNT RollupAggregator = 1
	RollupAggregator_ROLLUP_AGGREGATOR_MIN   RollupAggregator = 2
	RollupAggregator_ROLLUP_AGGREGATOR_MAX   RollupAggregator = 3
	RollupAggregator_ROLLUP_AGGREGATOR_AVG   RollupAggregator = 4
)

// Enum value maps for RollupAggregator.
var (
	RollupAggregator_name = map[int32]string{
		0: "ROLLUP_AGGREGATOR_SUM",
		1: "ROLLUP_AGGREGATOR_COUNT",
		2: "ROLLUP_AGGREGATOR_MIN",
		3: "ROLLUP_AGGREGATOR_MAX",
		4: "ROLLUP_AGGREGATOR_AVG",
	}
	RollupAggregator_value = map[string]int32{
		"ROLLUP_AGGREGATOR_SUM":   0,
		"ROLLUP_AGGREGATOR_COUNT": 1,
		"ROLLUP_AGGREGATOR_MIN":   2,
		"ROLLUP_AGGREGATOR_MAX":   3,
		"ROLLUP_AGGREGATOR_AVG":   4,
	}
)

func (x RollupAggregator) Enum() *RollupAggregator {
	p := new(RollupAggregator)
	*p = x
	return p
}

func (x RollupAggregator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RollupAggregator) Descriptor() protoreflect.EnumDescriptor {
	return file_server_v1_observability_proto_enumTypes[2].Descriptor()
}

func (RollupAggregator) Type() protoreflect.EnumType {
	return &file_server_v1_observability_proto_enumTypes[2]
}

func (x RollupAggregator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RollupAggregator.Descriptor instead.
func (RollupAggregator) EnumDescriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{2}
}

// Specifies how the metric should be aggregated for the time slices.
type MetricQuerySpaceAggregation int32

const (
	MetricQuerySpaceAggregation_AVG MetricQuerySpaceAggregation = 0
	MetricQuerySpaceAggregation_MIN MetricQuerySpaceAggregation = 1
	MetricQuerySpaceAggregation_MAX MetricQuerySpaceAggregation = 2
	MetricQuerySpaceAggregation_SUM MetricQuerySpaceAggregation = 3
)

// Enum value maps for MetricQuerySpaceAggregation.
var (
	MetricQuerySpaceAggregation_name = map[int32]string{
		0: "AVG",
		1: "MIN",
		2: "MAX",
		3: "SUM",
	}
	MetricQuerySpaceAggregation_value = map[string]int32{
		"AVG": 0,
		"MIN": 1,
		"MAX": 2,
		"SUM": 3,
	}
)

func (x MetricQuerySpaceAggregation) Enum() *MetricQuerySpaceAggregation {
	p := new(MetricQuerySpaceAggregation)
	*p = x
	return p
}

func (x MetricQuerySpaceAggregation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricQuerySpaceAggregation) Descriptor() protoreflect.EnumDescriptor {
	return file_server_v1_observability_proto_enumTypes[3].Descriptor()
}

func (MetricQuerySpaceAggregation) Type() protoreflect.EnumType {
	return &file_server_v1_observability_proto_enumTypes[3]
}

func (x MetricQuerySpaceAggregation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricQuerySpaceAggregation.Descriptor instead.
func (MetricQuerySpaceAggregation) EnumDescriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{3}
}

// Requests the time series metrics
type QueryTimeSeriesMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Db                  string                      `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	Collection          string                      `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	From                int64                       `protobuf:"varint,3,opt,name=from,proto3" json:"from,omitempty"`
	To                  int64                       `protobuf:"varint,4,opt,name=to,proto3" json:"to,omitempty"`
	MetricName          string                      `protobuf:"bytes,5,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	TigrisOperation     TigrisOperation             `protobuf:"varint,6,opt,name=tigris_operation,json=tigrisOperation,proto3,enum=tigrisdata.observability.v1.TigrisOperation" json:"tigris_operation,omitempty"`
	SpaceAggregation    MetricQuerySpaceAggregation `protobuf:"varint,7,opt,name=space_aggregation,json=spaceAggregation,proto3,enum=tigrisdata.observability.v1.MetricQuerySpaceAggregation" json:"space_aggregation,omitempty"`
	SpaceAggregatedBy   []string                    `protobuf:"bytes,8,rep,name=space_aggregated_by,json=spaceAggregatedBy,proto3" json:"space_aggregated_by,omitempty"`
	Function            MetricQueryFunction         `protobuf:"varint,9,opt,name=function,proto3,enum=tigrisdata.observability.v1.MetricQueryFunction" json:"function,omitempty"`
	Quantile            float32                     `protobuf:"fixed32,10,opt,name=quantile,proto3" json:"quantile,omitempty"`
	AdditionalFunctions []*AdditionalFunction       `protobuf:"bytes,11,rep,name=additionalFunctions,proto3" json:"additionalFunctions,omitempty"`
}

func (x *QueryTimeSeriesMetricsRequest) Reset() {
	*x = QueryTimeSeriesMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTimeSeriesMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTimeSeriesMetricsRequest) ProtoMessage() {}

func (x *QueryTimeSeriesMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTimeSeriesMetricsRequest.ProtoReflect.Descriptor instead.
func (*QueryTimeSeriesMetricsRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{0}
}

func (x *QueryTimeSeriesMetricsRequest) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *QueryTimeSeriesMetricsRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *QueryTimeSeriesMetricsRequest) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *QueryTimeSeriesMetricsRequest) GetTo() int64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *QueryTimeSeriesMetricsRequest) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *QueryTimeSeriesMetricsRequest) GetTigrisOperation() TigrisOperation {
	if x != nil {
		return x.TigrisOperation
	}
	return TigrisOperation_ALL
}

func (x *QueryTimeSeriesMetricsRequest) GetSpaceAggregation() MetricQuerySpaceAggregation {
	if x != nil {
		return x.SpaceAggregation
	}
	return MetricQuerySpaceAggregation_AVG
}

func (x *QueryTimeSeriesMetricsRequest) GetSpaceAggregatedBy() []string {
	if x != nil {
		return x.SpaceAggregatedBy
	}
	return nil
}

func (x *QueryTimeSeriesMetricsRequest) GetFunction() MetricQueryFunction {
	if x != nil {
		return x.Function
	}
	return MetricQueryFunction_RATE
}

func (x *QueryTimeSeriesMetricsRequest) GetQuantile() float32 {
	if x != nil {
		return x.Quantile
	}
	return 0
}

func (x *QueryTimeSeriesMetricsRequest) GetAdditionalFunctions() []*AdditionalFunction {
	if x != nil {
		return x.AdditionalFunctions
	}
	return nil
}

// Additional function to apply on metrics query
type AdditionalFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rollup *RollupFunction `protobuf:"bytes,1,opt,name=rollup,proto3,oneof" json:"rollup,omitempty"`
}

func (x *AdditionalFunction) Reset() {
	*x = AdditionalFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalFunction) ProtoMessage() {}

func (x *AdditionalFunction) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalFunction.ProtoReflect.Descriptor instead.
func (*AdditionalFunction) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{1}
}

func (x *AdditionalFunction) GetRollup() *RollupFunction {
	if x != nil {
		return x.Rollup
	}
	return nil
}

// Rollup function aggregates the slices of metrics returned by original query
// and lets you operate on the slices using aggregator and constructs the
// bigger slice of your choice of interval (specified in seconds).
type RollupFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggregator RollupAggregator `protobuf:"varint,1,opt,name=aggregator,proto3,enum=tigrisdata.observability.v1.RollupAggregator" json:"aggregator,omitempty"`
	Interval   int64            `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *RollupFunction) Reset() {
	*x = RollupFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollupFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollupFunction) ProtoMessage() {}

func (x *RollupFunction) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollupFunction.ProtoReflect.Descriptor instead.
func (*RollupFunction) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{2}
}

func (x *RollupFunction) GetAggregator() RollupAggregator {
	if x != nil {
		return x.Aggregator
	}
	return RollupAggregator_ROLLUP_AGGREGATOR_SUM
}

func (x *RollupFunction) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

// QueryTimeSeriesMetric responds with this type.
type QueryTimeSeriesMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From   int64           `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To     int64           `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	Query  string          `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Series []*MetricSeries `protobuf:"bytes,4,rep,name=series,proto3" json:"series,omitempty"`
}

func (x *QueryTimeSeriesMetricsResponse) Reset() {
	*x = QueryTimeSeriesMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTimeSeriesMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTimeSeriesMetricsResponse) ProtoMessage() {}

func (x *QueryTimeSeriesMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTimeSeriesMetricsResponse.ProtoReflect.Descriptor instead.
func (*QueryTimeSeriesMetricsResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{3}
}

func (x *QueryTimeSeriesMetricsResponse) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *QueryTimeSeriesMetricsResponse) GetTo() int64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *QueryTimeSeriesMetricsResponse) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QueryTimeSeriesMetricsResponse) GetSeries() []*MetricSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

// Represents series in timeseries based on input query.
type MetricSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From       int64        `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To         int64        `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	Metric     string       `protobuf:"bytes,3,opt,name=metric,proto3" json:"metric,omitempty"`
	Scope      string       `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	DataPoints []*DataPoint `protobuf:"bytes,5,rep,name=dataPoints,proto3" json:"dataPoints,omitempty"`
}

func (x *MetricSeries) Reset() {
	*x = MetricSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricSeries) ProtoMessage() {}

func (x *MetricSeries) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricSeries.ProtoReflect.Descriptor instead.
func (*MetricSeries) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{4}
}

func (x *MetricSeries) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *MetricSeries) GetTo() int64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *MetricSeries) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *MetricSeries) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *MetricSeries) GetDataPoints() []*DataPoint {
	if x != nil {
		return x.DataPoints
	}
	return nil
}

// Represents the data point in timeseries.
type DataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value     float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DataPoint) Reset() {
	*x = DataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_v1_observability_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPoint) ProtoMessage() {}

func (x *DataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_observability_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPoint.ProtoReflect.Descriptor instead.
func (*DataPoint) Descriptor() ([]byte, []int) {
	return file_server_v1_observability_proto_rawDescGZIP(), []int{5}
}

func (x *DataPoint) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DataPoint) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_server_v1_observability_proto protoreflect.FileDescriptor

var file_server_v1_observability_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1b, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x04, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x64, 0x62, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x57,
	0x0a, 0x10, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69,
	0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x67, 0x72, 0x69, 0x73, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x11, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x4c,
	0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x69, 0x0a, 0x12, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x48, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x06, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x22, 0x7b, 0x0a, 0x0e, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x74,
	0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x75,
	0x70, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x22, 0x9d, 0x01, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x41, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x69, 0x67,
	0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x3f,
	0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a,
	0x2f, 0x0a, 0x0f, 0x54, 0x69, 0x67, 0x72, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52,
	0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02,
	0x2a, 0x34, 0x0a, 0x13, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x41, 0x54, 0x45, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0x9b, 0x01, 0x0a, 0x10, 0x52, 0x6f, 0x6c, 0x6c, 0x75,
	0x70, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x52,
	0x4f, 0x4c, 0x4c, 0x55, 0x50, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x53, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x4f, 0x4c, 0x4c, 0x55, 0x50,
	0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x4c, 0x4c, 0x55, 0x50, 0x5f, 0x41, 0x47,
	0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x52, 0x4f, 0x4c, 0x4c, 0x55, 0x50, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x4c,
	0x4c, 0x55, 0x50, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41,
	0x56, 0x47, 0x10, 0x04, 0x2a, 0x41, 0x0a, 0x1b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x56, 0x47, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x03, 0x32, 0x84, 0x02, 0x0a, 0x0d, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0xf2, 0x01, 0x0a, 0x16, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3b, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x3a, 0x01, 0x2a, 0xba, 0x47, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x42, 0xc3,
	0x01, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x67,
	0x72, 0x69, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x74, 0x69, 0x67, 0x72, 0x69, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0xba, 0x47, 0x7f, 0x3a, 0x7d, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x72, 0x54, 0x69, 0x67, 0x72, 0x69, 0x73, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x20, 0x70, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x20, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x41, 0x50, 0x49, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x77, 0x61, 0x79, 0x20, 0x74, 0x6f, 0x20,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x54, 0x69, 0x67, 0x72, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_v1_observability_proto_rawDescOnce sync.Once
	file_server_v1_observability_proto_rawDescData = file_server_v1_observability_proto_rawDesc
)

func file_server_v1_observability_proto_rawDescGZIP() []byte {
	file_server_v1_observability_proto_rawDescOnce.Do(func() {
		file_server_v1_observability_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_v1_observability_proto_rawDescData)
	})
	return file_server_v1_observability_proto_rawDescData
}

var file_server_v1_observability_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_server_v1_observability_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_server_v1_observability_proto_goTypes = []interface{}{
	(TigrisOperation)(0),                   // 0: tigrisdata.observability.v1.TigrisOperation
	(MetricQueryFunction)(0),               // 1: tigrisdata.observability.v1.MetricQueryFunction
	(RollupAggregator)(0),                  // 2: tigrisdata.observability.v1.RollupAggregator
	(MetricQuerySpaceAggregation)(0),       // 3: tigrisdata.observability.v1.MetricQuerySpaceAggregation
	(*QueryTimeSeriesMetricsRequest)(nil),  // 4: tigrisdata.observability.v1.QueryTimeSeriesMetricsRequest
	(*AdditionalFunction)(nil),             // 5: tigrisdata.observability.v1.AdditionalFunction
	(*RollupFunction)(nil),                 // 6: tigrisdata.observability.v1.RollupFunction
	(*QueryTimeSeriesMetricsResponse)(nil), // 7: tigrisdata.observability.v1.QueryTimeSeriesMetricsResponse
	(*MetricSeries)(nil),                   // 8: tigrisdata.observability.v1.MetricSeries
	(*DataPoint)(nil),                      // 9: tigrisdata.observability.v1.DataPoint
}
var file_server_v1_observability_proto_depIdxs = []int32{
	0, // 0: tigrisdata.observability.v1.QueryTimeSeriesMetricsRequest.tigris_operation:type_name -> tigrisdata.observability.v1.TigrisOperation
	3, // 1: tigrisdata.observability.v1.QueryTimeSeriesMetricsRequest.space_aggregation:type_name -> tigrisdata.observability.v1.MetricQuerySpaceAggregation
	1, // 2: tigrisdata.observability.v1.QueryTimeSeriesMetricsRequest.function:type_name -> tigrisdata.observability.v1.MetricQueryFunction
	5, // 3: tigrisdata.observability.v1.QueryTimeSeriesMetricsRequest.additionalFunctions:type_name -> tigrisdata.observability.v1.AdditionalFunction
	6, // 4: tigrisdata.observability.v1.AdditionalFunction.rollup:type_name -> tigrisdata.observability.v1.RollupFunction
	2, // 5: tigrisdata.observability.v1.RollupFunction.aggregator:type_name -> tigrisdata.observability.v1.RollupAggregator
	8, // 6: tigrisdata.observability.v1.QueryTimeSeriesMetricsResponse.series:type_name -> tigrisdata.observability.v1.MetricSeries
	9, // 7: tigrisdata.observability.v1.MetricSeries.dataPoints:type_name -> tigrisdata.observability.v1.DataPoint
	4, // 8: tigrisdata.observability.v1.Observability.QueryTimeSeriesMetrics:input_type -> tigrisdata.observability.v1.QueryTimeSeriesMetricsRequest
	7, // 9: tigrisdata.observability.v1.Observability.QueryTimeSeriesMetrics:output_type -> tigrisdata.observability.v1.QueryTimeSeriesMetricsResponse
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_server_v1_observability_proto_init() }
func file_server_v1_observability_proto_init() {
	if File_server_v1_observability_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_v1_observability_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTimeSeriesMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_v1_observability_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_v1_observability_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollupFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_v1_observability_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTimeSeriesMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_v1_observability_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_v1_observability_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_server_v1_observability_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_v1_observability_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_v1_observability_proto_goTypes,
		DependencyIndexes: file_server_v1_observability_proto_depIdxs,
		EnumInfos:         file_server_v1_observability_proto_enumTypes,
		MessageInfos:      file_server_v1_observability_proto_msgTypes,
	}.Build()
	File_server_v1_observability_proto = out.File
	file_server_v1_observability_proto_rawDesc = nil
	file_server_v1_observability_proto_goTypes = nil
	file_server_v1_observability_proto_depIdxs = nil
}
