// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ErrorCode.
const (
	ABORTED            ErrorCode = "ABORTED"
	ALREADYEXISTS      ErrorCode = "ALREADY_EXISTS"
	BADGATEWAY         ErrorCode = "BAD_GATEWAY"
	CANCELLED          ErrorCode = "CANCELLED"
	CONFLICT           ErrorCode = "CONFLICT"
	DATALOSS           ErrorCode = "DATA_LOSS"
	DEADLINEEXCEEDED   ErrorCode = "DEADLINE_EXCEEDED"
	FAILEDPRECONDITION ErrorCode = "FAILED_PRECONDITION"
	INTERNAL           ErrorCode = "INTERNAL"
	INVALIDARGUMENT    ErrorCode = "INVALID_ARGUMENT"
	METHODNOTALLOWED   ErrorCode = "METHOD_NOT_ALLOWED"
	NOTFOUND           ErrorCode = "NOT_FOUND"
	OK                 ErrorCode = "OK"
	OUTOFRANGE         ErrorCode = "OUT_OF_RANGE"
	PERMISSIONDENIED   ErrorCode = "PERMISSION_DENIED"
	RESOURCEEXHAUSTED  ErrorCode = "RESOURCE_EXHAUSTED"
	UNAUTHENTICATED    ErrorCode = "UNAUTHENTICATED"
	UNAVAILABLE        ErrorCode = "UNAVAILABLE"
	UNIMPLEMENTED      ErrorCode = "UNIMPLEMENTED"
	UNKNOWN            ErrorCode = "UNKNOWN"
)

// Defines values for GetAccessTokenRequestGrantType.
const (
	CLIENTCREDENTIALS GetAccessTokenRequestGrantType = "CLIENT_CREDENTIALS"
	REFRESHTOKEN      GetAccessTokenRequestGrantType = "REFRESH_TOKEN"
)

// Defines values for QueryTimeSeriesMetricsRequestFunction.
const (
	COUNT QueryTimeSeriesMetricsRequestFunction = "COUNT"
	NONE  QueryTimeSeriesMetricsRequestFunction = "NONE"
	RATE  QueryTimeSeriesMetricsRequestFunction = "RATE"
)

// Defines values for QueryTimeSeriesMetricsRequestSpaceAggregation.
const (
	AVG QueryTimeSeriesMetricsRequestSpaceAggregation = "AVG"
	MAX QueryTimeSeriesMetricsRequestSpaceAggregation = "MAX"
	MIN QueryTimeSeriesMetricsRequestSpaceAggregation = "MIN"
	SUM QueryTimeSeriesMetricsRequestSpaceAggregation = "SUM"
)

// Defines values for QueryTimeSeriesMetricsRequestTigrisOperation.
const (
	ALL      QueryTimeSeriesMetricsRequestTigrisOperation = "ALL"
	METADATA QueryTimeSeriesMetricsRequestTigrisOperation = "METADATA"
	READ     QueryTimeSeriesMetricsRequestTigrisOperation = "READ"
	WRITE    QueryTimeSeriesMetricsRequestTigrisOperation = "WRITE"
)

// Defines values for RollupFunctionAggregator.
const (
	ROLLUPAGGREGATORAVG   RollupFunctionAggregator = "ROLLUP_AGGREGATOR_AVG"
	ROLLUPAGGREGATORCOUNT RollupFunctionAggregator = "ROLLUP_AGGREGATOR_COUNT"
	ROLLUPAGGREGATORMAX   RollupFunctionAggregator = "ROLLUP_AGGREGATOR_MAX"
	ROLLUPAGGREGATORMIN   RollupFunctionAggregator = "ROLLUP_AGGREGATOR_MIN"
	ROLLUPAGGREGATORSUM   RollupFunctionAggregator = "ROLLUP_AGGREGATOR_SUM"
)

// Additional function to apply on metrics query
type AdditionalFunction struct {
	// Rollup function aggregates the slices of metrics returned by original query and lets you operate on the slices using aggregator and constructs the bigger slice of your choice of interval (specified in seconds).
	Rollup *RollupFunction `json:"rollup,omitempty"`
}

// An user AppKey
type AppKey struct {
	// Created at
	CreatedAt *int64 `json:"created_at,omitempty"`

	// Created by
	CreatedBy *string `json:"created_by,omitempty"`

	// A human readable app description
	Description *string `json:"description,omitempty"`

	// Generated client id
	Id *string `json:"id,omitempty"`

	// A human readable app name
	Name *string `json:"name,omitempty"`

	// Project it belongs to
	Project *string `json:"project,omitempty"`

	// Generated app secret
	Secret *string `json:"secret,omitempty"`

	// Updated at
	UpdatedAt *int64 `json:"updated_at,omitempty"`

	// Updated by
	UpdatedBy *string `json:"updated_by,omitempty"`
}

// Start new transaction in project specified by "project".
type BeginTransactionRequest struct {
	// Optionally specify a project branch name to perform operation on
	Branch *string `json:"branch,omitempty"`

	// Options that can be used to modify the transaction semantics.
	Options *TransactionOptions `json:"options,omitempty"`
}

// Start transaction returns transaction context  which uniquely identifies the transaction
type BeginTransactionResponse struct {
	// Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the metadata (headers) of subsequent requests in order to run them in the context of the same transaction.
	TxCtx *TransactionCtx `json:"tx_ctx,omitempty"`
}

// ChannelMetadata defines model for ChannelMetadata.
type ChannelMetadata struct {
	Channel *string `json:"channel,omitempty"`
}

// A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
type Collation struct {
	Case *string `json:"case,omitempty"`
}

// CollectionDescription defines model for CollectionDescription.
type CollectionDescription struct {
	// Name of the collection.
	Collection *string             `json:"collection,omitempty"`
	Metadata   *CollectionMetadata `json:"metadata,omitempty"`

	// Collections schema
	Schema json.RawMessage `json:"schema,omitempty"`

	// Collection size in bytes
	Size *int64 `json:"size,omitempty"`
}

// CollectionInfo defines model for CollectionInfo.
type CollectionInfo struct {
	// Collection name.
	Collection *string             `json:"collection,omitempty"`
	Metadata   *CollectionMetadata `json:"metadata,omitempty"`
}

// CollectionMetadata defines model for CollectionMetadata.
type CollectionMetadata = map[string]interface{}

// Collection requests modifying options.
type CollectionOptions = map[string]interface{}

// Commit transaction with the given ID
type CommitTransactionRequest struct {
	// Optionally specify a database branch name to perform operation on
	Branch *string `json:"branch,omitempty"`
}

// CommitTransactionResponse defines model for CommitTransactionResponse.
type CommitTransactionResponse struct {
	// Status of commit transaction operation.
	Status *string `json:"status,omitempty"`
}

// Request creation of user app key
type CreateAppKeyRequest struct {
	// A human readable app description
	Description *string `json:"description,omitempty"`

	// A human readable app name
	Name *string `json:"name,omitempty"`
}

// CreateAppKeyResponse returns created app keys
type CreateAppKeyResponse struct {
	// An user AppKey
	CreatedAppKey *AppKey `json:"created_app_key,omitempty"`
}

// CreateBranchRequest defines model for CreateBranchRequest.
type CreateBranchRequest = map[string]interface{}

// CreateBranchResponse defines model for CreateBranchResponse.
type CreateBranchResponse struct {
	// A detailed response message.
	Message *string `json:"message,omitempty"`

	// An enum with value set as "created".
	Status *string `json:"status,omitempty"`
}

// CreateCacheOptions defines model for CreateCacheOptions.
type CreateCacheOptions struct {
	TtlMs *uint64 `json:"ttl_ms,omitempty"`
}

// CreateCacheRequest defines model for CreateCacheRequest.
type CreateCacheRequest struct {
	Options *CreateCacheOptions `json:"options,omitempty"`
}

// CreateCacheResponse defines model for CreateCacheResponse.
type CreateCacheResponse struct {
	// A detailed response message.
	Message *string `json:"message,omitempty"`

	// An enum with value set as "created"
	Status *string `json:"status,omitempty"`
}

// CreateNamespaceRequest defines model for CreateNamespaceRequest.
type CreateNamespaceRequest struct {
	// Optional: unique id
	Code *uint32 `json:"code,omitempty"`

	// Optional: unique string id
	Id *string `json:"id,omitempty"`

	// Required: The display name for namespace.
	Name *string `json:"name,omitempty"`
}

// CreateNamespaceResponse defines model for CreateNamespaceResponse.
type CreateNamespaceResponse struct {
	// A detailed response message.
	Message   *string        `json:"message,omitempty"`
	Namespace *NamespaceInfo `json:"namespace,omitempty"`

	// An enum with value set as "created".
	Status *string `json:"status,omitempty"`
}

// CreateOrUpdateCollectionRequest defines model for CreateOrUpdateCollectionRequest.
type CreateOrUpdateCollectionRequest struct {
	// Optionally specify a database branch name to perform operation on
	Branch *string `json:"branch,omitempty"`

	// If set to `true` then the update schema request to the collection will fail by returning a conflict with HTTP Status code 409. The default is false.
	OnlyCreate *bool `json:"only_create,omitempty"`

	// Collection requests modifying options.
	Options *CollectionOptions `json:"options,omitempty"`

	// The schema specifications are same as JSON schema specification defined <a href="https://json-schema.org/specification.html" title="here">here</a>. The schema of the `documents` collection differs from the schema of `topic` collection as `topic` collection does not have any concept of `primary_key`. The server recognizes type of the collection by the `collection_type` set in the schema.<p></p> Schema example of `documents`: `{  "title": "user",  "description": "Collection of documents with details of users",  "properties": {    "id": {      "description": "A unique identifier for the user",      "type": "integer"    },    "name": {      "description": "Name of the user",      "type": "string",      "maxLength": 100    },    "balance": {      "description": "User account balance",      "type": "number"    }  },  "primary_key": ["id"] }` <p></p>*Note: The `collection_type` is not set as default is documents.* <p></p>Schema example of `topic`: `{  "title": "user_events",  "description": "Topic for user events",  "properties": {    "event_id": {      "description": "A id for the event",      "type": "integer"    },    "event_type": {      "description": "Type of the Event",      "type": "string",      "maxLength": 100    }    "event_details": {      "description": "Details about the Event",      "type": "string"    }  },  "collection_type": "topic" }` <p></p> *Note: The `collection_type` is set as "topic".*
	Schema json.RawMessage `json:"schema,omitempty"`
}

// CreateOrUpdateCollectionResponse defines model for CreateOrUpdateCollectionResponse.
type CreateOrUpdateCollectionResponse struct {
	// A detailed response message.
	Message *string `json:"message,omitempty"`

	// An enum with value set as "created" or "updated"
	Status *string `json:"status,omitempty"`
}

// CreateProjectRequest defines model for CreateProjectRequest.
type CreateProjectRequest = map[string]interface{}

// CreateProjectResponse defines model for CreateProjectResponse.
type CreateProjectResponse struct {
	// A detailed response message.
	Message *string `json:"message,omitempty"`

	// An enum with value set as "created".
	Status *string `json:"status,omitempty"`
}

// Represents the data point in timeseries.
type DataPoint struct {
	Timestamp *int64   `json:"timestamp,omitempty"`
	Value     *float64 `json:"value,omitempty"`
}

// DatabaseMetadata defines model for DatabaseMetadata.
type DatabaseMetadata = map[string]interface{}

// DelRequest defines model for DelRequest.
type DelRequest = map[string]interface{}

// DelResponse defines model for DelResponse.
type DelResponse struct {
	// A detailed response message.
	Message *string `json:"message,omitempty"`

	// An enum with value set as "deleted" or "not_found"
	Status *string `json:"status,omitempty"`
}

// Request deletion of an app key
type DeleteAppKeyRequest struct {
	// app_key id
	Id *string `json:"id,omitempty"`
}

// AppKeys returns the flag to convey if app key was deleted
type DeleteAppKeyResponse struct {
	// status flag for delete operation
	Deleted *bool `json:"deleted,omitempty"`
}

// DeleteBranchRequest defines model for DeleteBranchRequest.
type DeleteBranchRequest = map[string]interface{}

// DeleteBranchResponse defines model for DeleteBranchResponse.
type DeleteBranchResponse struct {
	// A detailed response message.
	Message *string `json:"message,omitempty"`

	// An enum with value set as "deleted".
	Status *string `json:"status,omitempty"`
}

// DeleteCacheRequest defines model for DeleteCacheRequest.
type DeleteCacheRequest = map[string]interface{}

// DeleteCacheResponse defines model for DeleteCacheResponse.
type DeleteCacheResponse struct {
	// A detailed response message.
	Message *string `json:"message,omitempty"`

	// An enum with value set as "deleted"
	Status *string `json:"status,omitempty"`
}

// DeleteProjectRequest defines model for DeleteProjectRequest.
type DeleteProjectRequest = map[string]interface{}

// DeleteProjectResponse defines model for DeleteProjectResponse.
type DeleteProjectResponse struct {
	// A detailed response message.
	Message *string `json:"message,omitempty"`

	// An enum with value set as "dropped".
	Status *string `json:"status,omitempty"`
}

// DeleteRequest defines model for DeleteRequest.
type DeleteRequest struct {
	// Optionally specify a database branch name to perform operation on
	Branch *string `json:"branch,omitempty"`

	// Delete documents which matching specified filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: <li> To delete a user document where the id has a value 1: ```{"id": 1 }``` <li> To delete all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`
	Filter json.RawMessage `json:"filter,omitempty"`

	// Additional options for deleted requests.
	Options *DeleteRequestOptions `json:"options,omitempty"`
}

// Additional options for deleted requests.
type DeleteRequestOptions struct {
	// A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
	Collation *Collation `json:"collation,omitempty"`

	// Limit the number of documents to be deleted
	Limit *int64 `json:"limit,omitempty"`

	// Additional options to modify write requests.
	WriteOptions *WriteOptions `json:"write_options,omitempty"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Has metadata related to the documents stored.
	Metadata *ResponseMetadata `json:"metadata,omitempty"`

	// an enum with value set as "deleted"
	Status *string `json:"status,omitempty"`
}

// DescribeCollectionRequest defines model for DescribeCollectionRequest.
type DescribeCollectionRequest struct {
	// Optionally specify a database branch name to perform operation on
	Branch *string `json:"branch,omitempty"`

	// Name of the collection.
	Collection *string `json:"collection,omitempty"`

	// Collection requests modifying options.
	Options *CollectionOptions `json:"options,omitempty"`

	// Project name whose db is under target to get description of its collection.
	Project *string `json:"project,omitempty"`

	// Return schema in the requested format. Format can be JSON, Go, TypeScript, Java. Default is JSON.
	SchemaFormat *string `json:"schema_format,omitempty"`
}

// A detailed description of the collection. The description returns collection metadata and the schema.
type DescribeCollectionResponse struct {
	// Name of the collection.
	Collection *string             `json:"collection,omitempty"`
	Metadata   *CollectionMetadata `json:"metadata,omitempty"`

	// Schema of this collection.
	Schema json.RawMessage `json:"schema,omitempty"`

	// The size of this collection in bytes.
	Size *int64 `json:"size,omitempty"`
}

// DescribeDatabaseRequest defines model for DescribeDatabaseRequest.
type DescribeDatabaseRequest struct {
	// Optionally specify a database branch name to perform operation on
	Branch *string `json:"branch,omitempty"`

	// Project name whose db is under target to get description.
	Project *string `json:"project,omitempty"`

	// Return schema in the requested format. Format can be JSON, Go, TypeScript, Java. Default is JSON.
	SchemaFormat *string `json:"schema_format,omitempty"`
}

// A detailed description of the database and all the associated collections. Description of the collection includes schema details as well.
type DescribeDatabaseResponse struct {
	// List of all the branches in this database
	Branches *[]string `json:"branches,omitempty"`

	// A detailed description about all the collections. The description returns collection metadata and the schema.
	Collections *[]CollectionDescription `json:"collections,omitempty"`
	Metadata    *DatabaseMetadata        `json:"metadata,omitempty"`

	// Sum of all the collections sizes present in this database
	Size *int64 `json:"size,omitempty"`
}

// DescribeNamespacesData defines model for DescribeNamespacesData.
type DescribeNamespacesData struct {
	Details *string `json:"details,omitempty"`
}

// DescribeNamespacesResponse defines model for DescribeNamespacesResponse.
type DescribeNamespacesResponse struct {
	Data *DescribeNamespacesData `json:"data,omitempty"`
}

// DropCollectionRequest defines model for DropCollectionRequest.
type DropCollectionRequest struct {
	// Optionally specify a project branch name to perform operation on
	Branch *string `json:"branch,omitempty"`

	// Collection requests modifying options.
	Options *CollectionOptions `json:"options,omitempty"`
}

// DropCollectionResponse defines model for DropCollectionResponse.
type DropCollectionResponse struct {
	// A detailed response message.
	Message *string `json:"message,omitempty"`

	// An enum with value set as "dropped".
	Status *string `json:"status,omitempty"`
}

// The Error type defines a logical error model
type Error struct {
	// The status code is a short, machine parsable string, which uniquely identifies the error type. Tigris to HTTP code mapping [here](/reference/http-code)
	Code *ErrorCode `json:"code,omitempty"`

	// A developer-facing descriptive error message
	Message *string `json:"message,omitempty"`
}

// The status code is a short, machine parsable string, which uniquely identifies the error type. Tigris to HTTP code mapping [here](/reference/http-code)
type ErrorCode string

// FacetCount defines model for FacetCount.
type FacetCount struct {
	Count *int64  `json:"count,omitempty"`
	Value *string `json:"value,omitempty"`
}

// Additional stats for faceted field
type FacetStats struct {
	// Average of all values in a field. Only available for numeric fields
	Avg *float64 `json:"avg,omitempty"`

	// Total number of values in a field
	Count *int64 `json:"count,omitempty"`

	// Maximum of all values in a field. Only available for numeric fields
	Max *float64 `json:"max,omitempty"`

	// Minimum of all values in a field. Only available for numeric fields
	Min *float64 `json:"min,omitempty"`

	// Sum of all values in a field. Only available for numeric fields
	Sum *float64 `json:"sum,omitempty"`
}

// The Request message for the GetAccessToken. The grant type is a required field and based on the grant type the other fields are used as mentioned below.
type GetAccessTokenRequest struct {
	// Client Id is required when grant type is set as `CLIENT_CREDENTIALS`.
	ClientId *string `json:"client_id,omitempty"`

	// Your Tigris API Key is required when grant type is set as `CLIENT_CREDENTIALS`.
	ClientSecret *string                         `json:"client_secret,omitempty"`
	GrantType    *GetAccessTokenRequestGrantType `json:"grant_type,omitempty"`

	// Refresh token is required when grant type is set as `REFRESH_TOKEN`.
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// GetAccessTokenRequestGrantType defines model for GetAccessTokenRequest.GrantType.
type GetAccessTokenRequestGrantType string

// The response of GetAccessToken which contains access_token and optionally refresh_token.
type GetAccessTokenResponse struct {
	// An Access Token.
	AccessToken *string `json:"access_token,omitempty"`

	// Access token expiration timeout in seconds.
	ExpiresIn *int32 `json:"expires_in,omitempty"`

	// The Refresh Token.
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// GetInfoResponse defines model for GetInfoResponse.
type GetInfoResponse struct {
	ServerVersion *string `json:"server_version,omitempty"`
}

// Request namespace metadata
type GetNamespaceMetadataRequest struct {
	MetadataKey *string                 `json:"metadataKey,omitempty"`
	Value       *map[string]interface{} `json:"value,omitempty"`
}

// Namespace metadata response
type GetNamespaceMetadataResponse struct {
	MetadataKey *string                 `json:"metadataKey,omitempty"`
	NamespaceId *uint32                 `json:"namespaceId,omitempty"`
	Value       *map[string]interface{} `json:"value,omitempty"`
}

// GetRTChannelResponse defines model for GetRTChannelResponse.
type GetRTChannelResponse struct {
	Channel *string `json:"channel,omitempty"`
}

// GetRTChannelsResponse defines model for GetRTChannelsResponse.
type GetRTChannelsResponse struct {
	Channels *[]ChannelMetadata `json:"channels,omitempty"`
}

// GetResponse defines model for GetResponse.
type GetResponse struct {
	// expiration ms
	ExpiresInMs *uint64 `json:"expires_in_ms,omitempty"`

	// value
	Value *[]byte `json:"value,omitempty"`
}

// Request user metadata
type GetUserMetadataRequest struct {
	MetadataKey *string                 `json:"metadataKey,omitempty"`
	Value       *map[string]interface{} `json:"value,omitempty"`
}

// User metadata response
type GetUserMetadataResponse struct {
	MetadataKey *string `json:"metadataKey,omitempty"`
	NamespaceId *uint32 `json:"namespaceId,omitempty"`
	UserId      *string `json:"userId,omitempty"`
	Value       *[]byte `json:"value,omitempty"`
}

// HealthCheckResponse defines model for HealthCheckResponse.
type HealthCheckResponse struct {
	Response *string `json:"response,omitempty"`
}

// ImportRequest defines model for ImportRequest.
type ImportRequest struct {
	// The list of autogenerated fields of the collection
	Autogenerated *[]string `json:"autogenerated,omitempty"`

	// Optionally specify a database branch name to perform operation on
	Branch *string `json:"branch,omitempty"`

	// Allow to create collection if it doesn't exists
	CreateCollection *bool `json:"create_collection,omitempty"`

	// Array of documents to import. Each document is a JSON object.
	Documents *[]map[string]interface{} `json:"documents,omitempty"`

	// additional options for import requests.
	Options *ImportRequestOptions `json:"options,omitempty"`

	// List of fields which constitutes primary key of the collection If not specified and field with name 'id' is present, it's used as a primary key, further if inferred type is UUID, then it's set as autogenerated.
	PrimaryKey *[]string `json:"primary_key,omitempty"`
}

// additional options for import requests.
type ImportRequestOptions struct {
	// Additional options to modify write requests.
	WriteOptions *WriteOptions `json:"write_options,omitempty"`
}

// ImportResponse defines model for ImportResponse.
type ImportResponse struct {
	// an array returns the value of the primary keys.
	Keys *[][]byte `json:"keys,omitempty"`

	// Has metadata related to the documents stored.
	Metadata *ResponseMetadata `json:"metadata,omitempty"`

	// An enum with value set as "inserted"
	Status *string `json:"status,omitempty"`
}

// Request insertion of namespace metadata
type InsertNamespaceMetadataRequest struct {
	MetadataKey *string                 `json:"metadataKey,omitempty"`
	Value       *map[string]interface{} `json:"value,omitempty"`
}

// Insertion of namespace metadata response
type InsertNamespaceMetadataResponse struct {
	MetadataKey *string                 `json:"metadataKey,omitempty"`
	NamespaceId *uint32                 `json:"namespaceId,omitempty"`
	Value       *map[string]interface{} `json:"value,omitempty"`
}

// InsertRequest defines model for InsertRequest.
type InsertRequest struct {
	// Optionally specify a database branch name to perform operation on
	Branch *string `json:"branch,omitempty"`

	// Array of documents to insert. Each document is a JSON object.
	Documents *[]json.RawMessage `json:"documents,omitempty"`

	// additional options for insert requests.
	Options *InsertRequestOptions `json:"options,omitempty"`
}

// additional options for insert requests.
type InsertRequestOptions struct {
	// Additional options to modify write requests.
	WriteOptions *WriteOptions `json:"write_options,omitempty"`
}

// InsertResponse defines model for InsertResponse.
type InsertResponse struct {
	// an array returns the value of the primary keys.
	Keys *[][]byte `json:"keys,omitempty"`

	// Has metadata related to the documents stored.
	Metadata *ResponseMetadata `json:"metadata,omitempty"`

	// An enum with value set as "inserted"
	Status *string `json:"status,omitempty"`
}

// Request insertion of user metadata
type InsertUserMetadataRequest struct {
	MetadataKey *string                 `json:"metadataKey,omitempty"`
	Value       *map[string]interface{} `json:"value,omitempty"`
}

// Insertion of user metadata response
type InsertUserMetadataResponse struct {
	MetadataKey *string                 `json:"metadataKey,omitempty"`
	NamespaceId *uint32                 `json:"namespaceId,omitempty"`
	UserId      *string                 `json:"userId,omitempty"`
	Value       *map[string]interface{} `json:"value,omitempty"`
}

// KeysResponse defines model for KeysResponse.
type KeysResponse struct {
	// all the keys
	Keys *[]string `json:"keys,omitempty"`
}

// ListAppKeysResponse returns one or more visible app keys to user
type ListAppKeysResponse struct {
	AppKeys *[]AppKey `json:"app_keys,omitempty"`
}

// ListCollectionsResponse defines model for ListCollectionsResponse.
type ListCollectionsResponse struct {
	// List of the collections info in the database.
	Collections *[]CollectionInfo `json:"collections,omitempty"`
}

// ListNamespacesResponse defines model for ListNamespacesResponse.
type ListNamespacesResponse struct {
	Namespaces *[]NamespaceInfo `json:"namespaces,omitempty"`
}

// ListProjectsResponse defines model for ListProjectsResponse.
type ListProjectsResponse struct {
	// List of the projects.
	Projects *[]ProjectInfo `json:"projects,omitempty"`
}

// ListSubscriptionResponse defines model for ListSubscriptionResponse.
type ListSubscriptionResponse struct {
	Devices *[]string `json:"devices,omitempty"`
}

// Message defines model for Message.
type Message struct {
	Data *[]byte `json:"data,omitempty"`

	// an optional id if idempotency is needed to ensure only a single time message is published during retries. If not specified then server will automatically add an id to message.
	Id       *string `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
	Sequence *string `json:"sequence,omitempty"`
}

// MessagesRequest defines model for MessagesRequest.
type MessagesRequest struct {
	Channel  *string    `json:"channel,omitempty"`
	Messages *[]Message `json:"messages,omitempty"`
	Project  *string    `json:"project,omitempty"`
}

// MessagesResponse defines model for MessagesResponse.
type MessagesResponse struct {
	// ids of the published messages
	Ids *[]string `json:"ids,omitempty"`
}

// Represents series in timeseries based on input query.
type MetricSeries struct {
	DataPoints *[]DataPoint `json:"dataPoints,omitempty"`
	From       *int64       `json:"from,omitempty"`
	Metric     *string      `json:"metric,omitempty"`
	Scope      *string      `json:"scope,omitempty"`
	To         *int64       `json:"to,omitempty"`
}

// NamespaceInfo defines model for NamespaceInfo.
type NamespaceInfo struct {
	// The unique namespace code.
	Code *int32 `json:"code,omitempty"`

	// The namespace unique id.
	Id *string `json:"id,omitempty"`

	// The namespace display name.
	Name *string `json:"name,omitempty"`
}

// Pagination metadata for SearchResponse
type Page struct {
	// Number representing the current page of results
	Current *int32 `json:"current,omitempty"`

	// Maximum number of results per page
	Size *int32 `json:"size,omitempty"`
}

// PresenceResponse defines model for PresenceResponse.
type PresenceResponse struct {
	Response *[]byte `json:"response,omitempty"`
}

// ProjectInfo defines model for ProjectInfo.
type ProjectInfo struct {
	Metadata *ProjectMetadata `json:"metadata,omitempty"`

	// Project name.
	Project *string `json:"project,omitempty"`
}

// ProjectMetadata defines model for ProjectMetadata.
type ProjectMetadata = map[string]interface{}

// Requests the time series metrics
type QueryTimeSeriesMetricsRequest struct {
	AdditionalFunctions *[]AdditionalFunction                          `json:"additionalFunctions,omitempty"`
	Collection          *string                                        `json:"collection,omitempty"`
	Db                  *string                                        `json:"db,omitempty"`
	From                *int64                                         `json:"from,omitempty"`
	Function            *QueryTimeSeriesMetricsRequestFunction         `json:"function,omitempty"`
	MetricName          *string                                        `json:"metric_name,omitempty"`
	Quantile            *float32                                       `json:"quantile,omitempty"`
	SpaceAggregatedBy   *[]string                                      `json:"space_aggregated_by,omitempty"`
	SpaceAggregation    *QueryTimeSeriesMetricsRequestSpaceAggregation `json:"space_aggregation,omitempty"`
	TigrisOperation     *QueryTimeSeriesMetricsRequestTigrisOperation  `json:"tigris_operation,omitempty"`
	To                  *int64                                         `json:"to,omitempty"`
}

// QueryTimeSeriesMetricsRequestFunction defines model for QueryTimeSeriesMetricsRequest.Function.
type QueryTimeSeriesMetricsRequestFunction string

// QueryTimeSeriesMetricsRequestSpaceAggregation defines model for QueryTimeSeriesMetricsRequest.SpaceAggregation.
type QueryTimeSeriesMetricsRequestSpaceAggregation string

// QueryTimeSeriesMetricsRequestTigrisOperation defines model for QueryTimeSeriesMetricsRequest.TigrisOperation.
type QueryTimeSeriesMetricsRequestTigrisOperation string

// QueryTimeSeriesMetric responds with this type.
type QueryTimeSeriesMetricsResponse struct {
	From   *int64          `json:"from,omitempty"`
	Query  *string         `json:"query,omitempty"`
	Series *[]MetricSeries `json:"series,omitempty"`
	To     *int64          `json:"to,omitempty"`
}

// Request current namespace quota limits
type QuotaLimitsRequest = map[string]interface{}

// Contains current quota limits
type QuotaLimitsResponse struct {
	// Number of allowed read units per second
	ReadUnits *int64 `json:"ReadUnits,omitempty"`

	// Maximum number of bytes allowed to store
	StorageSize *int64 `json:"StorageSize,omitempty"`

	// Number of allowed write units per second
	WriteUnits *int64 `json:"WriteUnits,omitempty"`
}

// Request current namespace quota usage
type QuotaUsageRequest = map[string]interface{}

// Contains current quota usage
type QuotaUsageResponse struct {
	// Number of read units used per second
	ReadUnits *int64 `json:"ReadUnits,omitempty"`

	// Number of read units throttled per second. Units which was rejected with "resource exhausted error".
	ReadUnitsThrottled *int64 `json:"ReadUnitsThrottled,omitempty"`

	// Number of bytes stored
	StorageSize *int64 `json:"StorageSize,omitempty"`

	// Number of bytes throttled. Number of bytes which were attempted to write in excess of quota and were rejected.
	StorageSizeThrottled *int64 `json:"StorageSizeThrottled,omitempty"`

	// Number of write units used per second
	WriteUnits *int64 `json:"WriteUnits,omitempty"`

	// Number of write units throttled per second. Units which was rejected with "resource exhausted error".
	WriteUnitsThrottled *int64 `json:"WriteUnitsThrottled,omitempty"`
}

// ReadMessagesResponse defines model for ReadMessagesResponse.
type ReadMessagesResponse struct {
	Message *Message `json:"message,omitempty"`
}

// ReadRequest defines model for ReadRequest.
type ReadRequest struct {
	// Optionally specify a database branch name to perform operation on
	Branch *string `json:"branch,omitempty"`

	// To read specific fields from a document. Default is all.
	Fields json.RawMessage `json:"fields,omitempty"`

	// Returns documents matching this filter. A filter can simply be a key, value pair where a key is the field name and the value would be the value for this field. Tigris also allows complex filtering by passing logical expressions. Logical filters are applied on two or more fields using `$or` and `$and`. A few examples of filters: <li> To read a user document where the id has a value 1: ```{"id": 1 }``` <li> To read all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}` Filter allows setting collation on an individual field level. To set collation for all the fields see options. The detailed documentation of the filter is <a href="https://docs.tigrisdata.com/overview/query#specification-1" title="here">here</a>.
	Filter json.RawMessage `json:"filter,omitempty"`

	// Options that can be used to modify the results, for example "limit" to control the number of documents returned by the server.
	Options *ReadRequestOptions `json:"options,omitempty"`

	// Array of fields and corresponding sort orders to order the results. Ex: 1 `[{ "salary": "$desc" }]`, Ex: 2  `[{ "salary": "$asc"}]`
	Sort *[]byte `json:"sort,omitempty"`
}

// Options that can be used to modify the results, for example "limit" to control the number of documents returned by the server.
type ReadRequestOptions struct {
	// A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
	Collation *Collation `json:"collation,omitempty"`

	// Limit the number of documents returned by the read operation.
	Limit *int64 `json:"limit,omitempty"`

	// A cursor for use in pagination. The next streams will return documents after this offset.
	Offset *[]byte `json:"offset,omitempty"`

	// Number of documents to skip before starting to return resulting documents.
	Skip *int64 `json:"skip,omitempty"`
}

// ReadResponse defines model for ReadResponse.
type ReadResponse struct {
	// Object containing the collection document.
	Data json.RawMessage `json:"data,omitempty"`

	// Has metadata related to the documents stored.
	Metadata *ResponseMetadata `json:"metadata,omitempty"`

	// An internal key, used for pagination.
	ResumeToken *[]byte `json:"resume_token,omitempty"`
}

// ReplaceRequest defines model for ReplaceRequest.
type ReplaceRequest struct {
	// Optionally specify a database branch name to perform operation on
	Branch *string `json:"branch,omitempty"`

	// Array of documents to be replaced. Each document is a JSON object.
	Documents *[]json.RawMessage `json:"documents,omitempty"`

	// Additional options for replace requests.
	Options *ReplaceRequestOptions `json:"options,omitempty"`
}

// Additional options for replace requests.
type ReplaceRequestOptions struct {
	// Additional options to modify write requests.
	WriteOptions *WriteOptions `json:"write_options,omitempty"`
}

// ReplaceResponse defines model for ReplaceResponse.
type ReplaceResponse struct {
	// an array returns the value of the primary keys.
	Keys *[][]byte `json:"keys,omitempty"`

	// Has metadata related to the documents stored.
	Metadata *ResponseMetadata `json:"metadata,omitempty"`

	// an enum with value set as "replaced"
	Status *string `json:"status,omitempty"`
}

// Has metadata related to the documents stored.
type ResponseMetadata struct {
	// Time at which the document was inserted/replaced. Measured in nano-seconds since the Unix epoch.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Time at which the document was deleted. Measured in nano-seconds since the Unix epoch.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`

	// Time at which the document was updated. Measured in nano-seconds since the Unix epoch.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Rollback transaction with the given ID
type RollbackTransactionRequest struct {
	// Optionally specify a database branch name to perform operation on
	Branch *string `json:"branch,omitempty"`
}

// RollbackTransactionResponse defines model for RollbackTransactionResponse.
type RollbackTransactionResponse struct {
	// Status of rollback transaction operation.
	Status *string `json:"status,omitempty"`
}

// Rollup function aggregates the slices of metrics returned by original query and lets you operate on the slices using aggregator and constructs the bigger slice of your choice of interval (specified in seconds).
type RollupFunction struct {
	Aggregator *RollupFunctionAggregator `json:"aggregator,omitempty"`
	Interval   *int64                    `json:"interval,omitempty"`
}

// RollupFunctionAggregator defines model for RollupFunction.Aggregator.
type RollupFunctionAggregator string

// Request rotation of an app key secret
type RotateAppKeyRequest struct {
	// app key id
	Id *string `json:"id,omitempty"`

	// project name
	Project *string `json:"project,omitempty"`
}

// RotateAppKeyResponse returns the new app key with rotated secret
type RotateAppKeyResponse struct {
	// An user AppKey
	AppKey *AppKey `json:"app_key,omitempty"`
}

// SearchFacet defines model for SearchFacet.
type SearchFacet struct {
	Counts *[]FacetCount `json:"counts,omitempty"`

	// Additional stats for faceted field
	Stats *FacetStats `json:"stats,omitempty"`
}

// SearchHit defines model for SearchHit.
type SearchHit struct {
	// Actual search document
	Data json.RawMessage `json:"data,omitempty"`

	// Contains metadata related to the search hit, has information about document created_at/updated_at as well.
	Metadata *SearchHitMeta `json:"metadata,omitempty"`
}

// Contains metadata related to the search hit, has information about document created_at/updated_at as well.
type SearchHitMeta struct {
	// Time at which the document was inserted/replaced. Measured in nano-seconds since the Unix epoch.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Time at which the document was updated. Measured in nano-seconds since the Unix epoch.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// SearchMetadata defines model for SearchMetadata.
type SearchMetadata struct {
	// Total number of search results across all pages
	Found *int64 `json:"found,omitempty"`

	// Pagination metadata for SearchResponse
	Page *Page `json:"page,omitempty"`

	// Number representing the total pages of results
	TotalPages *int32 `json:"total_pages,omitempty"`
}

// SearchRequest defines model for SearchRequest.
type SearchRequest struct {
	// Optionally specify a database branch name to perform operation on
	Branch *string `json:"branch,omitempty"`

	// A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
	Collation *Collation `json:"collation,omitempty"`

	// Array of document field names to exclude from results. `include_fields`, if specified, takes precedence over `exclude_fields`.
	ExcludeFields *[]string `json:"exclude_fields,omitempty"`

	// Facet query to aggregate results on given fields. The field name for the facet search can be passed like this `{"brand": { "size": 10 }}` where the size controls the total facets for this field.
	Facet  json.RawMessage `json:"facet,omitempty"`
	Fields json.RawMessage `json:"fields,omitempty"`

	// Filter stacks on top of query results to further narrow down the results. Similar to `ReadRequest.filter`
	Filter json.RawMessage `json:"filter,omitempty"`

	// Array of document field names to include in results. By default, all fields are included.
	IncludeFields *[]string `json:"include_fields,omitempty"`

	// Optionally can specify the page to retrieve. If page is set then only hits for this page is returned
	Page *int32 `json:"page,omitempty"`

	// Optionally can set the number of hits to be returned per page, default is 20.
	PageSize *int32 `json:"page_size,omitempty"`

	// Query string for searching across text fields
	Q *string `json:"q,omitempty"`

	// Array of fields to project search query against
	SearchFields *[]string `json:"search_fields,omitempty"`

	// Array of fields and corresponding sort orders to order the results `[{ "salary": "$desc" }]`
	Sort json.RawMessage `json:"sort,omitempty"`
}

// Response struct for search
type SearchResponse struct {
	Facets *SearchResponse_Facets `json:"facets,omitempty"`
	Hits   *[]SearchHit           `json:"hits,omitempty"`
	Meta   *SearchMetadata        `json:"meta,omitempty"`
}

// SearchResponse_Facets defines model for SearchResponse.Facets.
type SearchResponse_Facets struct {
	AdditionalProperties map[string]SearchFacet `json:"-"`
}

// SetRequest defines model for SetRequest.
type SetRequest struct {
	// optional - ttl specific to this key in second
	Ex *uint64 `json:"ex,omitempty"`

	// get the old value as part of response
	Get *bool `json:"get,omitempty"`

	// set only if the key doesn't exist
	Nx *bool `json:"nx,omitempty"`

	// optional - ttl specific to this key in millisecond
	Px *uint64 `json:"px,omitempty"`

	// free form byte[] value
	Value *[]byte `json:"value,omitempty"`

	// set only if the key exist
	Xx *bool `json:"xx,omitempty"`
}

// SetResponse defines model for SetResponse.
type SetResponse struct {
	// A detailed response message.
	Message *string `json:"message,omitempty"`

	// Optionally the old value if requested in SetRequest
	OldValue *[]byte `json:"old_value,omitempty"`

	// An enum with value set as "set" or "updated"
	Status *string `json:"status,omitempty"`
}

// Status defines model for Status.
type Status struct {
	// The Error type defines a logical error model
	Error *Error `json:"error,omitempty"`
}

// StreamingReadResponse defines model for StreamingReadResponse.
type StreamingReadResponse struct {
	// The Error type defines a logical error model
	Error  *Error        `json:"error,omitempty"`
	Result *ReadResponse `json:"result,omitempty"`
}

// StreamingSearchResponse defines model for StreamingSearchResponse.
type StreamingSearchResponse struct {
	// The Error type defines a logical error model
	Error *Error `json:"error,omitempty"`

	// Response struct for search
	Result *SearchResponse `json:"result,omitempty"`
}

// Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the metadata (headers) of subsequent requests in order to run them in the context of the same transaction.
type TransactionCtx struct {
	// Unique for a single transactional request.
	Id *string `json:"id,omitempty"`

	// Serves as an internal identifier.
	Origin *string `json:"origin,omitempty"`
}

// Options that can be used to modify the transaction semantics.
type TransactionOptions = map[string]interface{}

// To update the description of the app key
type UpdateAppKeyRequest struct {
	// A new human readable app description
	Description *string `json:"description,omitempty"`

	// app key id - this is not allowed to update
	Id *string `json:"id,omitempty"`

	// A new human readable app name
	Name *string `json:"name,omitempty"`
}

// Returns response for updating the app key description
type UpdateAppKeyResponse struct {
	// An user AppKey
	UpdatedAppKey *AppKey `json:"updated_app_key,omitempty"`
}

// Request update of namespace metadata
type UpdateNamespaceMetadataRequest struct {
	MetadataKey *string                 `json:"metadataKey,omitempty"`
	Value       *map[string]interface{} `json:"value,omitempty"`
}

// Update of namespace metadata response
type UpdateNamespaceMetadataResponse struct {
	MetadataKey *string                 `json:"metadataKey,omitempty"`
	NamespaceId *uint32                 `json:"namespaceId,omitempty"`
	Value       *map[string]interface{} `json:"value,omitempty"`
}

// UpdateRequest defines model for UpdateRequest.
type UpdateRequest struct {
	// Optionally specify a database branch name to perform operation on
	Branch *string `json:"branch,omitempty"`

	// Fields contains set of fields with the values which need to be updated. Should be proper JSON object.
	Fields json.RawMessage `json:"fields,omitempty"`

	// Update documents which matching specified filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: <li> To update a user document where the id has a value 1: ```{"id": 1 }``` <li> To update all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`
	Filter json.RawMessage `json:"filter,omitempty"`

	// Additional options for update requests.
	Options *UpdateRequestOptions `json:"options,omitempty"`
}

// Additional options for update requests.
type UpdateRequestOptions struct {
	// A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
	Collation *Collation `json:"collation,omitempty"`

	// Limit the number of documents to be updated
	Limit *int64 `json:"limit,omitempty"`

	// Additional options to modify write requests.
	WriteOptions *WriteOptions `json:"write_options,omitempty"`
}

// UpdateResponse defines model for UpdateResponse.
type UpdateResponse struct {
	// Has metadata related to the documents stored.
	Metadata *ResponseMetadata `json:"metadata,omitempty"`

	// Returns the number of documents modified.
	ModifiedCount *int32 `json:"modified_count,omitempty"`

	// an enum with value set as "updated".
	Status *string `json:"status,omitempty"`
}

// Request update of user metadata
type UpdateUserMetadataRequest struct {
	MetadataKey *string                 `json:"metadataKey,omitempty"`
	Value       *map[string]interface{} `json:"value,omitempty"`
}

// Update of user metadata response
type UpdateUserMetadataResponse struct {
	MetadataKey *string                 `json:"metadataKey,omitempty"`
	NamespaceId *uint32                 `json:"namespaceId,omitempty"`
	UserId      *string                 `json:"userId,omitempty"`
	Value       *map[string]interface{} `json:"value,omitempty"`
}

// Additional options to modify write requests.
type WriteOptions = map[string]interface{}

// ManagementGetNamespaceMetadataJSONBody defines parameters for ManagementGetNamespaceMetadata.
type ManagementGetNamespaceMetadataJSONBody = GetNamespaceMetadataRequest

// ManagementInsertNamespaceMetadataJSONBody defines parameters for ManagementInsertNamespaceMetadata.
type ManagementInsertNamespaceMetadataJSONBody = InsertNamespaceMetadataRequest

// ManagementUpdateNamespaceMetadataJSONBody defines parameters for ManagementUpdateNamespaceMetadata.
type ManagementUpdateNamespaceMetadataJSONBody = UpdateNamespaceMetadataRequest

// ManagementCreateNamespaceJSONBody defines parameters for ManagementCreateNamespace.
type ManagementCreateNamespaceJSONBody = CreateNamespaceRequest

// ManagementGetUserMetadataJSONBody defines parameters for ManagementGetUserMetadata.
type ManagementGetUserMetadataJSONBody = GetUserMetadataRequest

// ManagementInsertUserMetadataJSONBody defines parameters for ManagementInsertUserMetadata.
type ManagementInsertUserMetadataJSONBody = InsertUserMetadataRequest

// ManagementUpdateUserMetadataJSONBody defines parameters for ManagementUpdateUserMetadata.
type ManagementUpdateUserMetadataJSONBody = UpdateUserMetadataRequest

// ObservabilityQueryTimeSeriesMetricsJSONBody defines parameters for ObservabilityQueryTimeSeriesMetrics.
type ObservabilityQueryTimeSeriesMetricsJSONBody = QueryTimeSeriesMetricsRequest

// ObservabilityQuotaLimitsJSONBody defines parameters for ObservabilityQuotaLimits.
type ObservabilityQuotaLimitsJSONBody = QuotaLimitsRequest

// ObservabilityQuotaUsageJSONBody defines parameters for ObservabilityQuotaUsage.
type ObservabilityQuotaUsageJSONBody = QuotaUsageRequest

// TigrisCreateAppKeyJSONBody defines parameters for TigrisCreateAppKey.
type TigrisCreateAppKeyJSONBody = CreateAppKeyRequest

// TigrisDeleteAppKeyJSONBody defines parameters for TigrisDeleteAppKey.
type TigrisDeleteAppKeyJSONBody = DeleteAppKeyRequest

// TigrisRotateAppKeySecretJSONBody defines parameters for TigrisRotateAppKeySecret.
type TigrisRotateAppKeySecretJSONBody = RotateAppKeyRequest

// TigrisUpdateAppKeyJSONBody defines parameters for TigrisUpdateAppKey.
type TigrisUpdateAppKeyJSONBody = UpdateAppKeyRequest

// CacheCreateCacheJSONBody defines parameters for CacheCreateCache.
type CacheCreateCacheJSONBody = CreateCacheRequest

// CacheDeleteCacheJSONBody defines parameters for CacheDeleteCache.
type CacheDeleteCacheJSONBody = DeleteCacheRequest

// CacheKeysParams defines parameters for CacheKeys.
type CacheKeysParams struct {
	// optional key pattern
	Pattern *string `form:"pattern,omitempty" json:"pattern,omitempty"`
}

// CacheDelJSONBody defines parameters for CacheDel.
type CacheDelJSONBody = DelRequest

// CacheSetJSONBody defines parameters for CacheSet.
type CacheSetJSONBody = SetRequest

// TigrisCreateProjectJSONBody defines parameters for TigrisCreateProject.
type TigrisCreateProjectJSONBody = CreateProjectRequest

// TigrisCreateBranchJSONBody defines parameters for TigrisCreateBranch.
type TigrisCreateBranchJSONBody = CreateBranchRequest

// TigrisDeleteBranchJSONBody defines parameters for TigrisDeleteBranch.
type TigrisDeleteBranchJSONBody = DeleteBranchRequest

// TigrisListCollectionsParams defines parameters for TigrisListCollections.
type TigrisListCollectionsParams struct {
	// Optionally specify a database branch name to perform operation on
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`
}

// TigrisCreateOrUpdateCollectionJSONBody defines parameters for TigrisCreateOrUpdateCollection.
type TigrisCreateOrUpdateCollectionJSONBody = CreateOrUpdateCollectionRequest

// TigrisDescribeCollectionJSONBody defines parameters for TigrisDescribeCollection.
type TigrisDescribeCollectionJSONBody = DescribeCollectionRequest

// TigrisDeleteJSONBody defines parameters for TigrisDelete.
type TigrisDeleteJSONBody = DeleteRequest

// TigrisImportJSONBody defines parameters for TigrisImport.
type TigrisImportJSONBody = ImportRequest

// TigrisInsertJSONBody defines parameters for TigrisInsert.
type TigrisInsertJSONBody = InsertRequest

// TigrisReadJSONBody defines parameters for TigrisRead.
type TigrisReadJSONBody = ReadRequest

// TigrisReplaceJSONBody defines parameters for TigrisReplace.
type TigrisReplaceJSONBody = ReplaceRequest

// TigrisSearchJSONBody defines parameters for TigrisSearch.
type TigrisSearchJSONBody = SearchRequest

// TigrisUpdateJSONBody defines parameters for TigrisUpdate.
type TigrisUpdateJSONBody = UpdateRequest

// TigrisDropCollectionJSONBody defines parameters for TigrisDropCollection.
type TigrisDropCollectionJSONBody = DropCollectionRequest

// TigrisDescribeDatabaseJSONBody defines parameters for TigrisDescribeDatabase.
type TigrisDescribeDatabaseJSONBody = DescribeDatabaseRequest

// TigrisBeginTransactionJSONBody defines parameters for TigrisBeginTransaction.
type TigrisBeginTransactionJSONBody = BeginTransactionRequest

// TigrisCommitTransactionJSONBody defines parameters for TigrisCommitTransaction.
type TigrisCommitTransactionJSONBody = CommitTransactionRequest

// TigrisRollbackTransactionJSONBody defines parameters for TigrisRollbackTransaction.
type TigrisRollbackTransactionJSONBody = RollbackTransactionRequest

// TigrisDeleteProjectJSONBody defines parameters for TigrisDeleteProject.
type TigrisDeleteProjectJSONBody = DeleteProjectRequest

// RealtimeReadMessagesParams defines parameters for RealtimeReadMessages.
type RealtimeReadMessagesParams struct {
	SessionId *string `form:"session_id,omitempty" json:"session_id,omitempty"`
	SocketId  *string `form:"socket_id,omitempty" json:"socket_id,omitempty"`
	Event     *string `form:"event,omitempty" json:"event,omitempty"`
	Start     *string `form:"start,omitempty" json:"start,omitempty"`
	End       *string `form:"end,omitempty" json:"end,omitempty"`
	Limit     *int64  `form:"limit,omitempty" json:"limit,omitempty"`
}

// RealtimeMessagesJSONBody defines parameters for RealtimeMessages.
type RealtimeMessagesJSONBody = MessagesRequest

// RealtimeListSubscriptionsParams defines parameters for RealtimeListSubscriptions.
type RealtimeListSubscriptionsParams struct {
	PageSize *int32 `form:"page_size,omitempty" json:"page_size,omitempty"`
	Page     *int32 `form:"page,omitempty" json:"page,omitempty"`
}

// ManagementGetNamespaceMetadataJSONRequestBody defines body for ManagementGetNamespaceMetadata for application/json ContentType.
type ManagementGetNamespaceMetadataJSONRequestBody = ManagementGetNamespaceMetadataJSONBody

// ManagementInsertNamespaceMetadataJSONRequestBody defines body for ManagementInsertNamespaceMetadata for application/json ContentType.
type ManagementInsertNamespaceMetadataJSONRequestBody = ManagementInsertNamespaceMetadataJSONBody

// ManagementUpdateNamespaceMetadataJSONRequestBody defines body for ManagementUpdateNamespaceMetadata for application/json ContentType.
type ManagementUpdateNamespaceMetadataJSONRequestBody = ManagementUpdateNamespaceMetadataJSONBody

// ManagementCreateNamespaceJSONRequestBody defines body for ManagementCreateNamespace for application/json ContentType.
type ManagementCreateNamespaceJSONRequestBody = ManagementCreateNamespaceJSONBody

// ManagementGetUserMetadataJSONRequestBody defines body for ManagementGetUserMetadata for application/json ContentType.
type ManagementGetUserMetadataJSONRequestBody = ManagementGetUserMetadataJSONBody

// ManagementInsertUserMetadataJSONRequestBody defines body for ManagementInsertUserMetadata for application/json ContentType.
type ManagementInsertUserMetadataJSONRequestBody = ManagementInsertUserMetadataJSONBody

// ManagementUpdateUserMetadataJSONRequestBody defines body for ManagementUpdateUserMetadata for application/json ContentType.
type ManagementUpdateUserMetadataJSONRequestBody = ManagementUpdateUserMetadataJSONBody

// ObservabilityQueryTimeSeriesMetricsJSONRequestBody defines body for ObservabilityQueryTimeSeriesMetrics for application/json ContentType.
type ObservabilityQueryTimeSeriesMetricsJSONRequestBody = ObservabilityQueryTimeSeriesMetricsJSONBody

// ObservabilityQuotaLimitsJSONRequestBody defines body for ObservabilityQuotaLimits for application/json ContentType.
type ObservabilityQuotaLimitsJSONRequestBody = ObservabilityQuotaLimitsJSONBody

// ObservabilityQuotaUsageJSONRequestBody defines body for ObservabilityQuotaUsage for application/json ContentType.
type ObservabilityQuotaUsageJSONRequestBody = ObservabilityQuotaUsageJSONBody

// TigrisCreateAppKeyJSONRequestBody defines body for TigrisCreateAppKey for application/json ContentType.
type TigrisCreateAppKeyJSONRequestBody = TigrisCreateAppKeyJSONBody

// TigrisDeleteAppKeyJSONRequestBody defines body for TigrisDeleteAppKey for application/json ContentType.
type TigrisDeleteAppKeyJSONRequestBody = TigrisDeleteAppKeyJSONBody

// TigrisRotateAppKeySecretJSONRequestBody defines body for TigrisRotateAppKeySecret for application/json ContentType.
type TigrisRotateAppKeySecretJSONRequestBody = TigrisRotateAppKeySecretJSONBody

// TigrisUpdateAppKeyJSONRequestBody defines body for TigrisUpdateAppKey for application/json ContentType.
type TigrisUpdateAppKeyJSONRequestBody = TigrisUpdateAppKeyJSONBody

// CacheCreateCacheJSONRequestBody defines body for CacheCreateCache for application/json ContentType.
type CacheCreateCacheJSONRequestBody = CacheCreateCacheJSONBody

// CacheDeleteCacheJSONRequestBody defines body for CacheDeleteCache for application/json ContentType.
type CacheDeleteCacheJSONRequestBody = CacheDeleteCacheJSONBody

// CacheDelJSONRequestBody defines body for CacheDel for application/json ContentType.
type CacheDelJSONRequestBody = CacheDelJSONBody

// CacheSetJSONRequestBody defines body for CacheSet for application/json ContentType.
type CacheSetJSONRequestBody = CacheSetJSONBody

// TigrisCreateProjectJSONRequestBody defines body for TigrisCreateProject for application/json ContentType.
type TigrisCreateProjectJSONRequestBody = TigrisCreateProjectJSONBody

// TigrisCreateBranchJSONRequestBody defines body for TigrisCreateBranch for application/json ContentType.
type TigrisCreateBranchJSONRequestBody = TigrisCreateBranchJSONBody

// TigrisDeleteBranchJSONRequestBody defines body for TigrisDeleteBranch for application/json ContentType.
type TigrisDeleteBranchJSONRequestBody = TigrisDeleteBranchJSONBody

// TigrisCreateOrUpdateCollectionJSONRequestBody defines body for TigrisCreateOrUpdateCollection for application/json ContentType.
type TigrisCreateOrUpdateCollectionJSONRequestBody = TigrisCreateOrUpdateCollectionJSONBody

// TigrisDescribeCollectionJSONRequestBody defines body for TigrisDescribeCollection for application/json ContentType.
type TigrisDescribeCollectionJSONRequestBody = TigrisDescribeCollectionJSONBody

// TigrisDeleteJSONRequestBody defines body for TigrisDelete for application/json ContentType.
type TigrisDeleteJSONRequestBody = TigrisDeleteJSONBody

// TigrisImportJSONRequestBody defines body for TigrisImport for application/json ContentType.
type TigrisImportJSONRequestBody = TigrisImportJSONBody

// TigrisInsertJSONRequestBody defines body for TigrisInsert for application/json ContentType.
type TigrisInsertJSONRequestBody = TigrisInsertJSONBody

// TigrisReadJSONRequestBody defines body for TigrisRead for application/json ContentType.
type TigrisReadJSONRequestBody = TigrisReadJSONBody

// TigrisReplaceJSONRequestBody defines body for TigrisReplace for application/json ContentType.
type TigrisReplaceJSONRequestBody = TigrisReplaceJSONBody

// TigrisSearchJSONRequestBody defines body for TigrisSearch for application/json ContentType.
type TigrisSearchJSONRequestBody = TigrisSearchJSONBody

// TigrisUpdateJSONRequestBody defines body for TigrisUpdate for application/json ContentType.
type TigrisUpdateJSONRequestBody = TigrisUpdateJSONBody

// TigrisDropCollectionJSONRequestBody defines body for TigrisDropCollection for application/json ContentType.
type TigrisDropCollectionJSONRequestBody = TigrisDropCollectionJSONBody

// TigrisDescribeDatabaseJSONRequestBody defines body for TigrisDescribeDatabase for application/json ContentType.
type TigrisDescribeDatabaseJSONRequestBody = TigrisDescribeDatabaseJSONBody

// TigrisBeginTransactionJSONRequestBody defines body for TigrisBeginTransaction for application/json ContentType.
type TigrisBeginTransactionJSONRequestBody = TigrisBeginTransactionJSONBody

// TigrisCommitTransactionJSONRequestBody defines body for TigrisCommitTransaction for application/json ContentType.
type TigrisCommitTransactionJSONRequestBody = TigrisCommitTransactionJSONBody

// TigrisRollbackTransactionJSONRequestBody defines body for TigrisRollbackTransaction for application/json ContentType.
type TigrisRollbackTransactionJSONRequestBody = TigrisRollbackTransactionJSONBody

// TigrisDeleteProjectJSONRequestBody defines body for TigrisDeleteProject for application/json ContentType.
type TigrisDeleteProjectJSONRequestBody = TigrisDeleteProjectJSONBody

// RealtimeMessagesJSONRequestBody defines body for RealtimeMessages for application/json ContentType.
type RealtimeMessagesJSONRequestBody = RealtimeMessagesJSONBody

// Getter for additional properties for SearchResponse_Facets. Returns the specified
// element and whether it was found
func (a SearchResponse_Facets) Get(fieldName string) (value SearchFacet, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SearchResponse_Facets
func (a *SearchResponse_Facets) Set(fieldName string, value SearchFacet) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]SearchFacet)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SearchResponse_Facets to handle AdditionalProperties
func (a *SearchResponse_Facets) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]SearchFacet)
		for fieldName, fieldBuf := range object {
			var fieldVal SearchFacet
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SearchResponse_Facets to handle AdditionalProperties
func (a SearchResponse_Facets) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AuthGetAccessToken request with any body
	AuthGetAccessTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HealthAPIHealth request
	HealthAPIHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagementGetNamespaceMetadata request with any body
	ManagementGetNamespaceMetadataWithBody(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ManagementGetNamespaceMetadata(ctx context.Context, metadataKey string, body ManagementGetNamespaceMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagementInsertNamespaceMetadata request with any body
	ManagementInsertNamespaceMetadataWithBody(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ManagementInsertNamespaceMetadata(ctx context.Context, metadataKey string, body ManagementInsertNamespaceMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagementUpdateNamespaceMetadata request with any body
	ManagementUpdateNamespaceMetadataWithBody(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ManagementUpdateNamespaceMetadata(ctx context.Context, metadataKey string, body ManagementUpdateNamespaceMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagementCreateNamespace request with any body
	ManagementCreateNamespaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ManagementCreateNamespace(ctx context.Context, body ManagementCreateNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagementDescribeNamespaces request
	ManagementDescribeNamespaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagementListNamespaces request
	ManagementListNamespaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagementGetUserMetadata request with any body
	ManagementGetUserMetadataWithBody(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ManagementGetUserMetadata(ctx context.Context, metadataKey string, body ManagementGetUserMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagementInsertUserMetadata request with any body
	ManagementInsertUserMetadataWithBody(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ManagementInsertUserMetadata(ctx context.Context, metadataKey string, body ManagementInsertUserMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagementUpdateUserMetadata request with any body
	ManagementUpdateUserMetadataWithBody(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ManagementUpdateUserMetadata(ctx context.Context, metadataKey string, body ManagementUpdateUserMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ObservabilityGetInfo request
	ObservabilityGetInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ObservabilityQueryTimeSeriesMetrics request with any body
	ObservabilityQueryTimeSeriesMetricsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ObservabilityQueryTimeSeriesMetrics(ctx context.Context, body ObservabilityQueryTimeSeriesMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ObservabilityQuotaLimits request with any body
	ObservabilityQuotaLimitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ObservabilityQuotaLimits(ctx context.Context, body ObservabilityQuotaLimitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ObservabilityQuotaUsage request with any body
	ObservabilityQuotaUsageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ObservabilityQuotaUsage(ctx context.Context, body ObservabilityQuotaUsageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisListProjects request
	TigrisListProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisListAppKeys request
	TigrisListAppKeys(ctx context.Context, project string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisCreateAppKey request with any body
	TigrisCreateAppKeyWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisCreateAppKey(ctx context.Context, project string, body TigrisCreateAppKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDeleteAppKey request with any body
	TigrisDeleteAppKeyWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDeleteAppKey(ctx context.Context, project string, body TigrisDeleteAppKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisRotateAppKeySecret request with any body
	TigrisRotateAppKeySecretWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisRotateAppKeySecret(ctx context.Context, project string, body TigrisRotateAppKeySecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisUpdateAppKey request with any body
	TigrisUpdateAppKeyWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisUpdateAppKey(ctx context.Context, project string, body TigrisUpdateAppKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CacheCreateCache request with any body
	CacheCreateCacheWithBody(ctx context.Context, project string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CacheCreateCache(ctx context.Context, project string, name string, body CacheCreateCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CacheDeleteCache request with any body
	CacheDeleteCacheWithBody(ctx context.Context, project string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CacheDeleteCache(ctx context.Context, project string, name string, body CacheDeleteCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CacheKeys request
	CacheKeys(ctx context.Context, project string, name string, params *CacheKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CacheDel request with any body
	CacheDelWithBody(ctx context.Context, project string, name string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CacheDel(ctx context.Context, project string, name string, key string, body CacheDelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CacheGet request
	CacheGet(ctx context.Context, project string, name string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CacheSet request with any body
	CacheSetWithBody(ctx context.Context, project string, name string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CacheSet(ctx context.Context, project string, name string, key string, body CacheSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisCreateProject request with any body
	TigrisCreateProjectWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisCreateProject(ctx context.Context, project string, body TigrisCreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisCreateBranch request with any body
	TigrisCreateBranchWithBody(ctx context.Context, project string, branch string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisCreateBranch(ctx context.Context, project string, branch string, body TigrisCreateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDeleteBranch request with any body
	TigrisDeleteBranchWithBody(ctx context.Context, project string, branch string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDeleteBranch(ctx context.Context, project string, branch string, body TigrisDeleteBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisListCollections request
	TigrisListCollections(ctx context.Context, project string, params *TigrisListCollectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisCreateOrUpdateCollection request with any body
	TigrisCreateOrUpdateCollectionWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisCreateOrUpdateCollection(ctx context.Context, project string, collection string, body TigrisCreateOrUpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDescribeCollection request with any body
	TigrisDescribeCollectionWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDescribeCollection(ctx context.Context, project string, collection string, body TigrisDescribeCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDelete request with any body
	TigrisDeleteWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDelete(ctx context.Context, project string, collection string, body TigrisDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisImport request with any body
	TigrisImportWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisImport(ctx context.Context, project string, collection string, body TigrisImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisInsert request with any body
	TigrisInsertWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisInsert(ctx context.Context, project string, collection string, body TigrisInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisRead request with any body
	TigrisReadWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisRead(ctx context.Context, project string, collection string, body TigrisReadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisReplace request with any body
	TigrisReplaceWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisReplace(ctx context.Context, project string, collection string, body TigrisReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisSearch request with any body
	TigrisSearchWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisSearch(ctx context.Context, project string, collection string, body TigrisSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisUpdate request with any body
	TigrisUpdateWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisUpdate(ctx context.Context, project string, collection string, body TigrisUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDropCollection request with any body
	TigrisDropCollectionWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDropCollection(ctx context.Context, project string, collection string, body TigrisDropCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDescribeDatabase request with any body
	TigrisDescribeDatabaseWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDescribeDatabase(ctx context.Context, project string, body TigrisDescribeDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisBeginTransaction request with any body
	TigrisBeginTransactionWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisBeginTransaction(ctx context.Context, project string, body TigrisBeginTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisCommitTransaction request with any body
	TigrisCommitTransactionWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisCommitTransaction(ctx context.Context, project string, body TigrisCommitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisRollbackTransaction request with any body
	TigrisRollbackTransactionWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisRollbackTransaction(ctx context.Context, project string, body TigrisRollbackTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDeleteProject request with any body
	TigrisDeleteProjectWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDeleteProject(ctx context.Context, project string, body TigrisDeleteProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RealtimeGetRTChannels request
	RealtimeGetRTChannels(ctx context.Context, project string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RealtimeGetRTChannel request
	RealtimeGetRTChannel(ctx context.Context, project string, channel string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RealtimeReadMessages request
	RealtimeReadMessages(ctx context.Context, project string, channel string, params *RealtimeReadMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RealtimeMessages request with any body
	RealtimeMessagesWithBody(ctx context.Context, project string, channel string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RealtimeMessages(ctx context.Context, project string, channel string, body RealtimeMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RealtimePresence request
	RealtimePresence(ctx context.Context, project string, channel string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RealtimeListSubscriptions request
	RealtimeListSubscriptions(ctx context.Context, project string, channel string, params *RealtimeListSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AuthGetAccessTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthGetAccessTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HealthAPIHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthAPIHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagementGetNamespaceMetadataWithBody(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManagementGetNamespaceMetadataRequestWithBody(c.Server, metadataKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagementGetNamespaceMetadata(ctx context.Context, metadataKey string, body ManagementGetNamespaceMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManagementGetNamespaceMetadataRequest(c.Server, metadataKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagementInsertNamespaceMetadataWithBody(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManagementInsertNamespaceMetadataRequestWithBody(c.Server, metadataKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagementInsertNamespaceMetadata(ctx context.Context, metadataKey string, body ManagementInsertNamespaceMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManagementInsertNamespaceMetadataRequest(c.Server, metadataKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagementUpdateNamespaceMetadataWithBody(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManagementUpdateNamespaceMetadataRequestWithBody(c.Server, metadataKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagementUpdateNamespaceMetadata(ctx context.Context, metadataKey string, body ManagementUpdateNamespaceMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManagementUpdateNamespaceMetadataRequest(c.Server, metadataKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagementCreateNamespaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManagementCreateNamespaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagementCreateNamespace(ctx context.Context, body ManagementCreateNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManagementCreateNamespaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagementDescribeNamespaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManagementDescribeNamespacesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagementListNamespaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManagementListNamespacesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagementGetUserMetadataWithBody(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManagementGetUserMetadataRequestWithBody(c.Server, metadataKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagementGetUserMetadata(ctx context.Context, metadataKey string, body ManagementGetUserMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManagementGetUserMetadataRequest(c.Server, metadataKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagementInsertUserMetadataWithBody(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManagementInsertUserMetadataRequestWithBody(c.Server, metadataKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagementInsertUserMetadata(ctx context.Context, metadataKey string, body ManagementInsertUserMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManagementInsertUserMetadataRequest(c.Server, metadataKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagementUpdateUserMetadataWithBody(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManagementUpdateUserMetadataRequestWithBody(c.Server, metadataKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagementUpdateUserMetadata(ctx context.Context, metadataKey string, body ManagementUpdateUserMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManagementUpdateUserMetadataRequest(c.Server, metadataKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObservabilityGetInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObservabilityGetInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObservabilityQueryTimeSeriesMetricsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObservabilityQueryTimeSeriesMetricsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObservabilityQueryTimeSeriesMetrics(ctx context.Context, body ObservabilityQueryTimeSeriesMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObservabilityQueryTimeSeriesMetricsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObservabilityQuotaLimitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObservabilityQuotaLimitsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObservabilityQuotaLimits(ctx context.Context, body ObservabilityQuotaLimitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObservabilityQuotaLimitsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObservabilityQuotaUsageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObservabilityQuotaUsageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObservabilityQuotaUsage(ctx context.Context, body ObservabilityQuotaUsageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObservabilityQuotaUsageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisListProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisListProjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisListAppKeys(ctx context.Context, project string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisListAppKeysRequest(c.Server, project)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisCreateAppKeyWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisCreateAppKeyRequestWithBody(c.Server, project, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisCreateAppKey(ctx context.Context, project string, body TigrisCreateAppKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisCreateAppKeyRequest(c.Server, project, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDeleteAppKeyWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDeleteAppKeyRequestWithBody(c.Server, project, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDeleteAppKey(ctx context.Context, project string, body TigrisDeleteAppKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDeleteAppKeyRequest(c.Server, project, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisRotateAppKeySecretWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisRotateAppKeySecretRequestWithBody(c.Server, project, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisRotateAppKeySecret(ctx context.Context, project string, body TigrisRotateAppKeySecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisRotateAppKeySecretRequest(c.Server, project, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisUpdateAppKeyWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisUpdateAppKeyRequestWithBody(c.Server, project, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisUpdateAppKey(ctx context.Context, project string, body TigrisUpdateAppKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisUpdateAppKeyRequest(c.Server, project, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CacheCreateCacheWithBody(ctx context.Context, project string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCacheCreateCacheRequestWithBody(c.Server, project, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CacheCreateCache(ctx context.Context, project string, name string, body CacheCreateCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCacheCreateCacheRequest(c.Server, project, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CacheDeleteCacheWithBody(ctx context.Context, project string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCacheDeleteCacheRequestWithBody(c.Server, project, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CacheDeleteCache(ctx context.Context, project string, name string, body CacheDeleteCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCacheDeleteCacheRequest(c.Server, project, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CacheKeys(ctx context.Context, project string, name string, params *CacheKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCacheKeysRequest(c.Server, project, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CacheDelWithBody(ctx context.Context, project string, name string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCacheDelRequestWithBody(c.Server, project, name, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CacheDel(ctx context.Context, project string, name string, key string, body CacheDelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCacheDelRequest(c.Server, project, name, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CacheGet(ctx context.Context, project string, name string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCacheGetRequest(c.Server, project, name, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CacheSetWithBody(ctx context.Context, project string, name string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCacheSetRequestWithBody(c.Server, project, name, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CacheSet(ctx context.Context, project string, name string, key string, body CacheSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCacheSetRequest(c.Server, project, name, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisCreateProjectWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisCreateProjectRequestWithBody(c.Server, project, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisCreateProject(ctx context.Context, project string, body TigrisCreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisCreateProjectRequest(c.Server, project, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisCreateBranchWithBody(ctx context.Context, project string, branch string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisCreateBranchRequestWithBody(c.Server, project, branch, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisCreateBranch(ctx context.Context, project string, branch string, body TigrisCreateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisCreateBranchRequest(c.Server, project, branch, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDeleteBranchWithBody(ctx context.Context, project string, branch string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDeleteBranchRequestWithBody(c.Server, project, branch, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDeleteBranch(ctx context.Context, project string, branch string, body TigrisDeleteBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDeleteBranchRequest(c.Server, project, branch, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisListCollections(ctx context.Context, project string, params *TigrisListCollectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisListCollectionsRequest(c.Server, project, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisCreateOrUpdateCollectionWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisCreateOrUpdateCollectionRequestWithBody(c.Server, project, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisCreateOrUpdateCollection(ctx context.Context, project string, collection string, body TigrisCreateOrUpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisCreateOrUpdateCollectionRequest(c.Server, project, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDescribeCollectionWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDescribeCollectionRequestWithBody(c.Server, project, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDescribeCollection(ctx context.Context, project string, collection string, body TigrisDescribeCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDescribeCollectionRequest(c.Server, project, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDeleteWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDeleteRequestWithBody(c.Server, project, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDelete(ctx context.Context, project string, collection string, body TigrisDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDeleteRequest(c.Server, project, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisImportWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisImportRequestWithBody(c.Server, project, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisImport(ctx context.Context, project string, collection string, body TigrisImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisImportRequest(c.Server, project, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisInsertWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisInsertRequestWithBody(c.Server, project, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisInsert(ctx context.Context, project string, collection string, body TigrisInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisInsertRequest(c.Server, project, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisReadWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisReadRequestWithBody(c.Server, project, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisRead(ctx context.Context, project string, collection string, body TigrisReadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisReadRequest(c.Server, project, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisReplaceWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisReplaceRequestWithBody(c.Server, project, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisReplace(ctx context.Context, project string, collection string, body TigrisReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisReplaceRequest(c.Server, project, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisSearchWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisSearchRequestWithBody(c.Server, project, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisSearch(ctx context.Context, project string, collection string, body TigrisSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisSearchRequest(c.Server, project, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisUpdateWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisUpdateRequestWithBody(c.Server, project, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisUpdate(ctx context.Context, project string, collection string, body TigrisUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisUpdateRequest(c.Server, project, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDropCollectionWithBody(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDropCollectionRequestWithBody(c.Server, project, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDropCollection(ctx context.Context, project string, collection string, body TigrisDropCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDropCollectionRequest(c.Server, project, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDescribeDatabaseWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDescribeDatabaseRequestWithBody(c.Server, project, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDescribeDatabase(ctx context.Context, project string, body TigrisDescribeDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDescribeDatabaseRequest(c.Server, project, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisBeginTransactionWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisBeginTransactionRequestWithBody(c.Server, project, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisBeginTransaction(ctx context.Context, project string, body TigrisBeginTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisBeginTransactionRequest(c.Server, project, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisCommitTransactionWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisCommitTransactionRequestWithBody(c.Server, project, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisCommitTransaction(ctx context.Context, project string, body TigrisCommitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisCommitTransactionRequest(c.Server, project, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisRollbackTransactionWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisRollbackTransactionRequestWithBody(c.Server, project, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisRollbackTransaction(ctx context.Context, project string, body TigrisRollbackTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisRollbackTransactionRequest(c.Server, project, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDeleteProjectWithBody(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDeleteProjectRequestWithBody(c.Server, project, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDeleteProject(ctx context.Context, project string, body TigrisDeleteProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDeleteProjectRequest(c.Server, project, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RealtimeGetRTChannels(ctx context.Context, project string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRealtimeGetRTChannelsRequest(c.Server, project)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RealtimeGetRTChannel(ctx context.Context, project string, channel string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRealtimeGetRTChannelRequest(c.Server, project, channel)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RealtimeReadMessages(ctx context.Context, project string, channel string, params *RealtimeReadMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRealtimeReadMessagesRequest(c.Server, project, channel, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RealtimeMessagesWithBody(ctx context.Context, project string, channel string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRealtimeMessagesRequestWithBody(c.Server, project, channel, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RealtimeMessages(ctx context.Context, project string, channel string, body RealtimeMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRealtimeMessagesRequest(c.Server, project, channel, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RealtimePresence(ctx context.Context, project string, channel string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRealtimePresenceRequest(c.Server, project, channel)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RealtimeListSubscriptions(ctx context.Context, project string, channel string, params *RealtimeListSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRealtimeListSubscriptionsRequest(c.Server, project, channel, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAuthGetAccessTokenRequestWithBody generates requests for AuthGetAccessToken with any type of body
func NewAuthGetAccessTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHealthAPIHealthRequest generates requests for HealthAPIHealth
func NewHealthAPIHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManagementGetNamespaceMetadataRequest calls the generic ManagementGetNamespaceMetadata builder with application/json body
func NewManagementGetNamespaceMetadataRequest(server string, metadataKey string, body ManagementGetNamespaceMetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewManagementGetNamespaceMetadataRequestWithBody(server, metadataKey, "application/json", bodyReader)
}

// NewManagementGetNamespaceMetadataRequestWithBody generates requests for ManagementGetNamespaceMetadata with any type of body
func NewManagementGetNamespaceMetadataRequestWithBody(server string, metadataKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "metadataKey", runtime.ParamLocationPath, metadataKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/management/namespace/metadata/%s/get", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewManagementInsertNamespaceMetadataRequest calls the generic ManagementInsertNamespaceMetadata builder with application/json body
func NewManagementInsertNamespaceMetadataRequest(server string, metadataKey string, body ManagementInsertNamespaceMetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewManagementInsertNamespaceMetadataRequestWithBody(server, metadataKey, "application/json", bodyReader)
}

// NewManagementInsertNamespaceMetadataRequestWithBody generates requests for ManagementInsertNamespaceMetadata with any type of body
func NewManagementInsertNamespaceMetadataRequestWithBody(server string, metadataKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "metadataKey", runtime.ParamLocationPath, metadataKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/management/namespace/metadata/%s/insert", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewManagementUpdateNamespaceMetadataRequest calls the generic ManagementUpdateNamespaceMetadata builder with application/json body
func NewManagementUpdateNamespaceMetadataRequest(server string, metadataKey string, body ManagementUpdateNamespaceMetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewManagementUpdateNamespaceMetadataRequestWithBody(server, metadataKey, "application/json", bodyReader)
}

// NewManagementUpdateNamespaceMetadataRequestWithBody generates requests for ManagementUpdateNamespaceMetadata with any type of body
func NewManagementUpdateNamespaceMetadataRequestWithBody(server string, metadataKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "metadataKey", runtime.ParamLocationPath, metadataKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/management/namespace/metadata/%s/update", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewManagementCreateNamespaceRequest calls the generic ManagementCreateNamespace builder with application/json body
func NewManagementCreateNamespaceRequest(server string, body ManagementCreateNamespaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewManagementCreateNamespaceRequestWithBody(server, "application/json", bodyReader)
}

// NewManagementCreateNamespaceRequestWithBody generates requests for ManagementCreateNamespace with any type of body
func NewManagementCreateNamespaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/management/namespaces/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewManagementDescribeNamespacesRequest generates requests for ManagementDescribeNamespaces
func NewManagementDescribeNamespacesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/management/namespaces/describe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManagementListNamespacesRequest generates requests for ManagementListNamespaces
func NewManagementListNamespacesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/management/namespaces/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManagementGetUserMetadataRequest calls the generic ManagementGetUserMetadata builder with application/json body
func NewManagementGetUserMetadataRequest(server string, metadataKey string, body ManagementGetUserMetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewManagementGetUserMetadataRequestWithBody(server, metadataKey, "application/json", bodyReader)
}

// NewManagementGetUserMetadataRequestWithBody generates requests for ManagementGetUserMetadata with any type of body
func NewManagementGetUserMetadataRequestWithBody(server string, metadataKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "metadataKey", runtime.ParamLocationPath, metadataKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/management/users/metadata/%s/get", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewManagementInsertUserMetadataRequest calls the generic ManagementInsertUserMetadata builder with application/json body
func NewManagementInsertUserMetadataRequest(server string, metadataKey string, body ManagementInsertUserMetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewManagementInsertUserMetadataRequestWithBody(server, metadataKey, "application/json", bodyReader)
}

// NewManagementInsertUserMetadataRequestWithBody generates requests for ManagementInsertUserMetadata with any type of body
func NewManagementInsertUserMetadataRequestWithBody(server string, metadataKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "metadataKey", runtime.ParamLocationPath, metadataKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/management/users/metadata/%s/insert", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewManagementUpdateUserMetadataRequest calls the generic ManagementUpdateUserMetadata builder with application/json body
func NewManagementUpdateUserMetadataRequest(server string, metadataKey string, body ManagementUpdateUserMetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewManagementUpdateUserMetadataRequestWithBody(server, metadataKey, "application/json", bodyReader)
}

// NewManagementUpdateUserMetadataRequestWithBody generates requests for ManagementUpdateUserMetadata with any type of body
func NewManagementUpdateUserMetadataRequestWithBody(server string, metadataKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "metadataKey", runtime.ParamLocationPath, metadataKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/management/users/metadata/%s/update", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewObservabilityGetInfoRequest generates requests for ObservabilityGetInfo
func NewObservabilityGetInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/observability/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewObservabilityQueryTimeSeriesMetricsRequest calls the generic ObservabilityQueryTimeSeriesMetrics builder with application/json body
func NewObservabilityQueryTimeSeriesMetricsRequest(server string, body ObservabilityQueryTimeSeriesMetricsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewObservabilityQueryTimeSeriesMetricsRequestWithBody(server, "application/json", bodyReader)
}

// NewObservabilityQueryTimeSeriesMetricsRequestWithBody generates requests for ObservabilityQueryTimeSeriesMetrics with any type of body
func NewObservabilityQueryTimeSeriesMetricsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/observability/metrics/timeseries/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewObservabilityQuotaLimitsRequest calls the generic ObservabilityQuotaLimits builder with application/json body
func NewObservabilityQuotaLimitsRequest(server string, body ObservabilityQuotaLimitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewObservabilityQuotaLimitsRequestWithBody(server, "application/json", bodyReader)
}

// NewObservabilityQuotaLimitsRequestWithBody generates requests for ObservabilityQuotaLimits with any type of body
func NewObservabilityQuotaLimitsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/observability/quota/limits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewObservabilityQuotaUsageRequest calls the generic ObservabilityQuotaUsage builder with application/json body
func NewObservabilityQuotaUsageRequest(server string, body ObservabilityQuotaUsageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewObservabilityQuotaUsageRequestWithBody(server, "application/json", bodyReader)
}

// NewObservabilityQuotaUsageRequestWithBody generates requests for ObservabilityQuotaUsage with any type of body
func NewObservabilityQuotaUsageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/observability/quota/usage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisListProjectsRequest generates requests for TigrisListProjects
func NewTigrisListProjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTigrisListAppKeysRequest generates requests for TigrisListAppKeys
func NewTigrisListAppKeysRequest(server string, project string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/apps/keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTigrisCreateAppKeyRequest calls the generic TigrisCreateAppKey builder with application/json body
func NewTigrisCreateAppKeyRequest(server string, project string, body TigrisCreateAppKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisCreateAppKeyRequestWithBody(server, project, "application/json", bodyReader)
}

// NewTigrisCreateAppKeyRequestWithBody generates requests for TigrisCreateAppKey with any type of body
func NewTigrisCreateAppKeyRequestWithBody(server string, project string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/apps/keys/create", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDeleteAppKeyRequest calls the generic TigrisDeleteAppKey builder with application/json body
func NewTigrisDeleteAppKeyRequest(server string, project string, body TigrisDeleteAppKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDeleteAppKeyRequestWithBody(server, project, "application/json", bodyReader)
}

// NewTigrisDeleteAppKeyRequestWithBody generates requests for TigrisDeleteAppKey with any type of body
func NewTigrisDeleteAppKeyRequestWithBody(server string, project string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/apps/keys/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisRotateAppKeySecretRequest calls the generic TigrisRotateAppKeySecret builder with application/json body
func NewTigrisRotateAppKeySecretRequest(server string, project string, body TigrisRotateAppKeySecretJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisRotateAppKeySecretRequestWithBody(server, project, "application/json", bodyReader)
}

// NewTigrisRotateAppKeySecretRequestWithBody generates requests for TigrisRotateAppKeySecret with any type of body
func NewTigrisRotateAppKeySecretRequestWithBody(server string, project string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/apps/keys/rotate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisUpdateAppKeyRequest calls the generic TigrisUpdateAppKey builder with application/json body
func NewTigrisUpdateAppKeyRequest(server string, project string, body TigrisUpdateAppKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisUpdateAppKeyRequestWithBody(server, project, "application/json", bodyReader)
}

// NewTigrisUpdateAppKeyRequestWithBody generates requests for TigrisUpdateAppKey with any type of body
func NewTigrisUpdateAppKeyRequestWithBody(server string, project string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/apps/keys/update", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCacheCreateCacheRequest calls the generic CacheCreateCache builder with application/json body
func NewCacheCreateCacheRequest(server string, project string, name string, body CacheCreateCacheJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCacheCreateCacheRequestWithBody(server, project, name, "application/json", bodyReader)
}

// NewCacheCreateCacheRequestWithBody generates requests for CacheCreateCache with any type of body
func NewCacheCreateCacheRequestWithBody(server string, project string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/caches/%s/create", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCacheDeleteCacheRequest calls the generic CacheDeleteCache builder with application/json body
func NewCacheDeleteCacheRequest(server string, project string, name string, body CacheDeleteCacheJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCacheDeleteCacheRequestWithBody(server, project, name, "application/json", bodyReader)
}

// NewCacheDeleteCacheRequestWithBody generates requests for CacheDeleteCache with any type of body
func NewCacheDeleteCacheRequestWithBody(server string, project string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/caches/%s/delete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCacheKeysRequest generates requests for CacheKeys
func NewCacheKeysRequest(server string, project string, name string, params *CacheKeysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/caches/%s/keys", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pattern != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pattern", runtime.ParamLocationQuery, *params.Pattern); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCacheDelRequest calls the generic CacheDel builder with application/json body
func NewCacheDelRequest(server string, project string, name string, key string, body CacheDelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCacheDelRequestWithBody(server, project, name, key, "application/json", bodyReader)
}

// NewCacheDelRequestWithBody generates requests for CacheDel with any type of body
func NewCacheDelRequestWithBody(server string, project string, name string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/caches/%s/%s/delete", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCacheGetRequest generates requests for CacheGet
func NewCacheGetRequest(server string, project string, name string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/caches/%s/%s/get", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCacheSetRequest calls the generic CacheSet builder with application/json body
func NewCacheSetRequest(server string, project string, name string, key string, body CacheSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCacheSetRequestWithBody(server, project, name, key, "application/json", bodyReader)
}

// NewCacheSetRequestWithBody generates requests for CacheSet with any type of body
func NewCacheSetRequestWithBody(server string, project string, name string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/caches/%s/%s/set", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisCreateProjectRequest calls the generic TigrisCreateProject builder with application/json body
func NewTigrisCreateProjectRequest(server string, project string, body TigrisCreateProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisCreateProjectRequestWithBody(server, project, "application/json", bodyReader)
}

// NewTigrisCreateProjectRequestWithBody generates requests for TigrisCreateProject with any type of body
func NewTigrisCreateProjectRequestWithBody(server string, project string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/create", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisCreateBranchRequest calls the generic TigrisCreateBranch builder with application/json body
func NewTigrisCreateBranchRequest(server string, project string, branch string, body TigrisCreateBranchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisCreateBranchRequestWithBody(server, project, branch, "application/json", bodyReader)
}

// NewTigrisCreateBranchRequestWithBody generates requests for TigrisCreateBranch with any type of body
func NewTigrisCreateBranchRequestWithBody(server string, project string, branch string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "branch", runtime.ParamLocationPath, branch)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/branches/%s/create", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDeleteBranchRequest calls the generic TigrisDeleteBranch builder with application/json body
func NewTigrisDeleteBranchRequest(server string, project string, branch string, body TigrisDeleteBranchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDeleteBranchRequestWithBody(server, project, branch, "application/json", bodyReader)
}

// NewTigrisDeleteBranchRequestWithBody generates requests for TigrisDeleteBranch with any type of body
func NewTigrisDeleteBranchRequestWithBody(server string, project string, branch string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "branch", runtime.ParamLocationPath, branch)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/branches/%s/delete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisListCollectionsRequest generates requests for TigrisListCollections
func NewTigrisListCollectionsRequest(server string, project string, params *TigrisListCollectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/collections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Branch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, *params.Branch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTigrisCreateOrUpdateCollectionRequest calls the generic TigrisCreateOrUpdateCollection builder with application/json body
func NewTigrisCreateOrUpdateCollectionRequest(server string, project string, collection string, body TigrisCreateOrUpdateCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisCreateOrUpdateCollectionRequestWithBody(server, project, collection, "application/json", bodyReader)
}

// NewTigrisCreateOrUpdateCollectionRequestWithBody generates requests for TigrisCreateOrUpdateCollection with any type of body
func NewTigrisCreateOrUpdateCollectionRequestWithBody(server string, project string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/collections/%s/createOrUpdate", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDescribeCollectionRequest calls the generic TigrisDescribeCollection builder with application/json body
func NewTigrisDescribeCollectionRequest(server string, project string, collection string, body TigrisDescribeCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDescribeCollectionRequestWithBody(server, project, collection, "application/json", bodyReader)
}

// NewTigrisDescribeCollectionRequestWithBody generates requests for TigrisDescribeCollection with any type of body
func NewTigrisDescribeCollectionRequestWithBody(server string, project string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/collections/%s/describe", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDeleteRequest calls the generic TigrisDelete builder with application/json body
func NewTigrisDeleteRequest(server string, project string, collection string, body TigrisDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDeleteRequestWithBody(server, project, collection, "application/json", bodyReader)
}

// NewTigrisDeleteRequestWithBody generates requests for TigrisDelete with any type of body
func NewTigrisDeleteRequestWithBody(server string, project string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/collections/%s/documents/delete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisImportRequest calls the generic TigrisImport builder with application/json body
func NewTigrisImportRequest(server string, project string, collection string, body TigrisImportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisImportRequestWithBody(server, project, collection, "application/json", bodyReader)
}

// NewTigrisImportRequestWithBody generates requests for TigrisImport with any type of body
func NewTigrisImportRequestWithBody(server string, project string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/collections/%s/documents/import", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisInsertRequest calls the generic TigrisInsert builder with application/json body
func NewTigrisInsertRequest(server string, project string, collection string, body TigrisInsertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisInsertRequestWithBody(server, project, collection, "application/json", bodyReader)
}

// NewTigrisInsertRequestWithBody generates requests for TigrisInsert with any type of body
func NewTigrisInsertRequestWithBody(server string, project string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/collections/%s/documents/insert", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisReadRequest calls the generic TigrisRead builder with application/json body
func NewTigrisReadRequest(server string, project string, collection string, body TigrisReadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisReadRequestWithBody(server, project, collection, "application/json", bodyReader)
}

// NewTigrisReadRequestWithBody generates requests for TigrisRead with any type of body
func NewTigrisReadRequestWithBody(server string, project string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/collections/%s/documents/read", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisReplaceRequest calls the generic TigrisReplace builder with application/json body
func NewTigrisReplaceRequest(server string, project string, collection string, body TigrisReplaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisReplaceRequestWithBody(server, project, collection, "application/json", bodyReader)
}

// NewTigrisReplaceRequestWithBody generates requests for TigrisReplace with any type of body
func NewTigrisReplaceRequestWithBody(server string, project string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/collections/%s/documents/replace", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisSearchRequest calls the generic TigrisSearch builder with application/json body
func NewTigrisSearchRequest(server string, project string, collection string, body TigrisSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisSearchRequestWithBody(server, project, collection, "application/json", bodyReader)
}

// NewTigrisSearchRequestWithBody generates requests for TigrisSearch with any type of body
func NewTigrisSearchRequestWithBody(server string, project string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/collections/%s/documents/search", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisUpdateRequest calls the generic TigrisUpdate builder with application/json body
func NewTigrisUpdateRequest(server string, project string, collection string, body TigrisUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisUpdateRequestWithBody(server, project, collection, "application/json", bodyReader)
}

// NewTigrisUpdateRequestWithBody generates requests for TigrisUpdate with any type of body
func NewTigrisUpdateRequestWithBody(server string, project string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/collections/%s/documents/update", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDropCollectionRequest calls the generic TigrisDropCollection builder with application/json body
func NewTigrisDropCollectionRequest(server string, project string, collection string, body TigrisDropCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDropCollectionRequestWithBody(server, project, collection, "application/json", bodyReader)
}

// NewTigrisDropCollectionRequestWithBody generates requests for TigrisDropCollection with any type of body
func NewTigrisDropCollectionRequestWithBody(server string, project string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/collections/%s/drop", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDescribeDatabaseRequest calls the generic TigrisDescribeDatabase builder with application/json body
func NewTigrisDescribeDatabaseRequest(server string, project string, body TigrisDescribeDatabaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDescribeDatabaseRequestWithBody(server, project, "application/json", bodyReader)
}

// NewTigrisDescribeDatabaseRequestWithBody generates requests for TigrisDescribeDatabase with any type of body
func NewTigrisDescribeDatabaseRequestWithBody(server string, project string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/describe", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisBeginTransactionRequest calls the generic TigrisBeginTransaction builder with application/json body
func NewTigrisBeginTransactionRequest(server string, project string, body TigrisBeginTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisBeginTransactionRequestWithBody(server, project, "application/json", bodyReader)
}

// NewTigrisBeginTransactionRequestWithBody generates requests for TigrisBeginTransaction with any type of body
func NewTigrisBeginTransactionRequestWithBody(server string, project string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/transactions/begin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisCommitTransactionRequest calls the generic TigrisCommitTransaction builder with application/json body
func NewTigrisCommitTransactionRequest(server string, project string, body TigrisCommitTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisCommitTransactionRequestWithBody(server, project, "application/json", bodyReader)
}

// NewTigrisCommitTransactionRequestWithBody generates requests for TigrisCommitTransaction with any type of body
func NewTigrisCommitTransactionRequestWithBody(server string, project string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/transactions/commit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisRollbackTransactionRequest calls the generic TigrisRollbackTransaction builder with application/json body
func NewTigrisRollbackTransactionRequest(server string, project string, body TigrisRollbackTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisRollbackTransactionRequestWithBody(server, project, "application/json", bodyReader)
}

// NewTigrisRollbackTransactionRequestWithBody generates requests for TigrisRollbackTransaction with any type of body
func NewTigrisRollbackTransactionRequestWithBody(server string, project string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/transactions/rollback", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDeleteProjectRequest calls the generic TigrisDeleteProject builder with application/json body
func NewTigrisDeleteProjectRequest(server string, project string, body TigrisDeleteProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDeleteProjectRequestWithBody(server, project, "application/json", bodyReader)
}

// NewTigrisDeleteProjectRequestWithBody generates requests for TigrisDeleteProject with any type of body
func NewTigrisDeleteProjectRequestWithBody(server string, project string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRealtimeGetRTChannelsRequest generates requests for RealtimeGetRTChannels
func NewRealtimeGetRTChannelsRequest(server string, project string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/realtime/channels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRealtimeGetRTChannelRequest generates requests for RealtimeGetRTChannel
func NewRealtimeGetRTChannelRequest(server string, project string, channel string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel", runtime.ParamLocationPath, channel)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/realtime/channels/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRealtimeReadMessagesRequest generates requests for RealtimeReadMessages
func NewRealtimeReadMessagesRequest(server string, project string, channel string, params *RealtimeReadMessagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel", runtime.ParamLocationPath, channel)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/realtime/channels/%s/messages", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.SessionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "session_id", runtime.ParamLocationQuery, *params.SessionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SocketId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "socket_id", runtime.ParamLocationQuery, *params.SocketId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Event != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "event", runtime.ParamLocationQuery, *params.Event); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.End != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRealtimeMessagesRequest calls the generic RealtimeMessages builder with application/json body
func NewRealtimeMessagesRequest(server string, project string, channel string, body RealtimeMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRealtimeMessagesRequestWithBody(server, project, channel, "application/json", bodyReader)
}

// NewRealtimeMessagesRequestWithBody generates requests for RealtimeMessages with any type of body
func NewRealtimeMessagesRequestWithBody(server string, project string, channel string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel", runtime.ParamLocationPath, channel)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/realtime/channels/%s/messages", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRealtimePresenceRequest generates requests for RealtimePresence
func NewRealtimePresenceRequest(server string, project string, channel string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel", runtime.ParamLocationPath, channel)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/realtime/channels/%s/presence", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRealtimeListSubscriptionsRequest generates requests for RealtimeListSubscriptions
func NewRealtimeListSubscriptionsRequest(server string, project string, channel string, params *RealtimeListSubscriptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel", runtime.ParamLocationPath, channel)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/realtime/channels/%s/subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AuthGetAccessToken request with any body
	AuthGetAccessTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthGetAccessTokenResponse, error)

	// HealthAPIHealth request
	HealthAPIHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthAPIHealthResponse, error)

	// ManagementGetNamespaceMetadata request with any body
	ManagementGetNamespaceMetadataWithBodyWithResponse(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManagementGetNamespaceMetadataResponse, error)

	ManagementGetNamespaceMetadataWithResponse(ctx context.Context, metadataKey string, body ManagementGetNamespaceMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*ManagementGetNamespaceMetadataResponse, error)

	// ManagementInsertNamespaceMetadata request with any body
	ManagementInsertNamespaceMetadataWithBodyWithResponse(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManagementInsertNamespaceMetadataResponse, error)

	ManagementInsertNamespaceMetadataWithResponse(ctx context.Context, metadataKey string, body ManagementInsertNamespaceMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*ManagementInsertNamespaceMetadataResponse, error)

	// ManagementUpdateNamespaceMetadata request with any body
	ManagementUpdateNamespaceMetadataWithBodyWithResponse(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManagementUpdateNamespaceMetadataResponse, error)

	ManagementUpdateNamespaceMetadataWithResponse(ctx context.Context, metadataKey string, body ManagementUpdateNamespaceMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*ManagementUpdateNamespaceMetadataResponse, error)

	// ManagementCreateNamespace request with any body
	ManagementCreateNamespaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManagementCreateNamespaceResponse, error)

	ManagementCreateNamespaceWithResponse(ctx context.Context, body ManagementCreateNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ManagementCreateNamespaceResponse, error)

	// ManagementDescribeNamespaces request
	ManagementDescribeNamespacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ManagementDescribeNamespacesResponse, error)

	// ManagementListNamespaces request
	ManagementListNamespacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ManagementListNamespacesResponse, error)

	// ManagementGetUserMetadata request with any body
	ManagementGetUserMetadataWithBodyWithResponse(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManagementGetUserMetadataResponse, error)

	ManagementGetUserMetadataWithResponse(ctx context.Context, metadataKey string, body ManagementGetUserMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*ManagementGetUserMetadataResponse, error)

	// ManagementInsertUserMetadata request with any body
	ManagementInsertUserMetadataWithBodyWithResponse(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManagementInsertUserMetadataResponse, error)

	ManagementInsertUserMetadataWithResponse(ctx context.Context, metadataKey string, body ManagementInsertUserMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*ManagementInsertUserMetadataResponse, error)

	// ManagementUpdateUserMetadata request with any body
	ManagementUpdateUserMetadataWithBodyWithResponse(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManagementUpdateUserMetadataResponse, error)

	ManagementUpdateUserMetadataWithResponse(ctx context.Context, metadataKey string, body ManagementUpdateUserMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*ManagementUpdateUserMetadataResponse, error)

	// ObservabilityGetInfo request
	ObservabilityGetInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ObservabilityGetInfoResponse, error)

	// ObservabilityQueryTimeSeriesMetrics request with any body
	ObservabilityQueryTimeSeriesMetricsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ObservabilityQueryTimeSeriesMetricsResponse, error)

	ObservabilityQueryTimeSeriesMetricsWithResponse(ctx context.Context, body ObservabilityQueryTimeSeriesMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*ObservabilityQueryTimeSeriesMetricsResponse, error)

	// ObservabilityQuotaLimits request with any body
	ObservabilityQuotaLimitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ObservabilityQuotaLimitsResponse, error)

	ObservabilityQuotaLimitsWithResponse(ctx context.Context, body ObservabilityQuotaLimitsJSONRequestBody, reqEditors ...RequestEditorFn) (*ObservabilityQuotaLimitsResponse, error)

	// ObservabilityQuotaUsage request with any body
	ObservabilityQuotaUsageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ObservabilityQuotaUsageResponse, error)

	ObservabilityQuotaUsageWithResponse(ctx context.Context, body ObservabilityQuotaUsageJSONRequestBody, reqEditors ...RequestEditorFn) (*ObservabilityQuotaUsageResponse, error)

	// TigrisListProjects request
	TigrisListProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TigrisListProjectsResponse, error)

	// TigrisListAppKeys request
	TigrisListAppKeysWithResponse(ctx context.Context, project string, reqEditors ...RequestEditorFn) (*TigrisListAppKeysResponse, error)

	// TigrisCreateAppKey request with any body
	TigrisCreateAppKeyWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisCreateAppKeyResponse, error)

	TigrisCreateAppKeyWithResponse(ctx context.Context, project string, body TigrisCreateAppKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisCreateAppKeyResponse, error)

	// TigrisDeleteAppKey request with any body
	TigrisDeleteAppKeyWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDeleteAppKeyResponse, error)

	TigrisDeleteAppKeyWithResponse(ctx context.Context, project string, body TigrisDeleteAppKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDeleteAppKeyResponse, error)

	// TigrisRotateAppKeySecret request with any body
	TigrisRotateAppKeySecretWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisRotateAppKeySecretResponse, error)

	TigrisRotateAppKeySecretWithResponse(ctx context.Context, project string, body TigrisRotateAppKeySecretJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisRotateAppKeySecretResponse, error)

	// TigrisUpdateAppKey request with any body
	TigrisUpdateAppKeyWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisUpdateAppKeyResponse, error)

	TigrisUpdateAppKeyWithResponse(ctx context.Context, project string, body TigrisUpdateAppKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisUpdateAppKeyResponse, error)

	// CacheCreateCache request with any body
	CacheCreateCacheWithBodyWithResponse(ctx context.Context, project string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CacheCreateCacheResponse, error)

	CacheCreateCacheWithResponse(ctx context.Context, project string, name string, body CacheCreateCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*CacheCreateCacheResponse, error)

	// CacheDeleteCache request with any body
	CacheDeleteCacheWithBodyWithResponse(ctx context.Context, project string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CacheDeleteCacheResponse, error)

	CacheDeleteCacheWithResponse(ctx context.Context, project string, name string, body CacheDeleteCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*CacheDeleteCacheResponse, error)

	// CacheKeys request
	CacheKeysWithResponse(ctx context.Context, project string, name string, params *CacheKeysParams, reqEditors ...RequestEditorFn) (*CacheKeysResponse, error)

	// CacheDel request with any body
	CacheDelWithBodyWithResponse(ctx context.Context, project string, name string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CacheDelResponse, error)

	CacheDelWithResponse(ctx context.Context, project string, name string, key string, body CacheDelJSONRequestBody, reqEditors ...RequestEditorFn) (*CacheDelResponse, error)

	// CacheGet request
	CacheGetWithResponse(ctx context.Context, project string, name string, key string, reqEditors ...RequestEditorFn) (*CacheGetResponse, error)

	// CacheSet request with any body
	CacheSetWithBodyWithResponse(ctx context.Context, project string, name string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CacheSetResponse, error)

	CacheSetWithResponse(ctx context.Context, project string, name string, key string, body CacheSetJSONRequestBody, reqEditors ...RequestEditorFn) (*CacheSetResponse, error)

	// TigrisCreateProject request with any body
	TigrisCreateProjectWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisCreateProjectResponse, error)

	TigrisCreateProjectWithResponse(ctx context.Context, project string, body TigrisCreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisCreateProjectResponse, error)

	// TigrisCreateBranch request with any body
	TigrisCreateBranchWithBodyWithResponse(ctx context.Context, project string, branch string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisCreateBranchResponse, error)

	TigrisCreateBranchWithResponse(ctx context.Context, project string, branch string, body TigrisCreateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisCreateBranchResponse, error)

	// TigrisDeleteBranch request with any body
	TigrisDeleteBranchWithBodyWithResponse(ctx context.Context, project string, branch string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDeleteBranchResponse, error)

	TigrisDeleteBranchWithResponse(ctx context.Context, project string, branch string, body TigrisDeleteBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDeleteBranchResponse, error)

	// TigrisListCollections request
	TigrisListCollectionsWithResponse(ctx context.Context, project string, params *TigrisListCollectionsParams, reqEditors ...RequestEditorFn) (*TigrisListCollectionsResponse, error)

	// TigrisCreateOrUpdateCollection request with any body
	TigrisCreateOrUpdateCollectionWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisCreateOrUpdateCollectionResponse, error)

	TigrisCreateOrUpdateCollectionWithResponse(ctx context.Context, project string, collection string, body TigrisCreateOrUpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisCreateOrUpdateCollectionResponse, error)

	// TigrisDescribeCollection request with any body
	TigrisDescribeCollectionWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDescribeCollectionResponse, error)

	TigrisDescribeCollectionWithResponse(ctx context.Context, project string, collection string, body TigrisDescribeCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDescribeCollectionResponse, error)

	// TigrisDelete request with any body
	TigrisDeleteWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDeleteResponse, error)

	TigrisDeleteWithResponse(ctx context.Context, project string, collection string, body TigrisDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDeleteResponse, error)

	// TigrisImport request with any body
	TigrisImportWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisImportResponse, error)

	TigrisImportWithResponse(ctx context.Context, project string, collection string, body TigrisImportJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisImportResponse, error)

	// TigrisInsert request with any body
	TigrisInsertWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisInsertResponse, error)

	TigrisInsertWithResponse(ctx context.Context, project string, collection string, body TigrisInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisInsertResponse, error)

	// TigrisRead request with any body
	TigrisReadWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisReadResponse, error)

	TigrisReadWithResponse(ctx context.Context, project string, collection string, body TigrisReadJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisReadResponse, error)

	// TigrisReplace request with any body
	TigrisReplaceWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisReplaceResponse, error)

	TigrisReplaceWithResponse(ctx context.Context, project string, collection string, body TigrisReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisReplaceResponse, error)

	// TigrisSearch request with any body
	TigrisSearchWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisSearchResponse, error)

	TigrisSearchWithResponse(ctx context.Context, project string, collection string, body TigrisSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisSearchResponse, error)

	// TigrisUpdate request with any body
	TigrisUpdateWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisUpdateResponse, error)

	TigrisUpdateWithResponse(ctx context.Context, project string, collection string, body TigrisUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisUpdateResponse, error)

	// TigrisDropCollection request with any body
	TigrisDropCollectionWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDropCollectionResponse, error)

	TigrisDropCollectionWithResponse(ctx context.Context, project string, collection string, body TigrisDropCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDropCollectionResponse, error)

	// TigrisDescribeDatabase request with any body
	TigrisDescribeDatabaseWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDescribeDatabaseResponse, error)

	TigrisDescribeDatabaseWithResponse(ctx context.Context, project string, body TigrisDescribeDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDescribeDatabaseResponse, error)

	// TigrisBeginTransaction request with any body
	TigrisBeginTransactionWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisBeginTransactionResponse, error)

	TigrisBeginTransactionWithResponse(ctx context.Context, project string, body TigrisBeginTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisBeginTransactionResponse, error)

	// TigrisCommitTransaction request with any body
	TigrisCommitTransactionWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisCommitTransactionResponse, error)

	TigrisCommitTransactionWithResponse(ctx context.Context, project string, body TigrisCommitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisCommitTransactionResponse, error)

	// TigrisRollbackTransaction request with any body
	TigrisRollbackTransactionWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisRollbackTransactionResponse, error)

	TigrisRollbackTransactionWithResponse(ctx context.Context, project string, body TigrisRollbackTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisRollbackTransactionResponse, error)

	// TigrisDeleteProject request with any body
	TigrisDeleteProjectWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDeleteProjectResponse, error)

	TigrisDeleteProjectWithResponse(ctx context.Context, project string, body TigrisDeleteProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDeleteProjectResponse, error)

	// RealtimeGetRTChannels request
	RealtimeGetRTChannelsWithResponse(ctx context.Context, project string, reqEditors ...RequestEditorFn) (*RealtimeGetRTChannelsResponse, error)

	// RealtimeGetRTChannel request
	RealtimeGetRTChannelWithResponse(ctx context.Context, project string, channel string, reqEditors ...RequestEditorFn) (*RealtimeGetRTChannelResponse, error)

	// RealtimeReadMessages request
	RealtimeReadMessagesWithResponse(ctx context.Context, project string, channel string, params *RealtimeReadMessagesParams, reqEditors ...RequestEditorFn) (*RealtimeReadMessagesResponse, error)

	// RealtimeMessages request with any body
	RealtimeMessagesWithBodyWithResponse(ctx context.Context, project string, channel string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RealtimeMessagesResponse, error)

	RealtimeMessagesWithResponse(ctx context.Context, project string, channel string, body RealtimeMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*RealtimeMessagesResponse, error)

	// RealtimePresence request
	RealtimePresenceWithResponse(ctx context.Context, project string, channel string, reqEditors ...RequestEditorFn) (*RealtimePresenceResponse, error)

	// RealtimeListSubscriptions request
	RealtimeListSubscriptionsWithResponse(ctx context.Context, project string, channel string, params *RealtimeListSubscriptionsParams, reqEditors ...RequestEditorFn) (*RealtimeListSubscriptionsResponse, error)
}

type AuthGetAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAccessTokenResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r AuthGetAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthGetAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthAPIHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthCheckResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r HealthAPIHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthAPIHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagementGetNamespaceMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetNamespaceMetadataResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r ManagementGetNamespaceMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagementGetNamespaceMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagementInsertNamespaceMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsertNamespaceMetadataResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r ManagementInsertNamespaceMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagementInsertNamespaceMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagementUpdateNamespaceMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateNamespaceMetadataResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r ManagementUpdateNamespaceMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagementUpdateNamespaceMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagementCreateNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateNamespaceResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r ManagementCreateNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagementCreateNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagementDescribeNamespacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DescribeNamespacesResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r ManagementDescribeNamespacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagementDescribeNamespacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagementListNamespacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListNamespacesResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r ManagementListNamespacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagementListNamespacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagementGetUserMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetUserMetadataResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r ManagementGetUserMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagementGetUserMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagementInsertUserMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsertUserMetadataResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r ManagementInsertUserMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagementInsertUserMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagementUpdateUserMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateUserMetadataResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r ManagementUpdateUserMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagementUpdateUserMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ObservabilityGetInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetInfoResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r ObservabilityGetInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ObservabilityGetInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ObservabilityQueryTimeSeriesMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryTimeSeriesMetricsResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r ObservabilityQueryTimeSeriesMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ObservabilityQueryTimeSeriesMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ObservabilityQuotaLimitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QuotaLimitsResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r ObservabilityQuotaLimitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ObservabilityQuotaLimitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ObservabilityQuotaUsageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QuotaUsageResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r ObservabilityQuotaUsageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ObservabilityQuotaUsageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisListProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListProjectsResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisListProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisListProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisListAppKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListAppKeysResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisListAppKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisListAppKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisCreateAppKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateAppKeyResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisCreateAppKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisCreateAppKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDeleteAppKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteAppKeyResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisDeleteAppKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDeleteAppKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisRotateAppKeySecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RotateAppKeyResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisRotateAppKeySecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisRotateAppKeySecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisUpdateAppKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateAppKeyResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisUpdateAppKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisUpdateAppKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CacheCreateCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateCacheResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r CacheCreateCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CacheCreateCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CacheDeleteCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteCacheResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r CacheDeleteCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CacheDeleteCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CacheKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KeysResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r CacheKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CacheKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CacheDelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DelResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r CacheDelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CacheDelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CacheGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r CacheGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CacheGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CacheSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r CacheSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CacheSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisCreateProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateProjectResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisCreateProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisCreateProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisCreateBranchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateBranchResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisCreateBranchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisCreateBranchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDeleteBranchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteBranchResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisDeleteBranchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDeleteBranchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisListCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCollectionsResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisListCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisListCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisCreateOrUpdateCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateOrUpdateCollectionResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisCreateOrUpdateCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisCreateOrUpdateCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDescribeCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DescribeCollectionResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisDescribeCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDescribeCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisInsertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsertResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisInsertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisInsertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StreamingReadResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisReplaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReplaceResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisReplaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisReplaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StreamingSearchResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDropCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DropCollectionResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisDropCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDropCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDescribeDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DescribeDatabaseResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisDescribeDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDescribeDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisBeginTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BeginTransactionResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisBeginTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisBeginTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisCommitTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommitTransactionResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisCommitTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisCommitTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisRollbackTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RollbackTransactionResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisRollbackTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisRollbackTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDeleteProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteProjectResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisDeleteProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDeleteProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RealtimeGetRTChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetRTChannelsResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r RealtimeGetRTChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RealtimeGetRTChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RealtimeGetRTChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetRTChannelResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r RealtimeGetRTChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RealtimeGetRTChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RealtimeReadMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReadMessagesResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r RealtimeReadMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RealtimeReadMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RealtimeMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MessagesResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r RealtimeMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RealtimeMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RealtimePresenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PresenceResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r RealtimePresenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RealtimePresenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RealtimeListSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListSubscriptionResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r RealtimeListSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RealtimeListSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AuthGetAccessTokenWithBodyWithResponse request with arbitrary body returning *AuthGetAccessTokenResponse
func (c *ClientWithResponses) AuthGetAccessTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthGetAccessTokenResponse, error) {
	rsp, err := c.AuthGetAccessTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthGetAccessTokenResponse(rsp)
}

// HealthAPIHealthWithResponse request returning *HealthAPIHealthResponse
func (c *ClientWithResponses) HealthAPIHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthAPIHealthResponse, error) {
	rsp, err := c.HealthAPIHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthAPIHealthResponse(rsp)
}

// ManagementGetNamespaceMetadataWithBodyWithResponse request with arbitrary body returning *ManagementGetNamespaceMetadataResponse
func (c *ClientWithResponses) ManagementGetNamespaceMetadataWithBodyWithResponse(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManagementGetNamespaceMetadataResponse, error) {
	rsp, err := c.ManagementGetNamespaceMetadataWithBody(ctx, metadataKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManagementGetNamespaceMetadataResponse(rsp)
}

func (c *ClientWithResponses) ManagementGetNamespaceMetadataWithResponse(ctx context.Context, metadataKey string, body ManagementGetNamespaceMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*ManagementGetNamespaceMetadataResponse, error) {
	rsp, err := c.ManagementGetNamespaceMetadata(ctx, metadataKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManagementGetNamespaceMetadataResponse(rsp)
}

// ManagementInsertNamespaceMetadataWithBodyWithResponse request with arbitrary body returning *ManagementInsertNamespaceMetadataResponse
func (c *ClientWithResponses) ManagementInsertNamespaceMetadataWithBodyWithResponse(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManagementInsertNamespaceMetadataResponse, error) {
	rsp, err := c.ManagementInsertNamespaceMetadataWithBody(ctx, metadataKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManagementInsertNamespaceMetadataResponse(rsp)
}

func (c *ClientWithResponses) ManagementInsertNamespaceMetadataWithResponse(ctx context.Context, metadataKey string, body ManagementInsertNamespaceMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*ManagementInsertNamespaceMetadataResponse, error) {
	rsp, err := c.ManagementInsertNamespaceMetadata(ctx, metadataKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManagementInsertNamespaceMetadataResponse(rsp)
}

// ManagementUpdateNamespaceMetadataWithBodyWithResponse request with arbitrary body returning *ManagementUpdateNamespaceMetadataResponse
func (c *ClientWithResponses) ManagementUpdateNamespaceMetadataWithBodyWithResponse(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManagementUpdateNamespaceMetadataResponse, error) {
	rsp, err := c.ManagementUpdateNamespaceMetadataWithBody(ctx, metadataKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManagementUpdateNamespaceMetadataResponse(rsp)
}

func (c *ClientWithResponses) ManagementUpdateNamespaceMetadataWithResponse(ctx context.Context, metadataKey string, body ManagementUpdateNamespaceMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*ManagementUpdateNamespaceMetadataResponse, error) {
	rsp, err := c.ManagementUpdateNamespaceMetadata(ctx, metadataKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManagementUpdateNamespaceMetadataResponse(rsp)
}

// ManagementCreateNamespaceWithBodyWithResponse request with arbitrary body returning *ManagementCreateNamespaceResponse
func (c *ClientWithResponses) ManagementCreateNamespaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManagementCreateNamespaceResponse, error) {
	rsp, err := c.ManagementCreateNamespaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManagementCreateNamespaceResponse(rsp)
}

func (c *ClientWithResponses) ManagementCreateNamespaceWithResponse(ctx context.Context, body ManagementCreateNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ManagementCreateNamespaceResponse, error) {
	rsp, err := c.ManagementCreateNamespace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManagementCreateNamespaceResponse(rsp)
}

// ManagementDescribeNamespacesWithResponse request returning *ManagementDescribeNamespacesResponse
func (c *ClientWithResponses) ManagementDescribeNamespacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ManagementDescribeNamespacesResponse, error) {
	rsp, err := c.ManagementDescribeNamespaces(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManagementDescribeNamespacesResponse(rsp)
}

// ManagementListNamespacesWithResponse request returning *ManagementListNamespacesResponse
func (c *ClientWithResponses) ManagementListNamespacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ManagementListNamespacesResponse, error) {
	rsp, err := c.ManagementListNamespaces(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManagementListNamespacesResponse(rsp)
}

// ManagementGetUserMetadataWithBodyWithResponse request with arbitrary body returning *ManagementGetUserMetadataResponse
func (c *ClientWithResponses) ManagementGetUserMetadataWithBodyWithResponse(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManagementGetUserMetadataResponse, error) {
	rsp, err := c.ManagementGetUserMetadataWithBody(ctx, metadataKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManagementGetUserMetadataResponse(rsp)
}

func (c *ClientWithResponses) ManagementGetUserMetadataWithResponse(ctx context.Context, metadataKey string, body ManagementGetUserMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*ManagementGetUserMetadataResponse, error) {
	rsp, err := c.ManagementGetUserMetadata(ctx, metadataKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManagementGetUserMetadataResponse(rsp)
}

// ManagementInsertUserMetadataWithBodyWithResponse request with arbitrary body returning *ManagementInsertUserMetadataResponse
func (c *ClientWithResponses) ManagementInsertUserMetadataWithBodyWithResponse(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManagementInsertUserMetadataResponse, error) {
	rsp, err := c.ManagementInsertUserMetadataWithBody(ctx, metadataKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManagementInsertUserMetadataResponse(rsp)
}

func (c *ClientWithResponses) ManagementInsertUserMetadataWithResponse(ctx context.Context, metadataKey string, body ManagementInsertUserMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*ManagementInsertUserMetadataResponse, error) {
	rsp, err := c.ManagementInsertUserMetadata(ctx, metadataKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManagementInsertUserMetadataResponse(rsp)
}

// ManagementUpdateUserMetadataWithBodyWithResponse request with arbitrary body returning *ManagementUpdateUserMetadataResponse
func (c *ClientWithResponses) ManagementUpdateUserMetadataWithBodyWithResponse(ctx context.Context, metadataKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManagementUpdateUserMetadataResponse, error) {
	rsp, err := c.ManagementUpdateUserMetadataWithBody(ctx, metadataKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManagementUpdateUserMetadataResponse(rsp)
}

func (c *ClientWithResponses) ManagementUpdateUserMetadataWithResponse(ctx context.Context, metadataKey string, body ManagementUpdateUserMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*ManagementUpdateUserMetadataResponse, error) {
	rsp, err := c.ManagementUpdateUserMetadata(ctx, metadataKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManagementUpdateUserMetadataResponse(rsp)
}

// ObservabilityGetInfoWithResponse request returning *ObservabilityGetInfoResponse
func (c *ClientWithResponses) ObservabilityGetInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ObservabilityGetInfoResponse, error) {
	rsp, err := c.ObservabilityGetInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObservabilityGetInfoResponse(rsp)
}

// ObservabilityQueryTimeSeriesMetricsWithBodyWithResponse request with arbitrary body returning *ObservabilityQueryTimeSeriesMetricsResponse
func (c *ClientWithResponses) ObservabilityQueryTimeSeriesMetricsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ObservabilityQueryTimeSeriesMetricsResponse, error) {
	rsp, err := c.ObservabilityQueryTimeSeriesMetricsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObservabilityQueryTimeSeriesMetricsResponse(rsp)
}

func (c *ClientWithResponses) ObservabilityQueryTimeSeriesMetricsWithResponse(ctx context.Context, body ObservabilityQueryTimeSeriesMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*ObservabilityQueryTimeSeriesMetricsResponse, error) {
	rsp, err := c.ObservabilityQueryTimeSeriesMetrics(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObservabilityQueryTimeSeriesMetricsResponse(rsp)
}

// ObservabilityQuotaLimitsWithBodyWithResponse request with arbitrary body returning *ObservabilityQuotaLimitsResponse
func (c *ClientWithResponses) ObservabilityQuotaLimitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ObservabilityQuotaLimitsResponse, error) {
	rsp, err := c.ObservabilityQuotaLimitsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObservabilityQuotaLimitsResponse(rsp)
}

func (c *ClientWithResponses) ObservabilityQuotaLimitsWithResponse(ctx context.Context, body ObservabilityQuotaLimitsJSONRequestBody, reqEditors ...RequestEditorFn) (*ObservabilityQuotaLimitsResponse, error) {
	rsp, err := c.ObservabilityQuotaLimits(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObservabilityQuotaLimitsResponse(rsp)
}

// ObservabilityQuotaUsageWithBodyWithResponse request with arbitrary body returning *ObservabilityQuotaUsageResponse
func (c *ClientWithResponses) ObservabilityQuotaUsageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ObservabilityQuotaUsageResponse, error) {
	rsp, err := c.ObservabilityQuotaUsageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObservabilityQuotaUsageResponse(rsp)
}

func (c *ClientWithResponses) ObservabilityQuotaUsageWithResponse(ctx context.Context, body ObservabilityQuotaUsageJSONRequestBody, reqEditors ...RequestEditorFn) (*ObservabilityQuotaUsageResponse, error) {
	rsp, err := c.ObservabilityQuotaUsage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObservabilityQuotaUsageResponse(rsp)
}

// TigrisListProjectsWithResponse request returning *TigrisListProjectsResponse
func (c *ClientWithResponses) TigrisListProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TigrisListProjectsResponse, error) {
	rsp, err := c.TigrisListProjects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisListProjectsResponse(rsp)
}

// TigrisListAppKeysWithResponse request returning *TigrisListAppKeysResponse
func (c *ClientWithResponses) TigrisListAppKeysWithResponse(ctx context.Context, project string, reqEditors ...RequestEditorFn) (*TigrisListAppKeysResponse, error) {
	rsp, err := c.TigrisListAppKeys(ctx, project, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisListAppKeysResponse(rsp)
}

// TigrisCreateAppKeyWithBodyWithResponse request with arbitrary body returning *TigrisCreateAppKeyResponse
func (c *ClientWithResponses) TigrisCreateAppKeyWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisCreateAppKeyResponse, error) {
	rsp, err := c.TigrisCreateAppKeyWithBody(ctx, project, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisCreateAppKeyResponse(rsp)
}

func (c *ClientWithResponses) TigrisCreateAppKeyWithResponse(ctx context.Context, project string, body TigrisCreateAppKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisCreateAppKeyResponse, error) {
	rsp, err := c.TigrisCreateAppKey(ctx, project, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisCreateAppKeyResponse(rsp)
}

// TigrisDeleteAppKeyWithBodyWithResponse request with arbitrary body returning *TigrisDeleteAppKeyResponse
func (c *ClientWithResponses) TigrisDeleteAppKeyWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDeleteAppKeyResponse, error) {
	rsp, err := c.TigrisDeleteAppKeyWithBody(ctx, project, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDeleteAppKeyResponse(rsp)
}

func (c *ClientWithResponses) TigrisDeleteAppKeyWithResponse(ctx context.Context, project string, body TigrisDeleteAppKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDeleteAppKeyResponse, error) {
	rsp, err := c.TigrisDeleteAppKey(ctx, project, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDeleteAppKeyResponse(rsp)
}

// TigrisRotateAppKeySecretWithBodyWithResponse request with arbitrary body returning *TigrisRotateAppKeySecretResponse
func (c *ClientWithResponses) TigrisRotateAppKeySecretWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisRotateAppKeySecretResponse, error) {
	rsp, err := c.TigrisRotateAppKeySecretWithBody(ctx, project, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisRotateAppKeySecretResponse(rsp)
}

func (c *ClientWithResponses) TigrisRotateAppKeySecretWithResponse(ctx context.Context, project string, body TigrisRotateAppKeySecretJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisRotateAppKeySecretResponse, error) {
	rsp, err := c.TigrisRotateAppKeySecret(ctx, project, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisRotateAppKeySecretResponse(rsp)
}

// TigrisUpdateAppKeyWithBodyWithResponse request with arbitrary body returning *TigrisUpdateAppKeyResponse
func (c *ClientWithResponses) TigrisUpdateAppKeyWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisUpdateAppKeyResponse, error) {
	rsp, err := c.TigrisUpdateAppKeyWithBody(ctx, project, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisUpdateAppKeyResponse(rsp)
}

func (c *ClientWithResponses) TigrisUpdateAppKeyWithResponse(ctx context.Context, project string, body TigrisUpdateAppKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisUpdateAppKeyResponse, error) {
	rsp, err := c.TigrisUpdateAppKey(ctx, project, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisUpdateAppKeyResponse(rsp)
}

// CacheCreateCacheWithBodyWithResponse request with arbitrary body returning *CacheCreateCacheResponse
func (c *ClientWithResponses) CacheCreateCacheWithBodyWithResponse(ctx context.Context, project string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CacheCreateCacheResponse, error) {
	rsp, err := c.CacheCreateCacheWithBody(ctx, project, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCacheCreateCacheResponse(rsp)
}

func (c *ClientWithResponses) CacheCreateCacheWithResponse(ctx context.Context, project string, name string, body CacheCreateCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*CacheCreateCacheResponse, error) {
	rsp, err := c.CacheCreateCache(ctx, project, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCacheCreateCacheResponse(rsp)
}

// CacheDeleteCacheWithBodyWithResponse request with arbitrary body returning *CacheDeleteCacheResponse
func (c *ClientWithResponses) CacheDeleteCacheWithBodyWithResponse(ctx context.Context, project string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CacheDeleteCacheResponse, error) {
	rsp, err := c.CacheDeleteCacheWithBody(ctx, project, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCacheDeleteCacheResponse(rsp)
}

func (c *ClientWithResponses) CacheDeleteCacheWithResponse(ctx context.Context, project string, name string, body CacheDeleteCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*CacheDeleteCacheResponse, error) {
	rsp, err := c.CacheDeleteCache(ctx, project, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCacheDeleteCacheResponse(rsp)
}

// CacheKeysWithResponse request returning *CacheKeysResponse
func (c *ClientWithResponses) CacheKeysWithResponse(ctx context.Context, project string, name string, params *CacheKeysParams, reqEditors ...RequestEditorFn) (*CacheKeysResponse, error) {
	rsp, err := c.CacheKeys(ctx, project, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCacheKeysResponse(rsp)
}

// CacheDelWithBodyWithResponse request with arbitrary body returning *CacheDelResponse
func (c *ClientWithResponses) CacheDelWithBodyWithResponse(ctx context.Context, project string, name string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CacheDelResponse, error) {
	rsp, err := c.CacheDelWithBody(ctx, project, name, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCacheDelResponse(rsp)
}

func (c *ClientWithResponses) CacheDelWithResponse(ctx context.Context, project string, name string, key string, body CacheDelJSONRequestBody, reqEditors ...RequestEditorFn) (*CacheDelResponse, error) {
	rsp, err := c.CacheDel(ctx, project, name, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCacheDelResponse(rsp)
}

// CacheGetWithResponse request returning *CacheGetResponse
func (c *ClientWithResponses) CacheGetWithResponse(ctx context.Context, project string, name string, key string, reqEditors ...RequestEditorFn) (*CacheGetResponse, error) {
	rsp, err := c.CacheGet(ctx, project, name, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCacheGetResponse(rsp)
}

// CacheSetWithBodyWithResponse request with arbitrary body returning *CacheSetResponse
func (c *ClientWithResponses) CacheSetWithBodyWithResponse(ctx context.Context, project string, name string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CacheSetResponse, error) {
	rsp, err := c.CacheSetWithBody(ctx, project, name, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCacheSetResponse(rsp)
}

func (c *ClientWithResponses) CacheSetWithResponse(ctx context.Context, project string, name string, key string, body CacheSetJSONRequestBody, reqEditors ...RequestEditorFn) (*CacheSetResponse, error) {
	rsp, err := c.CacheSet(ctx, project, name, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCacheSetResponse(rsp)
}

// TigrisCreateProjectWithBodyWithResponse request with arbitrary body returning *TigrisCreateProjectResponse
func (c *ClientWithResponses) TigrisCreateProjectWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisCreateProjectResponse, error) {
	rsp, err := c.TigrisCreateProjectWithBody(ctx, project, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisCreateProjectResponse(rsp)
}

func (c *ClientWithResponses) TigrisCreateProjectWithResponse(ctx context.Context, project string, body TigrisCreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisCreateProjectResponse, error) {
	rsp, err := c.TigrisCreateProject(ctx, project, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisCreateProjectResponse(rsp)
}

// TigrisCreateBranchWithBodyWithResponse request with arbitrary body returning *TigrisCreateBranchResponse
func (c *ClientWithResponses) TigrisCreateBranchWithBodyWithResponse(ctx context.Context, project string, branch string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisCreateBranchResponse, error) {
	rsp, err := c.TigrisCreateBranchWithBody(ctx, project, branch, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisCreateBranchResponse(rsp)
}

func (c *ClientWithResponses) TigrisCreateBranchWithResponse(ctx context.Context, project string, branch string, body TigrisCreateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisCreateBranchResponse, error) {
	rsp, err := c.TigrisCreateBranch(ctx, project, branch, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisCreateBranchResponse(rsp)
}

// TigrisDeleteBranchWithBodyWithResponse request with arbitrary body returning *TigrisDeleteBranchResponse
func (c *ClientWithResponses) TigrisDeleteBranchWithBodyWithResponse(ctx context.Context, project string, branch string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDeleteBranchResponse, error) {
	rsp, err := c.TigrisDeleteBranchWithBody(ctx, project, branch, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDeleteBranchResponse(rsp)
}

func (c *ClientWithResponses) TigrisDeleteBranchWithResponse(ctx context.Context, project string, branch string, body TigrisDeleteBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDeleteBranchResponse, error) {
	rsp, err := c.TigrisDeleteBranch(ctx, project, branch, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDeleteBranchResponse(rsp)
}

// TigrisListCollectionsWithResponse request returning *TigrisListCollectionsResponse
func (c *ClientWithResponses) TigrisListCollectionsWithResponse(ctx context.Context, project string, params *TigrisListCollectionsParams, reqEditors ...RequestEditorFn) (*TigrisListCollectionsResponse, error) {
	rsp, err := c.TigrisListCollections(ctx, project, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisListCollectionsResponse(rsp)
}

// TigrisCreateOrUpdateCollectionWithBodyWithResponse request with arbitrary body returning *TigrisCreateOrUpdateCollectionResponse
func (c *ClientWithResponses) TigrisCreateOrUpdateCollectionWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisCreateOrUpdateCollectionResponse, error) {
	rsp, err := c.TigrisCreateOrUpdateCollectionWithBody(ctx, project, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisCreateOrUpdateCollectionResponse(rsp)
}

func (c *ClientWithResponses) TigrisCreateOrUpdateCollectionWithResponse(ctx context.Context, project string, collection string, body TigrisCreateOrUpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisCreateOrUpdateCollectionResponse, error) {
	rsp, err := c.TigrisCreateOrUpdateCollection(ctx, project, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisCreateOrUpdateCollectionResponse(rsp)
}

// TigrisDescribeCollectionWithBodyWithResponse request with arbitrary body returning *TigrisDescribeCollectionResponse
func (c *ClientWithResponses) TigrisDescribeCollectionWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDescribeCollectionResponse, error) {
	rsp, err := c.TigrisDescribeCollectionWithBody(ctx, project, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDescribeCollectionResponse(rsp)
}

func (c *ClientWithResponses) TigrisDescribeCollectionWithResponse(ctx context.Context, project string, collection string, body TigrisDescribeCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDescribeCollectionResponse, error) {
	rsp, err := c.TigrisDescribeCollection(ctx, project, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDescribeCollectionResponse(rsp)
}

// TigrisDeleteWithBodyWithResponse request with arbitrary body returning *TigrisDeleteResponse
func (c *ClientWithResponses) TigrisDeleteWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDeleteResponse, error) {
	rsp, err := c.TigrisDeleteWithBody(ctx, project, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDeleteResponse(rsp)
}

func (c *ClientWithResponses) TigrisDeleteWithResponse(ctx context.Context, project string, collection string, body TigrisDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDeleteResponse, error) {
	rsp, err := c.TigrisDelete(ctx, project, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDeleteResponse(rsp)
}

// TigrisImportWithBodyWithResponse request with arbitrary body returning *TigrisImportResponse
func (c *ClientWithResponses) TigrisImportWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisImportResponse, error) {
	rsp, err := c.TigrisImportWithBody(ctx, project, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisImportResponse(rsp)
}

func (c *ClientWithResponses) TigrisImportWithResponse(ctx context.Context, project string, collection string, body TigrisImportJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisImportResponse, error) {
	rsp, err := c.TigrisImport(ctx, project, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisImportResponse(rsp)
}

// TigrisInsertWithBodyWithResponse request with arbitrary body returning *TigrisInsertResponse
func (c *ClientWithResponses) TigrisInsertWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisInsertResponse, error) {
	rsp, err := c.TigrisInsertWithBody(ctx, project, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisInsertResponse(rsp)
}

func (c *ClientWithResponses) TigrisInsertWithResponse(ctx context.Context, project string, collection string, body TigrisInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisInsertResponse, error) {
	rsp, err := c.TigrisInsert(ctx, project, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisInsertResponse(rsp)
}

// TigrisReadWithBodyWithResponse request with arbitrary body returning *TigrisReadResponse
func (c *ClientWithResponses) TigrisReadWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisReadResponse, error) {
	rsp, err := c.TigrisReadWithBody(ctx, project, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisReadResponse(rsp)
}

func (c *ClientWithResponses) TigrisReadWithResponse(ctx context.Context, project string, collection string, body TigrisReadJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisReadResponse, error) {
	rsp, err := c.TigrisRead(ctx, project, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisReadResponse(rsp)
}

// TigrisReplaceWithBodyWithResponse request with arbitrary body returning *TigrisReplaceResponse
func (c *ClientWithResponses) TigrisReplaceWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisReplaceResponse, error) {
	rsp, err := c.TigrisReplaceWithBody(ctx, project, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisReplaceResponse(rsp)
}

func (c *ClientWithResponses) TigrisReplaceWithResponse(ctx context.Context, project string, collection string, body TigrisReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisReplaceResponse, error) {
	rsp, err := c.TigrisReplace(ctx, project, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisReplaceResponse(rsp)
}

// TigrisSearchWithBodyWithResponse request with arbitrary body returning *TigrisSearchResponse
func (c *ClientWithResponses) TigrisSearchWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisSearchResponse, error) {
	rsp, err := c.TigrisSearchWithBody(ctx, project, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisSearchResponse(rsp)
}

func (c *ClientWithResponses) TigrisSearchWithResponse(ctx context.Context, project string, collection string, body TigrisSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisSearchResponse, error) {
	rsp, err := c.TigrisSearch(ctx, project, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisSearchResponse(rsp)
}

// TigrisUpdateWithBodyWithResponse request with arbitrary body returning *TigrisUpdateResponse
func (c *ClientWithResponses) TigrisUpdateWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisUpdateResponse, error) {
	rsp, err := c.TigrisUpdateWithBody(ctx, project, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisUpdateResponse(rsp)
}

func (c *ClientWithResponses) TigrisUpdateWithResponse(ctx context.Context, project string, collection string, body TigrisUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisUpdateResponse, error) {
	rsp, err := c.TigrisUpdate(ctx, project, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisUpdateResponse(rsp)
}

// TigrisDropCollectionWithBodyWithResponse request with arbitrary body returning *TigrisDropCollectionResponse
func (c *ClientWithResponses) TigrisDropCollectionWithBodyWithResponse(ctx context.Context, project string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDropCollectionResponse, error) {
	rsp, err := c.TigrisDropCollectionWithBody(ctx, project, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDropCollectionResponse(rsp)
}

func (c *ClientWithResponses) TigrisDropCollectionWithResponse(ctx context.Context, project string, collection string, body TigrisDropCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDropCollectionResponse, error) {
	rsp, err := c.TigrisDropCollection(ctx, project, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDropCollectionResponse(rsp)
}

// TigrisDescribeDatabaseWithBodyWithResponse request with arbitrary body returning *TigrisDescribeDatabaseResponse
func (c *ClientWithResponses) TigrisDescribeDatabaseWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDescribeDatabaseResponse, error) {
	rsp, err := c.TigrisDescribeDatabaseWithBody(ctx, project, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDescribeDatabaseResponse(rsp)
}

func (c *ClientWithResponses) TigrisDescribeDatabaseWithResponse(ctx context.Context, project string, body TigrisDescribeDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDescribeDatabaseResponse, error) {
	rsp, err := c.TigrisDescribeDatabase(ctx, project, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDescribeDatabaseResponse(rsp)
}

// TigrisBeginTransactionWithBodyWithResponse request with arbitrary body returning *TigrisBeginTransactionResponse
func (c *ClientWithResponses) TigrisBeginTransactionWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisBeginTransactionResponse, error) {
	rsp, err := c.TigrisBeginTransactionWithBody(ctx, project, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisBeginTransactionResponse(rsp)
}

func (c *ClientWithResponses) TigrisBeginTransactionWithResponse(ctx context.Context, project string, body TigrisBeginTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisBeginTransactionResponse, error) {
	rsp, err := c.TigrisBeginTransaction(ctx, project, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisBeginTransactionResponse(rsp)
}

// TigrisCommitTransactionWithBodyWithResponse request with arbitrary body returning *TigrisCommitTransactionResponse
func (c *ClientWithResponses) TigrisCommitTransactionWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisCommitTransactionResponse, error) {
	rsp, err := c.TigrisCommitTransactionWithBody(ctx, project, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisCommitTransactionResponse(rsp)
}

func (c *ClientWithResponses) TigrisCommitTransactionWithResponse(ctx context.Context, project string, body TigrisCommitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisCommitTransactionResponse, error) {
	rsp, err := c.TigrisCommitTransaction(ctx, project, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisCommitTransactionResponse(rsp)
}

// TigrisRollbackTransactionWithBodyWithResponse request with arbitrary body returning *TigrisRollbackTransactionResponse
func (c *ClientWithResponses) TigrisRollbackTransactionWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisRollbackTransactionResponse, error) {
	rsp, err := c.TigrisRollbackTransactionWithBody(ctx, project, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisRollbackTransactionResponse(rsp)
}

func (c *ClientWithResponses) TigrisRollbackTransactionWithResponse(ctx context.Context, project string, body TigrisRollbackTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisRollbackTransactionResponse, error) {
	rsp, err := c.TigrisRollbackTransaction(ctx, project, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisRollbackTransactionResponse(rsp)
}

// TigrisDeleteProjectWithBodyWithResponse request with arbitrary body returning *TigrisDeleteProjectResponse
func (c *ClientWithResponses) TigrisDeleteProjectWithBodyWithResponse(ctx context.Context, project string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDeleteProjectResponse, error) {
	rsp, err := c.TigrisDeleteProjectWithBody(ctx, project, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDeleteProjectResponse(rsp)
}

func (c *ClientWithResponses) TigrisDeleteProjectWithResponse(ctx context.Context, project string, body TigrisDeleteProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDeleteProjectResponse, error) {
	rsp, err := c.TigrisDeleteProject(ctx, project, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDeleteProjectResponse(rsp)
}

// RealtimeGetRTChannelsWithResponse request returning *RealtimeGetRTChannelsResponse
func (c *ClientWithResponses) RealtimeGetRTChannelsWithResponse(ctx context.Context, project string, reqEditors ...RequestEditorFn) (*RealtimeGetRTChannelsResponse, error) {
	rsp, err := c.RealtimeGetRTChannels(ctx, project, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRealtimeGetRTChannelsResponse(rsp)
}

// RealtimeGetRTChannelWithResponse request returning *RealtimeGetRTChannelResponse
func (c *ClientWithResponses) RealtimeGetRTChannelWithResponse(ctx context.Context, project string, channel string, reqEditors ...RequestEditorFn) (*RealtimeGetRTChannelResponse, error) {
	rsp, err := c.RealtimeGetRTChannel(ctx, project, channel, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRealtimeGetRTChannelResponse(rsp)
}

// RealtimeReadMessagesWithResponse request returning *RealtimeReadMessagesResponse
func (c *ClientWithResponses) RealtimeReadMessagesWithResponse(ctx context.Context, project string, channel string, params *RealtimeReadMessagesParams, reqEditors ...RequestEditorFn) (*RealtimeReadMessagesResponse, error) {
	rsp, err := c.RealtimeReadMessages(ctx, project, channel, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRealtimeReadMessagesResponse(rsp)
}

// RealtimeMessagesWithBodyWithResponse request with arbitrary body returning *RealtimeMessagesResponse
func (c *ClientWithResponses) RealtimeMessagesWithBodyWithResponse(ctx context.Context, project string, channel string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RealtimeMessagesResponse, error) {
	rsp, err := c.RealtimeMessagesWithBody(ctx, project, channel, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRealtimeMessagesResponse(rsp)
}

func (c *ClientWithResponses) RealtimeMessagesWithResponse(ctx context.Context, project string, channel string, body RealtimeMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*RealtimeMessagesResponse, error) {
	rsp, err := c.RealtimeMessages(ctx, project, channel, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRealtimeMessagesResponse(rsp)
}

// RealtimePresenceWithResponse request returning *RealtimePresenceResponse
func (c *ClientWithResponses) RealtimePresenceWithResponse(ctx context.Context, project string, channel string, reqEditors ...RequestEditorFn) (*RealtimePresenceResponse, error) {
	rsp, err := c.RealtimePresence(ctx, project, channel, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRealtimePresenceResponse(rsp)
}

// RealtimeListSubscriptionsWithResponse request returning *RealtimeListSubscriptionsResponse
func (c *ClientWithResponses) RealtimeListSubscriptionsWithResponse(ctx context.Context, project string, channel string, params *RealtimeListSubscriptionsParams, reqEditors ...RequestEditorFn) (*RealtimeListSubscriptionsResponse, error) {
	rsp, err := c.RealtimeListSubscriptions(ctx, project, channel, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRealtimeListSubscriptionsResponse(rsp)
}

// ParseAuthGetAccessTokenResponse parses an HTTP response from a AuthGetAccessTokenWithResponse call
func ParseAuthGetAccessTokenResponse(rsp *http.Response) (*AuthGetAccessTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthGetAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAccessTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHealthAPIHealthResponse parses an HTTP response from a HealthAPIHealthWithResponse call
func ParseHealthAPIHealthResponse(rsp *http.Response) (*HealthAPIHealthResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthAPIHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthCheckResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseManagementGetNamespaceMetadataResponse parses an HTTP response from a ManagementGetNamespaceMetadataWithResponse call
func ParseManagementGetNamespaceMetadataResponse(rsp *http.Response) (*ManagementGetNamespaceMetadataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagementGetNamespaceMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetNamespaceMetadataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseManagementInsertNamespaceMetadataResponse parses an HTTP response from a ManagementInsertNamespaceMetadataWithResponse call
func ParseManagementInsertNamespaceMetadataResponse(rsp *http.Response) (*ManagementInsertNamespaceMetadataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagementInsertNamespaceMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsertNamespaceMetadataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseManagementUpdateNamespaceMetadataResponse parses an HTTP response from a ManagementUpdateNamespaceMetadataWithResponse call
func ParseManagementUpdateNamespaceMetadataResponse(rsp *http.Response) (*ManagementUpdateNamespaceMetadataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagementUpdateNamespaceMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateNamespaceMetadataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseManagementCreateNamespaceResponse parses an HTTP response from a ManagementCreateNamespaceWithResponse call
func ParseManagementCreateNamespaceResponse(rsp *http.Response) (*ManagementCreateNamespaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagementCreateNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateNamespaceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseManagementDescribeNamespacesResponse parses an HTTP response from a ManagementDescribeNamespacesWithResponse call
func ParseManagementDescribeNamespacesResponse(rsp *http.Response) (*ManagementDescribeNamespacesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagementDescribeNamespacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DescribeNamespacesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseManagementListNamespacesResponse parses an HTTP response from a ManagementListNamespacesWithResponse call
func ParseManagementListNamespacesResponse(rsp *http.Response) (*ManagementListNamespacesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagementListNamespacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListNamespacesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseManagementGetUserMetadataResponse parses an HTTP response from a ManagementGetUserMetadataWithResponse call
func ParseManagementGetUserMetadataResponse(rsp *http.Response) (*ManagementGetUserMetadataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagementGetUserMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetUserMetadataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseManagementInsertUserMetadataResponse parses an HTTP response from a ManagementInsertUserMetadataWithResponse call
func ParseManagementInsertUserMetadataResponse(rsp *http.Response) (*ManagementInsertUserMetadataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagementInsertUserMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsertUserMetadataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseManagementUpdateUserMetadataResponse parses an HTTP response from a ManagementUpdateUserMetadataWithResponse call
func ParseManagementUpdateUserMetadataResponse(rsp *http.Response) (*ManagementUpdateUserMetadataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagementUpdateUserMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateUserMetadataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseObservabilityGetInfoResponse parses an HTTP response from a ObservabilityGetInfoWithResponse call
func ParseObservabilityGetInfoResponse(rsp *http.Response) (*ObservabilityGetInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ObservabilityGetInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseObservabilityQueryTimeSeriesMetricsResponse parses an HTTP response from a ObservabilityQueryTimeSeriesMetricsWithResponse call
func ParseObservabilityQueryTimeSeriesMetricsResponse(rsp *http.Response) (*ObservabilityQueryTimeSeriesMetricsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ObservabilityQueryTimeSeriesMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryTimeSeriesMetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseObservabilityQuotaLimitsResponse parses an HTTP response from a ObservabilityQuotaLimitsWithResponse call
func ParseObservabilityQuotaLimitsResponse(rsp *http.Response) (*ObservabilityQuotaLimitsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ObservabilityQuotaLimitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QuotaLimitsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseObservabilityQuotaUsageResponse parses an HTTP response from a ObservabilityQuotaUsageWithResponse call
func ParseObservabilityQuotaUsageResponse(rsp *http.Response) (*ObservabilityQuotaUsageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ObservabilityQuotaUsageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QuotaUsageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisListProjectsResponse parses an HTTP response from a TigrisListProjectsWithResponse call
func ParseTigrisListProjectsResponse(rsp *http.Response) (*TigrisListProjectsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisListProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListProjectsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisListAppKeysResponse parses an HTTP response from a TigrisListAppKeysWithResponse call
func ParseTigrisListAppKeysResponse(rsp *http.Response) (*TigrisListAppKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisListAppKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListAppKeysResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisCreateAppKeyResponse parses an HTTP response from a TigrisCreateAppKeyWithResponse call
func ParseTigrisCreateAppKeyResponse(rsp *http.Response) (*TigrisCreateAppKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisCreateAppKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateAppKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisDeleteAppKeyResponse parses an HTTP response from a TigrisDeleteAppKeyWithResponse call
func ParseTigrisDeleteAppKeyResponse(rsp *http.Response) (*TigrisDeleteAppKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDeleteAppKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteAppKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisRotateAppKeySecretResponse parses an HTTP response from a TigrisRotateAppKeySecretWithResponse call
func ParseTigrisRotateAppKeySecretResponse(rsp *http.Response) (*TigrisRotateAppKeySecretResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisRotateAppKeySecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RotateAppKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisUpdateAppKeyResponse parses an HTTP response from a TigrisUpdateAppKeyWithResponse call
func ParseTigrisUpdateAppKeyResponse(rsp *http.Response) (*TigrisUpdateAppKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisUpdateAppKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateAppKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCacheCreateCacheResponse parses an HTTP response from a CacheCreateCacheWithResponse call
func ParseCacheCreateCacheResponse(rsp *http.Response) (*CacheCreateCacheResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CacheCreateCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateCacheResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCacheDeleteCacheResponse parses an HTTP response from a CacheDeleteCacheWithResponse call
func ParseCacheDeleteCacheResponse(rsp *http.Response) (*CacheDeleteCacheResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CacheDeleteCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteCacheResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCacheKeysResponse parses an HTTP response from a CacheKeysWithResponse call
func ParseCacheKeysResponse(rsp *http.Response) (*CacheKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CacheKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KeysResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCacheDelResponse parses an HTTP response from a CacheDelWithResponse call
func ParseCacheDelResponse(rsp *http.Response) (*CacheDelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CacheDelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCacheGetResponse parses an HTTP response from a CacheGetWithResponse call
func ParseCacheGetResponse(rsp *http.Response) (*CacheGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CacheGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCacheSetResponse parses an HTTP response from a CacheSetWithResponse call
func ParseCacheSetResponse(rsp *http.Response) (*CacheSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CacheSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisCreateProjectResponse parses an HTTP response from a TigrisCreateProjectWithResponse call
func ParseTigrisCreateProjectResponse(rsp *http.Response) (*TigrisCreateProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisCreateProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateProjectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisCreateBranchResponse parses an HTTP response from a TigrisCreateBranchWithResponse call
func ParseTigrisCreateBranchResponse(rsp *http.Response) (*TigrisCreateBranchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisCreateBranchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateBranchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisDeleteBranchResponse parses an HTTP response from a TigrisDeleteBranchWithResponse call
func ParseTigrisDeleteBranchResponse(rsp *http.Response) (*TigrisDeleteBranchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDeleteBranchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteBranchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisListCollectionsResponse parses an HTTP response from a TigrisListCollectionsWithResponse call
func ParseTigrisListCollectionsResponse(rsp *http.Response) (*TigrisListCollectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisListCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCollectionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisCreateOrUpdateCollectionResponse parses an HTTP response from a TigrisCreateOrUpdateCollectionWithResponse call
func ParseTigrisCreateOrUpdateCollectionResponse(rsp *http.Response) (*TigrisCreateOrUpdateCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisCreateOrUpdateCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateOrUpdateCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisDescribeCollectionResponse parses an HTTP response from a TigrisDescribeCollectionWithResponse call
func ParseTigrisDescribeCollectionResponse(rsp *http.Response) (*TigrisDescribeCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDescribeCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DescribeCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisDeleteResponse parses an HTTP response from a TigrisDeleteWithResponse call
func ParseTigrisDeleteResponse(rsp *http.Response) (*TigrisDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisImportResponse parses an HTTP response from a TigrisImportWithResponse call
func ParseTigrisImportResponse(rsp *http.Response) (*TigrisImportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisInsertResponse parses an HTTP response from a TigrisInsertWithResponse call
func ParseTigrisInsertResponse(rsp *http.Response) (*TigrisInsertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisInsertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsertResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisReadResponse parses an HTTP response from a TigrisReadWithResponse call
func ParseTigrisReadResponse(rsp *http.Response) (*TigrisReadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StreamingReadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisReplaceResponse parses an HTTP response from a TigrisReplaceWithResponse call
func ParseTigrisReplaceResponse(rsp *http.Response) (*TigrisReplaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisReplaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReplaceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisSearchResponse parses an HTTP response from a TigrisSearchWithResponse call
func ParseTigrisSearchResponse(rsp *http.Response) (*TigrisSearchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StreamingSearchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisUpdateResponse parses an HTTP response from a TigrisUpdateWithResponse call
func ParseTigrisUpdateResponse(rsp *http.Response) (*TigrisUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisDropCollectionResponse parses an HTTP response from a TigrisDropCollectionWithResponse call
func ParseTigrisDropCollectionResponse(rsp *http.Response) (*TigrisDropCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDropCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DropCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisDescribeDatabaseResponse parses an HTTP response from a TigrisDescribeDatabaseWithResponse call
func ParseTigrisDescribeDatabaseResponse(rsp *http.Response) (*TigrisDescribeDatabaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDescribeDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DescribeDatabaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisBeginTransactionResponse parses an HTTP response from a TigrisBeginTransactionWithResponse call
func ParseTigrisBeginTransactionResponse(rsp *http.Response) (*TigrisBeginTransactionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisBeginTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BeginTransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisCommitTransactionResponse parses an HTTP response from a TigrisCommitTransactionWithResponse call
func ParseTigrisCommitTransactionResponse(rsp *http.Response) (*TigrisCommitTransactionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisCommitTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommitTransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisRollbackTransactionResponse parses an HTTP response from a TigrisRollbackTransactionWithResponse call
func ParseTigrisRollbackTransactionResponse(rsp *http.Response) (*TigrisRollbackTransactionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisRollbackTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RollbackTransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisDeleteProjectResponse parses an HTTP response from a TigrisDeleteProjectWithResponse call
func ParseTigrisDeleteProjectResponse(rsp *http.Response) (*TigrisDeleteProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDeleteProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteProjectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRealtimeGetRTChannelsResponse parses an HTTP response from a RealtimeGetRTChannelsWithResponse call
func ParseRealtimeGetRTChannelsResponse(rsp *http.Response) (*RealtimeGetRTChannelsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RealtimeGetRTChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRTChannelsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRealtimeGetRTChannelResponse parses an HTTP response from a RealtimeGetRTChannelWithResponse call
func ParseRealtimeGetRTChannelResponse(rsp *http.Response) (*RealtimeGetRTChannelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RealtimeGetRTChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRTChannelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRealtimeReadMessagesResponse parses an HTTP response from a RealtimeReadMessagesWithResponse call
func ParseRealtimeReadMessagesResponse(rsp *http.Response) (*RealtimeReadMessagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RealtimeReadMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReadMessagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRealtimeMessagesResponse parses an HTTP response from a RealtimeMessagesWithResponse call
func ParseRealtimeMessagesResponse(rsp *http.Response) (*RealtimeMessagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RealtimeMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MessagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRealtimePresenceResponse parses an HTTP response from a RealtimePresenceWithResponse call
func ParseRealtimePresenceResponse(rsp *http.Response) (*RealtimePresenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RealtimePresenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PresenceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRealtimeListSubscriptionsResponse parses an HTTP response from a RealtimeListSubscriptionsWithResponse call
func ParseRealtimeListSubscriptionsResponse(rsp *http.Response) (*RealtimeListSubscriptionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RealtimeListSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
