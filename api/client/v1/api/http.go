// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ErrorCode.
const (
	ABORTED            ErrorCode = "ABORTED"
	ALREADYEXISTS      ErrorCode = "ALREADY_EXISTS"
	BADGATEWAY         ErrorCode = "BAD_GATEWAY"
	CANCELLED          ErrorCode = "CANCELLED"
	CONFLICT           ErrorCode = "CONFLICT"
	DATALOSS           ErrorCode = "DATA_LOSS"
	DEADLINEEXCEEDED   ErrorCode = "DEADLINE_EXCEEDED"
	FAILEDPRECONDITION ErrorCode = "FAILED_PRECONDITION"
	INTERNAL           ErrorCode = "INTERNAL"
	INVALIDARGUMENT    ErrorCode = "INVALID_ARGUMENT"
	NOTFOUND           ErrorCode = "NOT_FOUND"
	OK                 ErrorCode = "OK"
	OUTOFRANGE         ErrorCode = "OUT_OF_RANGE"
	PERMISSIONDENIED   ErrorCode = "PERMISSION_DENIED"
	RESOURCEEXHAUSTED  ErrorCode = "RESOURCE_EXHAUSTED"
	UNAUTHENTICATED    ErrorCode = "UNAUTHENTICATED"
	UNAVAILABLE        ErrorCode = "UNAVAILABLE"
	UNIMPLEMENTED      ErrorCode = "UNIMPLEMENTED"
	UNKNOWN            ErrorCode = "UNKNOWN"
)

// Start new transaction in database specified by "db".
type BeginTransactionRequest struct {
	// Options that can be used to modify the transaction semantics.
	Options *TransactionOptions `json:"options,omitempty"`
}

// Start transaction returns transaction context  which uniquely identifies the transaction
type BeginTransactionResponse struct {
	// Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the subsequent requests in order to run them in the context of the same transaction.
	TxCtx *TransactionCtx `json:"tx_ctx,omitempty"`
}

// CollectionDescription defines model for CollectionDescription.
type CollectionDescription struct {
	// Name of the collection.
	Collection *string             `json:"collection,omitempty"`
	Metadata   *CollectionMetadata `json:"metadata,omitempty"`

	// Collections schema
	Schema json.RawMessage `json:"schema,omitempty"`
}

// CollectionInfo defines model for CollectionInfo.
type CollectionInfo struct {
	// Collection name.
	Collection *string             `json:"collection,omitempty"`
	Metadata   *CollectionMetadata `json:"metadata,omitempty"`
}

// CollectionMetadata defines model for CollectionMetadata.
type CollectionMetadata = map[string]interface{}

// Collection requests modifying options.
type CollectionOptions struct {
	// Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the subsequent requests in order to run them in the context of the same transaction.
	TxCtx *TransactionCtx `json:"tx_ctx,omitempty"`
}

// Commit transaction with the given ID
type CommitTransactionRequest struct {
	// Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the subsequent requests in order to run them in the context of the same transaction.
	TxCtx *TransactionCtx `json:"tx_ctx,omitempty"`
}

// CommitTransactionResponse defines model for CommitTransactionResponse.
type CommitTransactionResponse struct {
	// Status of commit transaction operation.
	Status *string `json:"status,omitempty"`
}

// CreateDatabaseRequest defines model for CreateDatabaseRequest.
type CreateDatabaseRequest struct {
	// Database requests modifying options.
	Options *DatabaseOptions `json:"options,omitempty"`
}

// CreateDatabaseResponse defines model for CreateDatabaseResponse.
type CreateDatabaseResponse struct {
	// A detailed response message.
	Message *string `json:"message,omitempty"`

	// An enum with value set as "created".
	Status *string `json:"status,omitempty"`
}

// CreateOrUpdateCollectionRequest defines model for CreateOrUpdateCollectionRequest.
type CreateOrUpdateCollectionRequest struct {
	OnlyCreate *bool `json:"only_create,omitempty"`

	// Collection requests modifying options.
	Options *CollectionOptions `json:"options,omitempty"`

	// Schema of the documents in this collection. The schema specifications are same as JSON schema specification defined <a href="https://json-schema.org/specification.html" title="here">here</a>. <p></p>The following is an schema example: `{  "title": "user",  "description": "Collection of documents with details of users",  "properties": {    "id": {      "description": "A unique identifier for the user",      "type": "integer"    },    "name": {      "description": "Name of the user",      "type": "string",      "maxLength": 100    },    "balance": {      "description": "User account balance",      "type": "number"    }  },  "primary_key": ["id"] }`
	Schema json.RawMessage `json:"schema,omitempty"`
}

// CreateOrUpdateCollectionResponse defines model for CreateOrUpdateCollectionResponse.
type CreateOrUpdateCollectionResponse struct {
	// A detailed response message.
	Message *string `json:"message,omitempty"`

	// An enum with value set as "created" or "updated"
	Status *string `json:"status,omitempty"`
}

// DatabaseInfo defines model for DatabaseInfo.
type DatabaseInfo struct {
	// Database name.
	Db       *string           `json:"db,omitempty"`
	Metadata *DatabaseMetadata `json:"metadata,omitempty"`
}

// DatabaseMetadata defines model for DatabaseMetadata.
type DatabaseMetadata = map[string]interface{}

// Database requests modifying options.
type DatabaseOptions = map[string]interface{}

// DeleteRequest defines model for DeleteRequest.
type DeleteRequest struct {
	// Delete documents which matching specified filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: <li> To delete a user document where the id has a value 1: ```{"id": 1 }``` <li> To delete all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`
	Filter json.RawMessage `json:"filter,omitempty"`

	// Additional options for deleted requests.
	Options *DeleteRequestOptions `json:"options,omitempty"`
}

// Additional options for deleted requests.
type DeleteRequestOptions struct {
	// Additional options to modify write requests.
	WriteOptions *WriteOptions `json:"write_options,omitempty"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Has metadata related to the documents stored.
	Metadata *ResponseMetadata `json:"metadata,omitempty"`

	// an enum with value set as "deleted"
	Status *string `json:"status,omitempty"`
}

// DescribeCollectionRequest defines model for DescribeCollectionRequest.
type DescribeCollectionRequest struct {
	// Name of the collection.
	Collection *string `json:"collection,omitempty"`

	// Name of the database.
	Db *string `json:"db,omitempty"`

	// Collection requests modifying options.
	Options *CollectionOptions `json:"options,omitempty"`
}

// A detailed description about the collection. The description returns collection metadata and the schema.
type DescribeCollectionResponse struct {
	// Name of the collection.
	Collection *string             `json:"collection,omitempty"`
	Metadata   *CollectionMetadata `json:"metadata,omitempty"`

	// Collections schema
	Schema json.RawMessage `json:"schema,omitempty"`
}

// DescribeDatabaseRequest defines model for DescribeDatabaseRequest.
type DescribeDatabaseRequest struct {
	// Name of the database.
	Db *string `json:"db,omitempty"`
}

// A detailed description about the database and all associated collections. Description of the collection includes schema details as well.
type DescribeDatabaseResponse struct {
	// A detailed description about all the collections. The description returns collection metadata and the schema.
	Collections *[]CollectionDescription `json:"collections,omitempty"`

	// Name of the database.
	Db       *string           `json:"db,omitempty"`
	Metadata *DatabaseMetadata `json:"metadata,omitempty"`
}

// DropCollectionRequest defines model for DropCollectionRequest.
type DropCollectionRequest struct {
	// Collection requests modifying options.
	Options *CollectionOptions `json:"options,omitempty"`
}

// DropCollectionResponse defines model for DropCollectionResponse.
type DropCollectionResponse struct {
	// A detailed response message.
	Message *string `json:"message,omitempty"`

	// An enum with value set as "dropped".
	Status *string `json:"status,omitempty"`
}

// DropDatabaseRequest defines model for DropDatabaseRequest.
type DropDatabaseRequest struct {
	// Database requests modifying options.
	Options *DatabaseOptions `json:"options,omitempty"`
}

// DropDatabaseResponse defines model for DropDatabaseResponse.
type DropDatabaseResponse struct {
	// A detailed response message.
	Message *string `json:"message,omitempty"`

	// An enum with value set as "dropped".
	Status *string `json:"status,omitempty"`
}

// The Error type defines a logical error model
type Error struct {
	// The status code is a short, machine parsable string, which uniquely identifies the error type. Tigris to HTTP code mapping [here](/reference/http-code)
	Code *ErrorCode `json:"code,omitempty"`

	// A developer-facing descriptive error message
	Message *string `json:"message,omitempty"`
}

// The status code is a short, machine parsable string, which uniquely identifies the error type. Tigris to HTTP code mapping [here](/reference/http-code)
type ErrorCode string

// EventsRequest defines model for EventsRequest.
type EventsRequest struct {
	Collection *string               `json:"collection,omitempty"`
	Db         *string               `json:"db,omitempty"`
	Options    *EventsRequestOptions `json:"options,omitempty"`
}

// EventsRequestOptions defines model for EventsRequestOptions.
type EventsRequestOptions = map[string]interface{}

// EventsResponse defines model for EventsResponse.
type EventsResponse struct {
	Event *StreamEvent `json:"event,omitempty"`
}

// GetInfoResponse defines model for GetInfoResponse.
type GetInfoResponse struct {
	ServerVersion *string `json:"server_version,omitempty"`
}

// InsertRequest defines model for InsertRequest.
type InsertRequest struct {
	// Array of documents to insert. Each document is a JSON object.
	Documents *[]json.RawMessage `json:"documents,omitempty"`

	// additional options for insert requests.
	Options *InsertRequestOptions `json:"options,omitempty"`
}

// additional options for insert requests.
type InsertRequestOptions struct {
	// Additional options to modify write requests.
	WriteOptions *WriteOptions `json:"write_options,omitempty"`
}

// InsertResponse defines model for InsertResponse.
type InsertResponse struct {
	// an array returns the value of the primary keys.
	Keys *[][]byte `json:"keys,omitempty"`

	// Has metadata related to the documents stored.
	Metadata *ResponseMetadata `json:"metadata,omitempty"`

	// An enum with value set as "inserted"
	Status *string `json:"status,omitempty"`
}

// ListCollectionsRequest defines model for ListCollectionsRequest.
type ListCollectionsRequest struct {
	// Collection requests modifying options.
	Options *CollectionOptions `json:"options,omitempty"`
}

// ListCollectionsResponse defines model for ListCollectionsResponse.
type ListCollectionsResponse struct {
	// List of the collections info in the database.
	Collections *[]CollectionInfo `json:"collections,omitempty"`

	// Name of the database.
	Db *string `json:"db,omitempty"`
}

// ListDatabasesResponse defines model for ListDatabasesResponse.
type ListDatabasesResponse struct {
	// List of the databases.
	Databases *[]DatabaseInfo `json:"databases,omitempty"`
}

// ReadRequest defines model for ReadRequest.
type ReadRequest struct {
	// To read specific fields from a document. Default is all.
	Fields json.RawMessage `json:"fields,omitempty"`

	// Returns documents matching this filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: <li> To read a user document where the id has a value 1: ```{"id": 1 }``` <li> To read all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`
	Filter json.RawMessage `json:"filter,omitempty"`

	// Options that can be used to modify the results, for example "limit" to control the number of documents returned by the server.
	Options *ReadRequestOptions `json:"options,omitempty"`
}

// Options that can be used to modify the results, for example "limit" to control the number of documents returned by the server.
type ReadRequestOptions struct {
	// Limit the number of documents returned by the read operation.
	Limit *int64 `json:"limit,omitempty"`

	// A cursor for use in pagination. The next streams will return documents after this offset.
	Offset *[]byte `json:"offset,omitempty"`

	// Number of documents to skip before starting to return resulting documents.
	Skip *int64 `json:"skip,omitempty"`

	// Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the subsequent requests in order to run them in the context of the same transaction.
	TxCtx *TransactionCtx `json:"tx_ctx,omitempty"`
}

// ReadResponse defines model for ReadResponse.
type ReadResponse struct {
	// Object containing the collection document.
	Data json.RawMessage `json:"data,omitempty"`

	// Has metadata related to the documents stored.
	Metadata *ResponseMetadata `json:"metadata,omitempty"`

	// An internal key, used for pagination.
	ResumeToken *[]byte `json:"resume_token,omitempty"`
}

// ReplaceRequest defines model for ReplaceRequest.
type ReplaceRequest struct {
	// Array of documents to be replaced. Each document is a JSON object.
	Documents *[]json.RawMessage `json:"documents,omitempty"`

	// Additional options for replace requests.
	Options *ReplaceRequestOptions `json:"options,omitempty"`
}

// Additional options for replace requests.
type ReplaceRequestOptions struct {
	// Additional options to modify write requests.
	WriteOptions *WriteOptions `json:"write_options,omitempty"`
}

// ReplaceResponse defines model for ReplaceResponse.
type ReplaceResponse struct {
	// an array returns the value of the primary keys.
	Keys *[][]byte `json:"keys,omitempty"`

	// Has metadata related to the documents stored.
	Metadata *ResponseMetadata `json:"metadata,omitempty"`

	// an enum with value set as "replaced"
	Status *string `json:"status,omitempty"`
}

// Has metadata related to the documents stored.
type ResponseMetadata struct {
	// Time at which the document was inserted/replaced. Measured in nano-seconds since the Unix epoch.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Time at which the document was deleted. Measured in nano-seconds since the Unix epoch.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`

	// Time at which the document was updated. Measured in nano-seconds since the Unix epoch.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Rollback transaction with the given ID
type RollbackTransactionRequest struct {
	// Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the subsequent requests in order to run them in the context of the same transaction.
	TxCtx *TransactionCtx `json:"tx_ctx,omitempty"`
}

// RollbackTransactionResponse defines model for RollbackTransactionResponse.
type RollbackTransactionResponse struct {
	// Status of rollback transaction operation.
	Status *string `json:"status,omitempty"`
}

// Status defines model for Status.
type Status struct {
	// The Error type defines a logical error model
	Error *Error `json:"error,omitempty"`
}

// StreamEvent defines model for StreamEvent.
type StreamEvent struct {
	Collection *string         `json:"collection,omitempty"`
	Data       json.RawMessage `json:"data,omitempty"`
	Key        *[]byte         `json:"key,omitempty"`
	Last       *bool           `json:"last,omitempty"`
	Lkey       *[]byte         `json:"lkey,omitempty"`
	Op         *string         `json:"op,omitempty"`
	Rkey       *[]byte         `json:"rkey,omitempty"`
	TxId       *[]byte         `json:"tx_id,omitempty"`
}

// StreamingEventsResponse defines model for StreamingEventsResponse.
type StreamingEventsResponse struct {
	// The Error type defines a logical error model
	Error  *Error          `json:"error,omitempty"`
	Result *EventsResponse `json:"result,omitempty"`
}

// StreamingReadResponse defines model for StreamingReadResponse.
type StreamingReadResponse struct {
	// The Error type defines a logical error model
	Error  *Error        `json:"error,omitempty"`
	Result *ReadResponse `json:"result,omitempty"`
}

// Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the subsequent requests in order to run them in the context of the same transaction.
type TransactionCtx struct {
	// Unique for a single transactional request.
	Id *string `json:"id,omitempty"`

	// Serves as an internal identifier.
	Origin *string `json:"origin,omitempty"`
}

// Options that can be used to modify the transaction semantics.
type TransactionOptions = map[string]interface{}

// UpdateRequest defines model for UpdateRequest.
type UpdateRequest struct {
	// Fields contains set of fields with the values which need to be updated. Should be proper JSON object.
	Fields json.RawMessage `json:"fields,omitempty"`

	// Update documents which matching specified filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: <li> To update a user document where the id has a value 1: ```{"id": 1 }``` <li> To update all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`
	Filter json.RawMessage `json:"filter,omitempty"`

	// Additional options for update requests.
	Options *UpdateRequestOptions `json:"options,omitempty"`
}

// Additional options for update requests.
type UpdateRequestOptions struct {
	// Additional options to modify write requests.
	WriteOptions *WriteOptions `json:"write_options,omitempty"`
}

// UpdateResponse defines model for UpdateResponse.
type UpdateResponse struct {
	// Has metadata related to the documents stored.
	Metadata *ResponseMetadata `json:"metadata,omitempty"`

	// Returns the number of documents modified.
	ModifiedCount *int32 `json:"modified_count,omitempty"`

	// an enum with value set as "updated".
	Status *string `json:"status,omitempty"`
}

// Additional options to modify write requests.
type WriteOptions struct {
	// Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the subsequent requests in order to run them in the context of the same transaction.
	TxCtx *TransactionCtx `json:"tx_ctx,omitempty"`
}

// TigrisListCollectionsJSONBody defines parameters for TigrisListCollections.
type TigrisListCollectionsJSONBody = ListCollectionsRequest

// TigrisCreateOrUpdateCollectionJSONBody defines parameters for TigrisCreateOrUpdateCollection.
type TigrisCreateOrUpdateCollectionJSONBody = CreateOrUpdateCollectionRequest

// TigrisDescribeCollectionJSONBody defines parameters for TigrisDescribeCollection.
type TigrisDescribeCollectionJSONBody = DescribeCollectionRequest

// TigrisDeleteJSONBody defines parameters for TigrisDelete.
type TigrisDeleteJSONBody = DeleteRequest

// TigrisInsertJSONBody defines parameters for TigrisInsert.
type TigrisInsertJSONBody = InsertRequest

// TigrisReadJSONBody defines parameters for TigrisRead.
type TigrisReadJSONBody = ReadRequest

// TigrisReplaceJSONBody defines parameters for TigrisReplace.
type TigrisReplaceJSONBody = ReplaceRequest

// TigrisUpdateJSONBody defines parameters for TigrisUpdate.
type TigrisUpdateJSONBody = UpdateRequest

// TigrisDropCollectionJSONBody defines parameters for TigrisDropCollection.
type TigrisDropCollectionJSONBody = DropCollectionRequest

// TigrisEventsJSONBody defines parameters for TigrisEvents.
type TigrisEventsJSONBody = EventsRequest

// TigrisCreateDatabaseJSONBody defines parameters for TigrisCreateDatabase.
type TigrisCreateDatabaseJSONBody = CreateDatabaseRequest

// TigrisDescribeDatabaseJSONBody defines parameters for TigrisDescribeDatabase.
type TigrisDescribeDatabaseJSONBody = DescribeDatabaseRequest

// TigrisDropDatabaseJSONBody defines parameters for TigrisDropDatabase.
type TigrisDropDatabaseJSONBody = DropDatabaseRequest

// TigrisBeginTransactionJSONBody defines parameters for TigrisBeginTransaction.
type TigrisBeginTransactionJSONBody = BeginTransactionRequest

// TigrisCommitTransactionJSONBody defines parameters for TigrisCommitTransaction.
type TigrisCommitTransactionJSONBody = CommitTransactionRequest

// TigrisRollbackTransactionJSONBody defines parameters for TigrisRollbackTransaction.
type TigrisRollbackTransactionJSONBody = RollbackTransactionRequest

// TigrisListCollectionsJSONRequestBody defines body for TigrisListCollections for application/json ContentType.
type TigrisListCollectionsJSONRequestBody = TigrisListCollectionsJSONBody

// TigrisCreateOrUpdateCollectionJSONRequestBody defines body for TigrisCreateOrUpdateCollection for application/json ContentType.
type TigrisCreateOrUpdateCollectionJSONRequestBody = TigrisCreateOrUpdateCollectionJSONBody

// TigrisDescribeCollectionJSONRequestBody defines body for TigrisDescribeCollection for application/json ContentType.
type TigrisDescribeCollectionJSONRequestBody = TigrisDescribeCollectionJSONBody

// TigrisDeleteJSONRequestBody defines body for TigrisDelete for application/json ContentType.
type TigrisDeleteJSONRequestBody = TigrisDeleteJSONBody

// TigrisInsertJSONRequestBody defines body for TigrisInsert for application/json ContentType.
type TigrisInsertJSONRequestBody = TigrisInsertJSONBody

// TigrisReadJSONRequestBody defines body for TigrisRead for application/json ContentType.
type TigrisReadJSONRequestBody = TigrisReadJSONBody

// TigrisReplaceJSONRequestBody defines body for TigrisReplace for application/json ContentType.
type TigrisReplaceJSONRequestBody = TigrisReplaceJSONBody

// TigrisUpdateJSONRequestBody defines body for TigrisUpdate for application/json ContentType.
type TigrisUpdateJSONRequestBody = TigrisUpdateJSONBody

// TigrisDropCollectionJSONRequestBody defines body for TigrisDropCollection for application/json ContentType.
type TigrisDropCollectionJSONRequestBody = TigrisDropCollectionJSONBody

// TigrisEventsJSONRequestBody defines body for TigrisEvents for application/json ContentType.
type TigrisEventsJSONRequestBody = TigrisEventsJSONBody

// TigrisCreateDatabaseJSONRequestBody defines body for TigrisCreateDatabase for application/json ContentType.
type TigrisCreateDatabaseJSONRequestBody = TigrisCreateDatabaseJSONBody

// TigrisDescribeDatabaseJSONRequestBody defines body for TigrisDescribeDatabase for application/json ContentType.
type TigrisDescribeDatabaseJSONRequestBody = TigrisDescribeDatabaseJSONBody

// TigrisDropDatabaseJSONRequestBody defines body for TigrisDropDatabase for application/json ContentType.
type TigrisDropDatabaseJSONRequestBody = TigrisDropDatabaseJSONBody

// TigrisBeginTransactionJSONRequestBody defines body for TigrisBeginTransaction for application/json ContentType.
type TigrisBeginTransactionJSONRequestBody = TigrisBeginTransactionJSONBody

// TigrisCommitTransactionJSONRequestBody defines body for TigrisCommitTransaction for application/json ContentType.
type TigrisCommitTransactionJSONRequestBody = TigrisCommitTransactionJSONBody

// TigrisRollbackTransactionJSONRequestBody defines body for TigrisRollbackTransaction for application/json ContentType.
type TigrisRollbackTransactionJSONRequestBody = TigrisRollbackTransactionJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// TigrisListDatabases request
	TigrisListDatabases(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisListCollections request with any body
	TigrisListCollectionsWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisListCollections(ctx context.Context, db string, body TigrisListCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisCreateOrUpdateCollection request with any body
	TigrisCreateOrUpdateCollectionWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisCreateOrUpdateCollection(ctx context.Context, db string, collection string, body TigrisCreateOrUpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDescribeCollection request with any body
	TigrisDescribeCollectionWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDescribeCollection(ctx context.Context, db string, collection string, body TigrisDescribeCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDelete request with any body
	TigrisDeleteWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDelete(ctx context.Context, db string, collection string, body TigrisDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisInsert request with any body
	TigrisInsertWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisInsert(ctx context.Context, db string, collection string, body TigrisInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisRead request with any body
	TigrisReadWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisRead(ctx context.Context, db string, collection string, body TigrisReadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisReplace request with any body
	TigrisReplaceWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisReplace(ctx context.Context, db string, collection string, body TigrisReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisUpdate request with any body
	TigrisUpdateWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisUpdate(ctx context.Context, db string, collection string, body TigrisUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDropCollection request with any body
	TigrisDropCollectionWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDropCollection(ctx context.Context, db string, collection string, body TigrisDropCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisEvents request with any body
	TigrisEventsWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisEvents(ctx context.Context, db string, collection string, body TigrisEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisCreateDatabase request with any body
	TigrisCreateDatabaseWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisCreateDatabase(ctx context.Context, db string, body TigrisCreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDescribeDatabase request with any body
	TigrisDescribeDatabaseWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDescribeDatabase(ctx context.Context, db string, body TigrisDescribeDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisDropDatabase request with any body
	TigrisDropDatabaseWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisDropDatabase(ctx context.Context, db string, body TigrisDropDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisBeginTransaction request with any body
	TigrisBeginTransactionWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisBeginTransaction(ctx context.Context, db string, body TigrisBeginTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisCommitTransaction request with any body
	TigrisCommitTransactionWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisCommitTransaction(ctx context.Context, db string, body TigrisCommitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisRollbackTransaction request with any body
	TigrisRollbackTransactionWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TigrisRollbackTransaction(ctx context.Context, db string, body TigrisRollbackTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TigrisGetInfo request
	TigrisGetInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) TigrisListDatabases(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisListDatabasesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisListCollectionsWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisListCollectionsRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisListCollections(ctx context.Context, db string, body TigrisListCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisListCollectionsRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisCreateOrUpdateCollectionWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisCreateOrUpdateCollectionRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisCreateOrUpdateCollection(ctx context.Context, db string, collection string, body TigrisCreateOrUpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisCreateOrUpdateCollectionRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDescribeCollectionWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDescribeCollectionRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDescribeCollection(ctx context.Context, db string, collection string, body TigrisDescribeCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDescribeCollectionRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDeleteWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDeleteRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDelete(ctx context.Context, db string, collection string, body TigrisDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDeleteRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisInsertWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisInsertRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisInsert(ctx context.Context, db string, collection string, body TigrisInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisInsertRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisReadWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisReadRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisRead(ctx context.Context, db string, collection string, body TigrisReadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisReadRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisReplaceWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisReplaceRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisReplace(ctx context.Context, db string, collection string, body TigrisReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisReplaceRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisUpdateWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisUpdateRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisUpdate(ctx context.Context, db string, collection string, body TigrisUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisUpdateRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDropCollectionWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDropCollectionRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDropCollection(ctx context.Context, db string, collection string, body TigrisDropCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDropCollectionRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisEventsWithBody(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisEventsRequestWithBody(c.Server, db, collection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisEvents(ctx context.Context, db string, collection string, body TigrisEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisEventsRequest(c.Server, db, collection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisCreateDatabaseWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisCreateDatabaseRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisCreateDatabase(ctx context.Context, db string, body TigrisCreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisCreateDatabaseRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDescribeDatabaseWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDescribeDatabaseRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDescribeDatabase(ctx context.Context, db string, body TigrisDescribeDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDescribeDatabaseRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDropDatabaseWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDropDatabaseRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisDropDatabase(ctx context.Context, db string, body TigrisDropDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisDropDatabaseRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisBeginTransactionWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisBeginTransactionRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisBeginTransaction(ctx context.Context, db string, body TigrisBeginTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisBeginTransactionRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisCommitTransactionWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisCommitTransactionRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisCommitTransaction(ctx context.Context, db string, body TigrisCommitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisCommitTransactionRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisRollbackTransactionWithBody(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisRollbackTransactionRequestWithBody(c.Server, db, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisRollbackTransaction(ctx context.Context, db string, body TigrisRollbackTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisRollbackTransactionRequest(c.Server, db, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TigrisGetInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTigrisGetInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewTigrisListDatabasesRequest generates requests for TigrisListDatabases
func NewTigrisListDatabasesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTigrisListCollectionsRequest calls the generic TigrisListCollections builder with application/json body
func NewTigrisListCollectionsRequest(server string, db string, body TigrisListCollectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisListCollectionsRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisListCollectionsRequestWithBody generates requests for TigrisListCollections with any type of body
func NewTigrisListCollectionsRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/list", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisCreateOrUpdateCollectionRequest calls the generic TigrisCreateOrUpdateCollection builder with application/json body
func NewTigrisCreateOrUpdateCollectionRequest(server string, db string, collection string, body TigrisCreateOrUpdateCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisCreateOrUpdateCollectionRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisCreateOrUpdateCollectionRequestWithBody generates requests for TigrisCreateOrUpdateCollection with any type of body
func NewTigrisCreateOrUpdateCollectionRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/createOrUpdate", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDescribeCollectionRequest calls the generic TigrisDescribeCollection builder with application/json body
func NewTigrisDescribeCollectionRequest(server string, db string, collection string, body TigrisDescribeCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDescribeCollectionRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisDescribeCollectionRequestWithBody generates requests for TigrisDescribeCollection with any type of body
func NewTigrisDescribeCollectionRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/describe", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDeleteRequest calls the generic TigrisDelete builder with application/json body
func NewTigrisDeleteRequest(server string, db string, collection string, body TigrisDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDeleteRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisDeleteRequestWithBody generates requests for TigrisDelete with any type of body
func NewTigrisDeleteRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/documents/delete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisInsertRequest calls the generic TigrisInsert builder with application/json body
func NewTigrisInsertRequest(server string, db string, collection string, body TigrisInsertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisInsertRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisInsertRequestWithBody generates requests for TigrisInsert with any type of body
func NewTigrisInsertRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/documents/insert", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisReadRequest calls the generic TigrisRead builder with application/json body
func NewTigrisReadRequest(server string, db string, collection string, body TigrisReadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisReadRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisReadRequestWithBody generates requests for TigrisRead with any type of body
func NewTigrisReadRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/documents/read", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisReplaceRequest calls the generic TigrisReplace builder with application/json body
func NewTigrisReplaceRequest(server string, db string, collection string, body TigrisReplaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisReplaceRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisReplaceRequestWithBody generates requests for TigrisReplace with any type of body
func NewTigrisReplaceRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/documents/replace", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisUpdateRequest calls the generic TigrisUpdate builder with application/json body
func NewTigrisUpdateRequest(server string, db string, collection string, body TigrisUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisUpdateRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisUpdateRequestWithBody generates requests for TigrisUpdate with any type of body
func NewTigrisUpdateRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/documents/update", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDropCollectionRequest calls the generic TigrisDropCollection builder with application/json body
func NewTigrisDropCollectionRequest(server string, db string, collection string, body TigrisDropCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDropCollectionRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisDropCollectionRequestWithBody generates requests for TigrisDropCollection with any type of body
func NewTigrisDropCollectionRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/drop", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisEventsRequest calls the generic TigrisEvents builder with application/json body
func NewTigrisEventsRequest(server string, db string, collection string, body TigrisEventsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisEventsRequestWithBody(server, db, collection, "application/json", bodyReader)
}

// NewTigrisEventsRequestWithBody generates requests for TigrisEvents with any type of body
func NewTigrisEventsRequestWithBody(server string, db string, collection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection", runtime.ParamLocationPath, collection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/collections/%s/events", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisCreateDatabaseRequest calls the generic TigrisCreateDatabase builder with application/json body
func NewTigrisCreateDatabaseRequest(server string, db string, body TigrisCreateDatabaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisCreateDatabaseRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisCreateDatabaseRequestWithBody generates requests for TigrisCreateDatabase with any type of body
func NewTigrisCreateDatabaseRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/create", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDescribeDatabaseRequest calls the generic TigrisDescribeDatabase builder with application/json body
func NewTigrisDescribeDatabaseRequest(server string, db string, body TigrisDescribeDatabaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDescribeDatabaseRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisDescribeDatabaseRequestWithBody generates requests for TigrisDescribeDatabase with any type of body
func NewTigrisDescribeDatabaseRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/describe", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisDropDatabaseRequest calls the generic TigrisDropDatabase builder with application/json body
func NewTigrisDropDatabaseRequest(server string, db string, body TigrisDropDatabaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisDropDatabaseRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisDropDatabaseRequestWithBody generates requests for TigrisDropDatabase with any type of body
func NewTigrisDropDatabaseRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/drop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisBeginTransactionRequest calls the generic TigrisBeginTransaction builder with application/json body
func NewTigrisBeginTransactionRequest(server string, db string, body TigrisBeginTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisBeginTransactionRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisBeginTransactionRequestWithBody generates requests for TigrisBeginTransaction with any type of body
func NewTigrisBeginTransactionRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/transactions/begin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisCommitTransactionRequest calls the generic TigrisCommitTransaction builder with application/json body
func NewTigrisCommitTransactionRequest(server string, db string, body TigrisCommitTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisCommitTransactionRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisCommitTransactionRequestWithBody generates requests for TigrisCommitTransaction with any type of body
func NewTigrisCommitTransactionRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/transactions/commit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisRollbackTransactionRequest calls the generic TigrisRollbackTransaction builder with application/json body
func NewTigrisRollbackTransactionRequest(server string, db string, body TigrisRollbackTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTigrisRollbackTransactionRequestWithBody(server, db, "application/json", bodyReader)
}

// NewTigrisRollbackTransactionRequestWithBody generates requests for TigrisRollbackTransaction with any type of body
func NewTigrisRollbackTransactionRequestWithBody(server string, db string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db", runtime.ParamLocationPath, db)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/databases/%s/transactions/rollback", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTigrisGetInfoRequest generates requests for TigrisGetInfo
func NewTigrisGetInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// TigrisListDatabases request
	TigrisListDatabasesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TigrisListDatabasesResponse, error)

	// TigrisListCollections request with any body
	TigrisListCollectionsWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisListCollectionsResponse, error)

	TigrisListCollectionsWithResponse(ctx context.Context, db string, body TigrisListCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisListCollectionsResponse, error)

	// TigrisCreateOrUpdateCollection request with any body
	TigrisCreateOrUpdateCollectionWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisCreateOrUpdateCollectionResponse, error)

	TigrisCreateOrUpdateCollectionWithResponse(ctx context.Context, db string, collection string, body TigrisCreateOrUpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisCreateOrUpdateCollectionResponse, error)

	// TigrisDescribeCollection request with any body
	TigrisDescribeCollectionWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDescribeCollectionResponse, error)

	TigrisDescribeCollectionWithResponse(ctx context.Context, db string, collection string, body TigrisDescribeCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDescribeCollectionResponse, error)

	// TigrisDelete request with any body
	TigrisDeleteWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDeleteResponse, error)

	TigrisDeleteWithResponse(ctx context.Context, db string, collection string, body TigrisDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDeleteResponse, error)

	// TigrisInsert request with any body
	TigrisInsertWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisInsertResponse, error)

	TigrisInsertWithResponse(ctx context.Context, db string, collection string, body TigrisInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisInsertResponse, error)

	// TigrisRead request with any body
	TigrisReadWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisReadResponse, error)

	TigrisReadWithResponse(ctx context.Context, db string, collection string, body TigrisReadJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisReadResponse, error)

	// TigrisReplace request with any body
	TigrisReplaceWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisReplaceResponse, error)

	TigrisReplaceWithResponse(ctx context.Context, db string, collection string, body TigrisReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisReplaceResponse, error)

	// TigrisUpdate request with any body
	TigrisUpdateWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisUpdateResponse, error)

	TigrisUpdateWithResponse(ctx context.Context, db string, collection string, body TigrisUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisUpdateResponse, error)

	// TigrisDropCollection request with any body
	TigrisDropCollectionWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDropCollectionResponse, error)

	TigrisDropCollectionWithResponse(ctx context.Context, db string, collection string, body TigrisDropCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDropCollectionResponse, error)

	// TigrisEvents request with any body
	TigrisEventsWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisEventsResponse, error)

	TigrisEventsWithResponse(ctx context.Context, db string, collection string, body TigrisEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisEventsResponse, error)

	// TigrisCreateDatabase request with any body
	TigrisCreateDatabaseWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisCreateDatabaseResponse, error)

	TigrisCreateDatabaseWithResponse(ctx context.Context, db string, body TigrisCreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisCreateDatabaseResponse, error)

	// TigrisDescribeDatabase request with any body
	TigrisDescribeDatabaseWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDescribeDatabaseResponse, error)

	TigrisDescribeDatabaseWithResponse(ctx context.Context, db string, body TigrisDescribeDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDescribeDatabaseResponse, error)

	// TigrisDropDatabase request with any body
	TigrisDropDatabaseWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDropDatabaseResponse, error)

	TigrisDropDatabaseWithResponse(ctx context.Context, db string, body TigrisDropDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDropDatabaseResponse, error)

	// TigrisBeginTransaction request with any body
	TigrisBeginTransactionWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisBeginTransactionResponse, error)

	TigrisBeginTransactionWithResponse(ctx context.Context, db string, body TigrisBeginTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisBeginTransactionResponse, error)

	// TigrisCommitTransaction request with any body
	TigrisCommitTransactionWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisCommitTransactionResponse, error)

	TigrisCommitTransactionWithResponse(ctx context.Context, db string, body TigrisCommitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisCommitTransactionResponse, error)

	// TigrisRollbackTransaction request with any body
	TigrisRollbackTransactionWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisRollbackTransactionResponse, error)

	TigrisRollbackTransactionWithResponse(ctx context.Context, db string, body TigrisRollbackTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisRollbackTransactionResponse, error)

	// TigrisGetInfo request
	TigrisGetInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TigrisGetInfoResponse, error)
}

type TigrisListDatabasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListDatabasesResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisListDatabasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisListDatabasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisListCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCollectionsResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisListCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisListCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisCreateOrUpdateCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateOrUpdateCollectionResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisCreateOrUpdateCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisCreateOrUpdateCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDescribeCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DescribeCollectionResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisDescribeCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDescribeCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisInsertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsertResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisInsertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisInsertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StreamingReadResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisReplaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReplaceResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisReplaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisReplaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDropCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DropCollectionResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisDropCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDropCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StreamingEventsResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisCreateDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateDatabaseResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisCreateDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisCreateDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDescribeDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DescribeDatabaseResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisDescribeDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDescribeDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisDropDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DropDatabaseResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisDropDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisDropDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisBeginTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BeginTransactionResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisBeginTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisBeginTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisCommitTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommitTransactionResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisCommitTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisCommitTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisRollbackTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RollbackTransactionResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisRollbackTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisRollbackTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TigrisGetInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetInfoResponse
	JSONDefault  *Status
}

// Status returns HTTPResponse.Status
func (r TigrisGetInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TigrisGetInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TigrisListDatabasesWithResponse request returning *TigrisListDatabasesResponse
func (c *ClientWithResponses) TigrisListDatabasesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TigrisListDatabasesResponse, error) {
	rsp, err := c.TigrisListDatabases(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisListDatabasesResponse(rsp)
}

// TigrisListCollectionsWithBodyWithResponse request with arbitrary body returning *TigrisListCollectionsResponse
func (c *ClientWithResponses) TigrisListCollectionsWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisListCollectionsResponse, error) {
	rsp, err := c.TigrisListCollectionsWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisListCollectionsResponse(rsp)
}

func (c *ClientWithResponses) TigrisListCollectionsWithResponse(ctx context.Context, db string, body TigrisListCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisListCollectionsResponse, error) {
	rsp, err := c.TigrisListCollections(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisListCollectionsResponse(rsp)
}

// TigrisCreateOrUpdateCollectionWithBodyWithResponse request with arbitrary body returning *TigrisCreateOrUpdateCollectionResponse
func (c *ClientWithResponses) TigrisCreateOrUpdateCollectionWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisCreateOrUpdateCollectionResponse, error) {
	rsp, err := c.TigrisCreateOrUpdateCollectionWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisCreateOrUpdateCollectionResponse(rsp)
}

func (c *ClientWithResponses) TigrisCreateOrUpdateCollectionWithResponse(ctx context.Context, db string, collection string, body TigrisCreateOrUpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisCreateOrUpdateCollectionResponse, error) {
	rsp, err := c.TigrisCreateOrUpdateCollection(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisCreateOrUpdateCollectionResponse(rsp)
}

// TigrisDescribeCollectionWithBodyWithResponse request with arbitrary body returning *TigrisDescribeCollectionResponse
func (c *ClientWithResponses) TigrisDescribeCollectionWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDescribeCollectionResponse, error) {
	rsp, err := c.TigrisDescribeCollectionWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDescribeCollectionResponse(rsp)
}

func (c *ClientWithResponses) TigrisDescribeCollectionWithResponse(ctx context.Context, db string, collection string, body TigrisDescribeCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDescribeCollectionResponse, error) {
	rsp, err := c.TigrisDescribeCollection(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDescribeCollectionResponse(rsp)
}

// TigrisDeleteWithBodyWithResponse request with arbitrary body returning *TigrisDeleteResponse
func (c *ClientWithResponses) TigrisDeleteWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDeleteResponse, error) {
	rsp, err := c.TigrisDeleteWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDeleteResponse(rsp)
}

func (c *ClientWithResponses) TigrisDeleteWithResponse(ctx context.Context, db string, collection string, body TigrisDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDeleteResponse, error) {
	rsp, err := c.TigrisDelete(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDeleteResponse(rsp)
}

// TigrisInsertWithBodyWithResponse request with arbitrary body returning *TigrisInsertResponse
func (c *ClientWithResponses) TigrisInsertWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisInsertResponse, error) {
	rsp, err := c.TigrisInsertWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisInsertResponse(rsp)
}

func (c *ClientWithResponses) TigrisInsertWithResponse(ctx context.Context, db string, collection string, body TigrisInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisInsertResponse, error) {
	rsp, err := c.TigrisInsert(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisInsertResponse(rsp)
}

// TigrisReadWithBodyWithResponse request with arbitrary body returning *TigrisReadResponse
func (c *ClientWithResponses) TigrisReadWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisReadResponse, error) {
	rsp, err := c.TigrisReadWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisReadResponse(rsp)
}

func (c *ClientWithResponses) TigrisReadWithResponse(ctx context.Context, db string, collection string, body TigrisReadJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisReadResponse, error) {
	rsp, err := c.TigrisRead(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisReadResponse(rsp)
}

// TigrisReplaceWithBodyWithResponse request with arbitrary body returning *TigrisReplaceResponse
func (c *ClientWithResponses) TigrisReplaceWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisReplaceResponse, error) {
	rsp, err := c.TigrisReplaceWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisReplaceResponse(rsp)
}

func (c *ClientWithResponses) TigrisReplaceWithResponse(ctx context.Context, db string, collection string, body TigrisReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisReplaceResponse, error) {
	rsp, err := c.TigrisReplace(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisReplaceResponse(rsp)
}

// TigrisUpdateWithBodyWithResponse request with arbitrary body returning *TigrisUpdateResponse
func (c *ClientWithResponses) TigrisUpdateWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisUpdateResponse, error) {
	rsp, err := c.TigrisUpdateWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisUpdateResponse(rsp)
}

func (c *ClientWithResponses) TigrisUpdateWithResponse(ctx context.Context, db string, collection string, body TigrisUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisUpdateResponse, error) {
	rsp, err := c.TigrisUpdate(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisUpdateResponse(rsp)
}

// TigrisDropCollectionWithBodyWithResponse request with arbitrary body returning *TigrisDropCollectionResponse
func (c *ClientWithResponses) TigrisDropCollectionWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDropCollectionResponse, error) {
	rsp, err := c.TigrisDropCollectionWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDropCollectionResponse(rsp)
}

func (c *ClientWithResponses) TigrisDropCollectionWithResponse(ctx context.Context, db string, collection string, body TigrisDropCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDropCollectionResponse, error) {
	rsp, err := c.TigrisDropCollection(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDropCollectionResponse(rsp)
}

// TigrisEventsWithBodyWithResponse request with arbitrary body returning *TigrisEventsResponse
func (c *ClientWithResponses) TigrisEventsWithBodyWithResponse(ctx context.Context, db string, collection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisEventsResponse, error) {
	rsp, err := c.TigrisEventsWithBody(ctx, db, collection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisEventsResponse(rsp)
}

func (c *ClientWithResponses) TigrisEventsWithResponse(ctx context.Context, db string, collection string, body TigrisEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisEventsResponse, error) {
	rsp, err := c.TigrisEvents(ctx, db, collection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisEventsResponse(rsp)
}

// TigrisCreateDatabaseWithBodyWithResponse request with arbitrary body returning *TigrisCreateDatabaseResponse
func (c *ClientWithResponses) TigrisCreateDatabaseWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisCreateDatabaseResponse, error) {
	rsp, err := c.TigrisCreateDatabaseWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisCreateDatabaseResponse(rsp)
}

func (c *ClientWithResponses) TigrisCreateDatabaseWithResponse(ctx context.Context, db string, body TigrisCreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisCreateDatabaseResponse, error) {
	rsp, err := c.TigrisCreateDatabase(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisCreateDatabaseResponse(rsp)
}

// TigrisDescribeDatabaseWithBodyWithResponse request with arbitrary body returning *TigrisDescribeDatabaseResponse
func (c *ClientWithResponses) TigrisDescribeDatabaseWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDescribeDatabaseResponse, error) {
	rsp, err := c.TigrisDescribeDatabaseWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDescribeDatabaseResponse(rsp)
}

func (c *ClientWithResponses) TigrisDescribeDatabaseWithResponse(ctx context.Context, db string, body TigrisDescribeDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDescribeDatabaseResponse, error) {
	rsp, err := c.TigrisDescribeDatabase(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDescribeDatabaseResponse(rsp)
}

// TigrisDropDatabaseWithBodyWithResponse request with arbitrary body returning *TigrisDropDatabaseResponse
func (c *ClientWithResponses) TigrisDropDatabaseWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisDropDatabaseResponse, error) {
	rsp, err := c.TigrisDropDatabaseWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDropDatabaseResponse(rsp)
}

func (c *ClientWithResponses) TigrisDropDatabaseWithResponse(ctx context.Context, db string, body TigrisDropDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisDropDatabaseResponse, error) {
	rsp, err := c.TigrisDropDatabase(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisDropDatabaseResponse(rsp)
}

// TigrisBeginTransactionWithBodyWithResponse request with arbitrary body returning *TigrisBeginTransactionResponse
func (c *ClientWithResponses) TigrisBeginTransactionWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisBeginTransactionResponse, error) {
	rsp, err := c.TigrisBeginTransactionWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisBeginTransactionResponse(rsp)
}

func (c *ClientWithResponses) TigrisBeginTransactionWithResponse(ctx context.Context, db string, body TigrisBeginTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisBeginTransactionResponse, error) {
	rsp, err := c.TigrisBeginTransaction(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisBeginTransactionResponse(rsp)
}

// TigrisCommitTransactionWithBodyWithResponse request with arbitrary body returning *TigrisCommitTransactionResponse
func (c *ClientWithResponses) TigrisCommitTransactionWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisCommitTransactionResponse, error) {
	rsp, err := c.TigrisCommitTransactionWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisCommitTransactionResponse(rsp)
}

func (c *ClientWithResponses) TigrisCommitTransactionWithResponse(ctx context.Context, db string, body TigrisCommitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisCommitTransactionResponse, error) {
	rsp, err := c.TigrisCommitTransaction(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisCommitTransactionResponse(rsp)
}

// TigrisRollbackTransactionWithBodyWithResponse request with arbitrary body returning *TigrisRollbackTransactionResponse
func (c *ClientWithResponses) TigrisRollbackTransactionWithBodyWithResponse(ctx context.Context, db string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TigrisRollbackTransactionResponse, error) {
	rsp, err := c.TigrisRollbackTransactionWithBody(ctx, db, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisRollbackTransactionResponse(rsp)
}

func (c *ClientWithResponses) TigrisRollbackTransactionWithResponse(ctx context.Context, db string, body TigrisRollbackTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*TigrisRollbackTransactionResponse, error) {
	rsp, err := c.TigrisRollbackTransaction(ctx, db, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisRollbackTransactionResponse(rsp)
}

// TigrisGetInfoWithResponse request returning *TigrisGetInfoResponse
func (c *ClientWithResponses) TigrisGetInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TigrisGetInfoResponse, error) {
	rsp, err := c.TigrisGetInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTigrisGetInfoResponse(rsp)
}

// ParseTigrisListDatabasesResponse parses an HTTP response from a TigrisListDatabasesWithResponse call
func ParseTigrisListDatabasesResponse(rsp *http.Response) (*TigrisListDatabasesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisListDatabasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListDatabasesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisListCollectionsResponse parses an HTTP response from a TigrisListCollectionsWithResponse call
func ParseTigrisListCollectionsResponse(rsp *http.Response) (*TigrisListCollectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisListCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCollectionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisCreateOrUpdateCollectionResponse parses an HTTP response from a TigrisCreateOrUpdateCollectionWithResponse call
func ParseTigrisCreateOrUpdateCollectionResponse(rsp *http.Response) (*TigrisCreateOrUpdateCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisCreateOrUpdateCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateOrUpdateCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisDescribeCollectionResponse parses an HTTP response from a TigrisDescribeCollectionWithResponse call
func ParseTigrisDescribeCollectionResponse(rsp *http.Response) (*TigrisDescribeCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDescribeCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DescribeCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisDeleteResponse parses an HTTP response from a TigrisDeleteWithResponse call
func ParseTigrisDeleteResponse(rsp *http.Response) (*TigrisDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisInsertResponse parses an HTTP response from a TigrisInsertWithResponse call
func ParseTigrisInsertResponse(rsp *http.Response) (*TigrisInsertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisInsertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsertResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisReadResponse parses an HTTP response from a TigrisReadWithResponse call
func ParseTigrisReadResponse(rsp *http.Response) (*TigrisReadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StreamingReadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisReplaceResponse parses an HTTP response from a TigrisReplaceWithResponse call
func ParseTigrisReplaceResponse(rsp *http.Response) (*TigrisReplaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisReplaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReplaceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisUpdateResponse parses an HTTP response from a TigrisUpdateWithResponse call
func ParseTigrisUpdateResponse(rsp *http.Response) (*TigrisUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisDropCollectionResponse parses an HTTP response from a TigrisDropCollectionWithResponse call
func ParseTigrisDropCollectionResponse(rsp *http.Response) (*TigrisDropCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDropCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DropCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisEventsResponse parses an HTTP response from a TigrisEventsWithResponse call
func ParseTigrisEventsResponse(rsp *http.Response) (*TigrisEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StreamingEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisCreateDatabaseResponse parses an HTTP response from a TigrisCreateDatabaseWithResponse call
func ParseTigrisCreateDatabaseResponse(rsp *http.Response) (*TigrisCreateDatabaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisCreateDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateDatabaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisDescribeDatabaseResponse parses an HTTP response from a TigrisDescribeDatabaseWithResponse call
func ParseTigrisDescribeDatabaseResponse(rsp *http.Response) (*TigrisDescribeDatabaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDescribeDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DescribeDatabaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisDropDatabaseResponse parses an HTTP response from a TigrisDropDatabaseWithResponse call
func ParseTigrisDropDatabaseResponse(rsp *http.Response) (*TigrisDropDatabaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisDropDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DropDatabaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisBeginTransactionResponse parses an HTTP response from a TigrisBeginTransactionWithResponse call
func ParseTigrisBeginTransactionResponse(rsp *http.Response) (*TigrisBeginTransactionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisBeginTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BeginTransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisCommitTransactionResponse parses an HTTP response from a TigrisCommitTransactionWithResponse call
func ParseTigrisCommitTransactionResponse(rsp *http.Response) (*TigrisCommitTransactionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisCommitTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommitTransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisRollbackTransactionResponse parses an HTTP response from a TigrisRollbackTransactionWithResponse call
func ParseTigrisRollbackTransactionResponse(rsp *http.Response) (*TigrisRollbackTransactionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisRollbackTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RollbackTransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTigrisGetInfoResponse parses an HTTP response from a TigrisGetInfoWithResponse call
func ParseTigrisGetInfoResponse(rsp *http.Response) (*TigrisGetInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TigrisGetInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Us9hCiqS6+Hjw/8FAAD//wVNMvXNeQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
